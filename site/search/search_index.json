{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"accessibility/","text":"Accessibility Testing The tool uses aXe as a library to test the accessibiity aspects of a website or specific elements. This feature comes packed into 2 simple actions having all the WCAG standards baked-in, thereby making execution very easy and report analysis easier. However at any point in time we can include/exclude specific tags during the testing. Actions testAccessibility Description : This function will generate the accessibility report for the entire web page based on the input parameters passed, Report name is mandatory under the input. Usage: ObjectName Action Input Condition Reference Browser testAccessibility @ReportName Browser testAccessibility @ReportName @include tagName Browser testAccessibility @ReportName @exclude tagName Browser testAccessibility @ReportName @include tagName @exclude tagName Browser testAccessibility @ReportName @Options{} Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ). Internally Uses axe.a11yCheck(arguments[0], %s, arguments[arguments.length - 1]); testAccessibilityElement Description : This function will generate the accessibility report for a particular web element based on the input parameters passed. The input parameters are optional. In case no input parameter is passed the report will be generated for all tags associated with the element, the default name for the report will be the name of the element. Usage: ObjectName Action Input Condition Reference WebObject testAccessibilityElement @ReportName WebObject testAccessibilityElement @ReportName @Options{} Internally Uses axe.a11yCheck(arguments[0], %s, arguments[arguments.length - 1]); Example Here is an example of how to test the accessibility of all elements in a page. In the tool, the command is as follows : On running this, a report will be generated which will have the [axe] icon as shown below. On clicking this [axe] icon, the Accessibility Test report will open up which will show all the Passes as below : The report will also show all the Violations like this : In the above example the Report failed as it had the following Violations as seen in the report : aria-label attribute does not exist or is empty aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty or not visible Form element does not have an implicit (wrapped) <label> Form element does not have an explicit <label> Element has no title attribute or the title attribute is empty The report also provides this link for reference, under the [More Info] section.","title":"Accessiblity Testing"},{"location":"accessibility/#accessibility-testing","text":"The tool uses aXe as a library to test the accessibiity aspects of a website or specific elements. This feature comes packed into 2 simple actions having all the WCAG standards baked-in, thereby making execution very easy and report analysis easier. However at any point in time we can include/exclude specific tags during the testing.","title":"Accessibility Testing"},{"location":"accessibility/#actions","text":"","title":"Actions"},{"location":"accessibility/#testaccessibility","text":"Description : This function will generate the accessibility report for the entire web page based on the input parameters passed, Report name is mandatory under the input. Usage: ObjectName Action Input Condition Reference Browser testAccessibility @ReportName Browser testAccessibility @ReportName @include tagName Browser testAccessibility @ReportName @exclude tagName Browser testAccessibility @ReportName @include tagName @exclude tagName Browser testAccessibility @ReportName @Options{} Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ). Internally Uses axe.a11yCheck(arguments[0], %s, arguments[arguments.length - 1]);","title":"testAccessibility"},{"location":"accessibility/#testaccessibilityelement","text":"Description : This function will generate the accessibility report for a particular web element based on the input parameters passed. The input parameters are optional. In case no input parameter is passed the report will be generated for all tags associated with the element, the default name for the report will be the name of the element. Usage: ObjectName Action Input Condition Reference WebObject testAccessibilityElement @ReportName WebObject testAccessibilityElement @ReportName @Options{} Internally Uses axe.a11yCheck(arguments[0], %s, arguments[arguments.length - 1]);","title":"testAccessibilityElement"},{"location":"accessibility/#example","text":"Here is an example of how to test the accessibility of all elements in a page. In the tool, the command is as follows : On running this, a report will be generated which will have the [axe] icon as shown below. On clicking this [axe] icon, the Accessibility Test report will open up which will show all the Passes as below : The report will also show all the Violations like this : In the above example the Report failed as it had the following Violations as seen in the report : aria-label attribute does not exist or is empty aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty or not visible Form element does not have an implicit (wrapped) <label> Form element does not have an explicit <label> Element has no title attribute or the title attribute is empty The report also provides this link for reference, under the [More Info] section.","title":"Example"},{"location":"api/","text":"API Testing API Testing is one of the strong suites of the tool. It allows us to fire requests, receive responses, validate the response status, response body and response tags. It also allows us to store response tags which can be used for subsequent API calls or GUI flows. This makes API Testing and GUI Testing possible in a single flow coherently. How to create an API Test Case? A request should contain a setEndPoint action. This action is always marked in Blue. This is where you put the endpoint to which the request is supposed to be fired. This action comes with an editor for convenience of data set up. You can have steps to add headers/authentication etc. (if required) A request should contain an HTTP Method/Verb ( Post / Put / Get / Delete / Patch ) . This action is always marked in Green. This also comes with an editor for convenience. You can have steps to validate/store response status codes , specific tags or even the entire response body. A request should contain a closeConnection action. This action is always marked in Brown. The above is an example of a postRestRequest and then assertResponseCode followed by storeJSONelementInDataSheet Payload Data Parameterization Data Parameterization can be done using the built-in editor. If you mouse-hover on the Input column, corresponding to the Post / Put request steps as well as the setEndPoint step, an option to open up the Editor comes up. Inside this editor, we can paste the entire Payload and then parameterize the specific JSON/XML tags based on our needs. If we press [ctrl] + [SPACE] , the list of all available DataSheets : ColumnNames along with all user-defined variables show up. We can then select the appropriate item from where we want to parameterize. We need to press [esc] to close the editor The above image is a gif. So if its not moving, please reload the page Assert/Store Response Tags We can access the Response Tags using xpath for XMLs and jsonPath for JSONs. The corresponding xpath or jsonPath for the tag, should be entered in the Condition column like as shown below : Example of writing an Xpath : <root xmlns:foo=\"http://www.foo.org/\" xmlns:bar=\"http://www.bar.org\"> <actors> <actor id=\"1\">Christian Bale</actor> <actor id=\"2\">Liam Neeson</actor> <actor id=\"3\">Michael Caine</actor> </actors> </root> XPath for retrieving Liam Neeson is /root/actors/actor[2]/text() or simply //actor[2]/text() Example of writing a JSONPath : Example 1 : { \"name\":\"TestName\", \"salary\":\"12300\", \"age\":\"29\" } JSON Path for retrieving TestName is $.name Example 2 : { \"page\": 2, \"per_page\": 6, \"total\": 12, \"total_pages\": 2, \"data\": [ { \"id\": 7, \"email\": \"michael.lawson@ing.com\", \"first_name\": \"Michael\", \"last_name\": \"Lawson\" }, { \"id\": 8, \"email\": \"lindsay.ferguson@ing.com\", \"first_name\": \"Lindsay\", \"last_name\": \"Ferguson\" }, { \"id\": 9, \"email\": \"tobias.funke@ing.com\", \"first_name\": \"Tobias\", \"last_name\": \"Funke\" }, { \"id\": 10, \"email\": \"byron.fields@ing.com\", \"first_name\": \"Byron\", \"last_name\": \"Fields\" }, { \"id\": 11, \"email\": \"george.edwards@ing.com\", \"first_name\": \"George\", \"last_name\": \"Edwards\" }, { \"id\": 12, \"email\": \"rachel.howell@ing.com\", \"first_name\": \"Rachel\", \"last_name\": \"Howell\" } ], \"additional\": { \"url\": \"https://ing.com\", \"text\": \"Happy Testing!\" } } JSON Path for retrieving byron.fields@ing.com is $.data[3].email [Index starts with 0] To learn more about JSONPath visit this GitHub page. Actions There are 19 built-in Actions. Please click the action-cloud below to check the details","title":"API Testing"},{"location":"api/#api-testing","text":"API Testing is one of the strong suites of the tool. It allows us to fire requests, receive responses, validate the response status, response body and response tags. It also allows us to store response tags which can be used for subsequent API calls or GUI flows. This makes API Testing and GUI Testing possible in a single flow coherently.","title":"API Testing"},{"location":"api/#how-to-create-an-api-test-case","text":"A request should contain a setEndPoint action. This action is always marked in Blue. This is where you put the endpoint to which the request is supposed to be fired. This action comes with an editor for convenience of data set up. You can have steps to add headers/authentication etc. (if required) A request should contain an HTTP Method/Verb ( Post / Put / Get / Delete / Patch ) . This action is always marked in Green. This also comes with an editor for convenience. You can have steps to validate/store response status codes , specific tags or even the entire response body. A request should contain a closeConnection action. This action is always marked in Brown. The above is an example of a postRestRequest and then assertResponseCode followed by storeJSONelementInDataSheet","title":"How to create an API Test Case?"},{"location":"api/#payload-data-parameterization","text":"Data Parameterization can be done using the built-in editor. If you mouse-hover on the Input column, corresponding to the Post / Put request steps as well as the setEndPoint step, an option to open up the Editor comes up. Inside this editor, we can paste the entire Payload and then parameterize the specific JSON/XML tags based on our needs. If we press [ctrl] + [SPACE] , the list of all available DataSheets : ColumnNames along with all user-defined variables show up. We can then select the appropriate item from where we want to parameterize. We need to press [esc] to close the editor The above image is a gif. So if its not moving, please reload the page","title":"Payload Data Parameterization"},{"location":"api/#assertstore-response-tags","text":"We can access the Response Tags using xpath for XMLs and jsonPath for JSONs. The corresponding xpath or jsonPath for the tag, should be entered in the Condition column like as shown below : Example of writing an Xpath : <root xmlns:foo=\"http://www.foo.org/\" xmlns:bar=\"http://www.bar.org\"> <actors> <actor id=\"1\">Christian Bale</actor> <actor id=\"2\">Liam Neeson</actor> <actor id=\"3\">Michael Caine</actor> </actors> </root> XPath for retrieving Liam Neeson is /root/actors/actor[2]/text() or simply //actor[2]/text() Example of writing a JSONPath : Example 1 : { \"name\":\"TestName\", \"salary\":\"12300\", \"age\":\"29\" } JSON Path for retrieving TestName is $.name Example 2 : { \"page\": 2, \"per_page\": 6, \"total\": 12, \"total_pages\": 2, \"data\": [ { \"id\": 7, \"email\": \"michael.lawson@ing.com\", \"first_name\": \"Michael\", \"last_name\": \"Lawson\" }, { \"id\": 8, \"email\": \"lindsay.ferguson@ing.com\", \"first_name\": \"Lindsay\", \"last_name\": \"Ferguson\" }, { \"id\": 9, \"email\": \"tobias.funke@ing.com\", \"first_name\": \"Tobias\", \"last_name\": \"Funke\" }, { \"id\": 10, \"email\": \"byron.fields@ing.com\", \"first_name\": \"Byron\", \"last_name\": \"Fields\" }, { \"id\": 11, \"email\": \"george.edwards@ing.com\", \"first_name\": \"George\", \"last_name\": \"Edwards\" }, { \"id\": 12, \"email\": \"rachel.howell@ing.com\", \"first_name\": \"Rachel\", \"last_name\": \"Howell\" } ], \"additional\": { \"url\": \"https://ing.com\", \"text\": \"Happy Testing!\" } } JSON Path for retrieving byron.fields@ing.com is $.data[3].email [Index starts with 0] To learn more about JSONPath visit this GitHub page.","title":"Assert/Store Response Tags"},{"location":"api/#actions","text":"There are 19 built-in Actions. Please click the action-cloud below to check the details","title":"Actions"},{"location":"azure/","text":"Azure DevOps Integration Integration with Azure DevOps involves the following points : Check-in the tests into Azure Repository . Here we need to understand which are the files that need to go into Azure Repo. Execution of tests via Azure DevOps Pipeline . Viewing of Test Results (Pass, Fail, Logs, Screenshots etc.) in Azure DevOps itself Analysis of Historical Results via Azure Analytics Feed test results automatically to Azure DevOps Test Plans [Optional] Azure DevOps Repository Simple way - Libraries pushed to Azure Repository. The .gitignore file content should be as shown below. Every other file should be pushed to the Repository. LICENSE Extensions/ GridNode/ Jenkins/ logs/ Projects/*/Results/*/ Projects/*/*/Results/*/ web/ recent.items log.txt Tools/ Advanced way - Libraries pushed to Azure Artifacts.[Recommended] The lib and the *.jar are the 2 additions in this case. These jars should be pushed to Azure Artifacts instead of Repositories. LICENSE Extensions/ GridNode/ Jenkins/ logs/ Projects/*/Results/*/ Projects/*/*/Results/*/ web/ recent.items log.txt MT_Messages/ Tools/ lib/ *.jar Steps to publish artifact from working location to Azure Artifacts: Create a zip of the lib folder. Generate a PAT from Azure DevOps Portal following this. If you already have a PAT, you can reuse it. Open cmd terminal and execute the following commands : shell SET AZDO_ARTIFACTTOOL_PAT=<Your Personal Access Token> <Your Location>\\ArtifactTool\\artifacttool.exe universal publish --service https://dev.azure.com/INGCDaaS/ --patvar AZDO_ARTIFACTTOOL_PAT --feed PXXXXX-incoming-feed-name --project IngOne --package-name lib --package-version <version> --path <Your Location>\\lib.zip Repeat the process for the ide.jar Azure DevOps Pipeline Simple way - Libraries pulled in from Azure Repository. The yaml file content should be as shown below. pool: name: 'CDaaSLinux' stages : - stage: TestExecution jobs : - job : TestExecution steps: - checkout: self fetchDepth: 1 clean: true # This is to set Java 11 - script: | echo \"##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_11_X64)\" echo \"##vso[task.setvariable variable=PATH]$(JAVA_HOME_11_X64)/bin:$(PATH)\" displayName: \"Set java version to 11\" # This is to set Permissions - task: CmdLine@2 inputs: script: 'chmod -R 755 ./' displayName: 'Set Permissions' # This is to trigger execution - task: CmdLine@2 inputs: script: './Run.command -run -project_location \"Projects/<your_project_name>\" -release \"<your_release_name>\" -testset \"<your_testset_name>\" -setEnv \"run.AzureReport=true\"' workingDirectory: '$(System.DefaultWorkingDirectory)' displayName: 'Execute Tests' # This is to publish test results - task: PublishTestResults@2 inputs: testResultsFormat: 'NUnit' testResultsFiles: 'Projects/<your_project_name>/Results/TestExecution/<your_release_name>/<your_testset_name>/Latest/azure.xml' testRunTitle: 'Test Results' Advanced way - Libraries pulled in from Azure Artifacts.[Recommended] The yaml file content should be as shown below. pool: name: 'CDaaSLinux' stages : - stage: TestExecution jobs : - job : TestExecution steps: - checkout: self fetchDepth: 1 clean: true # This is to set Java 11 - script: | echo \"##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_11_X64)\" echo \"##vso[task.setvariable variable=PATH]$(JAVA_HOME_11_X64)/bin:$(PATH)\" displayName: \"Set java version to 11\" # This is to set Permissions - task: CmdLine@2 inputs: script: 'chmod -R 755 ./' displayName: 'Set Permissions' # This is to download the ide jar from Artifacts - task: UniversalPackages@0 inputs: command: 'download' downloadDirectory: '$(System.DefaultWorkingDirectory)' feedsToUse: 'internal' vstsFeed: '<your_feed_uuid>' vstsFeedPackage: '<your_pacakage_feed_uuid>' vstsPackageVersion: '*' displayName: 'Download main jar' # This is to download the lib.zip from Artifacts - task: UniversalPackages@0 inputs: command: 'download' downloadDirectory: '$(System.DefaultWorkingDirectory)' feedsToUse: 'internal' vstsFeed: '<your_feed_uuid>' vstsFeedPackage: '<your_pacakage_feed_uuid>' vstsPackageVersion: '*' displayName: 'Download supporting libraries zip' # This is to unzip the lib.zip - task: CmdLine@2 inputs: script: 'unzip lib.zip' workingDirectory: '$(System.DefaultWorkingDirectory)' displayName: 'Unzip supporting libraries' # This is to trigger execution - task: CmdLine@2 inputs: script: './Run.command -run -project_location \"Projects/<your_project_name>\" -release \"<your_release_name>\" -testset \"<your_testset_name>\" -setEnv \"run.AzureReport=true\"' workingDirectory: '$(System.DefaultWorkingDirectory)' displayName: 'Execute Tests' # This is to publish test results - task: PublishTestResults@2 inputs: testResultsFormat: 'NUnit' testResultsFiles: 'Projects/<your_project_name>/Results/TestExecution/<your_release_name>/<your_testset_name>/Latest/azure.xml' testRunTitle: 'Test Results' Test Results To view the Test Results we need to navigate to the Tests tab of the Azure DevOps Pipeline. If we click on the Tests we will see the detailed steps of execution under Debug Window. If we have API Tests we will see the request/response payloads in the Attachment Window. If we have Browser Tests we will see the screenshots in the Attachment Window. Pipeline Analytics If we click on the Pipeline Name and navigate to the Analytics tab of the Azure DevOps Pipeline, we will see the report like this : We can use this feature to determine the health of the pipeline and analysis of historical test reports. AzureDevOps Test Plan Content Coming Soon","title":"Azure Deveops Integration"},{"location":"azure/#azure-devops-integration","text":"Integration with Azure DevOps involves the following points : Check-in the tests into Azure Repository . Here we need to understand which are the files that need to go into Azure Repo. Execution of tests via Azure DevOps Pipeline . Viewing of Test Results (Pass, Fail, Logs, Screenshots etc.) in Azure DevOps itself Analysis of Historical Results via Azure Analytics Feed test results automatically to Azure DevOps Test Plans [Optional]","title":"Azure DevOps Integration"},{"location":"azure/#azure-devops-repository","text":"","title":"Azure DevOps Repository"},{"location":"azure/#simple-way-libraries-pushed-to-azure-repository","text":"The .gitignore file content should be as shown below. Every other file should be pushed to the Repository. LICENSE Extensions/ GridNode/ Jenkins/ logs/ Projects/*/Results/*/ Projects/*/*/Results/*/ web/ recent.items log.txt Tools/","title":"Simple way - Libraries pushed to Azure Repository."},{"location":"azure/#advanced-way-libraries-pushed-to-azure-artifactsrecommended","text":"The lib and the *.jar are the 2 additions in this case. These jars should be pushed to Azure Artifacts instead of Repositories. LICENSE Extensions/ GridNode/ Jenkins/ logs/ Projects/*/Results/*/ Projects/*/*/Results/*/ web/ recent.items log.txt MT_Messages/ Tools/ lib/ *.jar Steps to publish artifact from working location to Azure Artifacts: Create a zip of the lib folder. Generate a PAT from Azure DevOps Portal following this. If you already have a PAT, you can reuse it. Open cmd terminal and execute the following commands : shell SET AZDO_ARTIFACTTOOL_PAT=<Your Personal Access Token> <Your Location>\\ArtifactTool\\artifacttool.exe universal publish --service https://dev.azure.com/INGCDaaS/ --patvar AZDO_ARTIFACTTOOL_PAT --feed PXXXXX-incoming-feed-name --project IngOne --package-name lib --package-version <version> --path <Your Location>\\lib.zip Repeat the process for the ide.jar","title":"Advanced way - Libraries pushed to Azure Artifacts.[Recommended]"},{"location":"azure/#azure-devops-pipeline","text":"","title":"Azure DevOps Pipeline"},{"location":"azure/#simple-way-libraries-pulled-in-from-azure-repository","text":"The yaml file content should be as shown below. pool: name: 'CDaaSLinux' stages : - stage: TestExecution jobs : - job : TestExecution steps: - checkout: self fetchDepth: 1 clean: true # This is to set Java 11 - script: | echo \"##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_11_X64)\" echo \"##vso[task.setvariable variable=PATH]$(JAVA_HOME_11_X64)/bin:$(PATH)\" displayName: \"Set java version to 11\" # This is to set Permissions - task: CmdLine@2 inputs: script: 'chmod -R 755 ./' displayName: 'Set Permissions' # This is to trigger execution - task: CmdLine@2 inputs: script: './Run.command -run -project_location \"Projects/<your_project_name>\" -release \"<your_release_name>\" -testset \"<your_testset_name>\" -setEnv \"run.AzureReport=true\"' workingDirectory: '$(System.DefaultWorkingDirectory)' displayName: 'Execute Tests' # This is to publish test results - task: PublishTestResults@2 inputs: testResultsFormat: 'NUnit' testResultsFiles: 'Projects/<your_project_name>/Results/TestExecution/<your_release_name>/<your_testset_name>/Latest/azure.xml' testRunTitle: 'Test Results'","title":"Simple way - Libraries pulled in from Azure Repository."},{"location":"azure/#advanced-way-libraries-pulled-in-from-azure-artifactsrecommended","text":"The yaml file content should be as shown below. pool: name: 'CDaaSLinux' stages : - stage: TestExecution jobs : - job : TestExecution steps: - checkout: self fetchDepth: 1 clean: true # This is to set Java 11 - script: | echo \"##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_11_X64)\" echo \"##vso[task.setvariable variable=PATH]$(JAVA_HOME_11_X64)/bin:$(PATH)\" displayName: \"Set java version to 11\" # This is to set Permissions - task: CmdLine@2 inputs: script: 'chmod -R 755 ./' displayName: 'Set Permissions' # This is to download the ide jar from Artifacts - task: UniversalPackages@0 inputs: command: 'download' downloadDirectory: '$(System.DefaultWorkingDirectory)' feedsToUse: 'internal' vstsFeed: '<your_feed_uuid>' vstsFeedPackage: '<your_pacakage_feed_uuid>' vstsPackageVersion: '*' displayName: 'Download main jar' # This is to download the lib.zip from Artifacts - task: UniversalPackages@0 inputs: command: 'download' downloadDirectory: '$(System.DefaultWorkingDirectory)' feedsToUse: 'internal' vstsFeed: '<your_feed_uuid>' vstsFeedPackage: '<your_pacakage_feed_uuid>' vstsPackageVersion: '*' displayName: 'Download supporting libraries zip' # This is to unzip the lib.zip - task: CmdLine@2 inputs: script: 'unzip lib.zip' workingDirectory: '$(System.DefaultWorkingDirectory)' displayName: 'Unzip supporting libraries' # This is to trigger execution - task: CmdLine@2 inputs: script: './Run.command -run -project_location \"Projects/<your_project_name>\" -release \"<your_release_name>\" -testset \"<your_testset_name>\" -setEnv \"run.AzureReport=true\"' workingDirectory: '$(System.DefaultWorkingDirectory)' displayName: 'Execute Tests' # This is to publish test results - task: PublishTestResults@2 inputs: testResultsFormat: 'NUnit' testResultsFiles: 'Projects/<your_project_name>/Results/TestExecution/<your_release_name>/<your_testset_name>/Latest/azure.xml' testRunTitle: 'Test Results'","title":"Advanced way - Libraries pulled in from Azure Artifacts.[Recommended]"},{"location":"azure/#test-results","text":"To view the Test Results we need to navigate to the Tests tab of the Azure DevOps Pipeline. If we click on the Tests we will see the detailed steps of execution under Debug Window. If we have API Tests we will see the request/response payloads in the Attachment Window. If we have Browser Tests we will see the screenshots in the Attachment Window.","title":"Test Results"},{"location":"azure/#pipeline-analytics","text":"If we click on the Pipeline Name and navigate to the Analytics tab of the Azure DevOps Pipeline, we will see the report like this : We can use this feature to determine the health of the pipeline and analysis of historical test reports.","title":"Pipeline Analytics"},{"location":"azure/#azuredevops-test-plan","text":"Content Coming Soon","title":"AzureDevOps Test Plan"},{"location":"bdd/","text":"Behavior Driven Development (BDD) Importance of BDD Way of Working BDD is an Agile software development methodology in which an application is documented and designed around the behavior a user expects to experience when interacting with it. By encouraging developers to focus only on the requested behaviors of an app or program, BDD helps to avoid bloat, excessive code, unnecessary features or lack of focus. BDD Editor The tool comes with a BDD editor that lets user to create/edit feature files. These feature files can then be imported/converted into automation test cases. The BDD editor has a provision of auto suggesting the keywords that can be used while writing feature files. Perform Ctrl+Space anywhere in the BDD editor workspace to get the list of keywords supported by the BDD editor. Create/Edit Feature Files With BDD Editor From the tool UI, navigate to Tools->BDD->Open Feature Editor and the editor opens in a new window Create a new project by clicking on New Project option, you can also open an existing project (This is a Mandatory step) Create a new story by clicking on [+] icon. A story is basically a feature for which Scenarios need to be written. After designing the features and scenarios , each story can be exported as a feature file , by clicking on up arrow Note: Projects created from BDD editor are saved as json files and internally Gherkin language is used to create feature files. It is also possible to open an existing feature file in the BDD editor using the down arrow icon and edit the same and save. Import A Feature File To Create Automation Test Case Scaffolding In order to translate the feature files into an automation scenario, follow the steps below : Navigate to Tools->BDD->Import Feature file Locate the feature file and click on OK The Features are imported as Scenarios All the Scenarios are imported as Test cases All the Steps in each scenario are imported as Reusable components All the Examples are imported into Data Sheets with the name of the test case The corresponding steps can then be automated accordingly either through Recording or otherwise Note: Any feature written in Gherkin language can be opened from the Import Feature file , even if it is not created using the BDD editor . BDD Reports via Azure DevOps In order to generate BDD Style Reporting post execution, from the Run Settings, make sure Bdd Reporting checkbox is checked. This will generate bdd-report.json file post execution and this json file can then be fed to Azure DevOps Yaml Task to generate BDD Style Reporting. For this we need to use the following Yaml commands : - task: PublishCucumberReport@1 inputs: jsonDir: '$(System.DefaultWorkingDirectory)/Projects/<Project_Name>/Results/TestExecution/<Release_Name>/<TestSet_Name>/Latest/' outputPath: '$(System.DefaultWorkingDirectory)' theme: 'bootstrap' reportSuiteAsScenarios: true name: 'ING' title: 'BDD Results' In Azure DevOps, the feature wise report can be viwed under the Cucumber Tab like the following :","title":"Behavior Driven Development"},{"location":"bdd/#behavior-driven-development-bdd","text":"","title":"Behavior Driven Development (BDD)"},{"location":"bdd/#importance-of-bdd-way-of-working","text":"BDD is an Agile software development methodology in which an application is documented and designed around the behavior a user expects to experience when interacting with it. By encouraging developers to focus only on the requested behaviors of an app or program, BDD helps to avoid bloat, excessive code, unnecessary features or lack of focus.","title":"Importance of BDD Way of Working"},{"location":"bdd/#bdd-editor","text":"The tool comes with a BDD editor that lets user to create/edit feature files. These feature files can then be imported/converted into automation test cases. The BDD editor has a provision of auto suggesting the keywords that can be used while writing feature files. Perform Ctrl+Space anywhere in the BDD editor workspace to get the list of keywords supported by the BDD editor.","title":"BDD Editor"},{"location":"bdd/#createedit-feature-files-with-bdd-editor","text":"From the tool UI, navigate to Tools->BDD->Open Feature Editor and the editor opens in a new window Create a new project by clicking on New Project option, you can also open an existing project (This is a Mandatory step) Create a new story by clicking on [+] icon. A story is basically a feature for which Scenarios need to be written. After designing the features and scenarios , each story can be exported as a feature file , by clicking on up arrow Note: Projects created from BDD editor are saved as json files and internally Gherkin language is used to create feature files. It is also possible to open an existing feature file in the BDD editor using the down arrow icon and edit the same and save.","title":"Create/Edit Feature Files With BDD Editor"},{"location":"bdd/#import-a-feature-file-to-create-automation-test-case-scaffolding","text":"In order to translate the feature files into an automation scenario, follow the steps below : Navigate to Tools->BDD->Import Feature file Locate the feature file and click on OK The Features are imported as Scenarios All the Scenarios are imported as Test cases All the Steps in each scenario are imported as Reusable components All the Examples are imported into Data Sheets with the name of the test case The corresponding steps can then be automated accordingly either through Recording or otherwise Note: Any feature written in Gherkin language can be opened from the Import Feature file , even if it is not created using the BDD editor .","title":"Import A Feature File To Create Automation Test Case Scaffolding"},{"location":"bdd/#bdd-reports-via-azure-devops","text":"In order to generate BDD Style Reporting post execution, from the Run Settings, make sure Bdd Reporting checkbox is checked. This will generate bdd-report.json file post execution and this json file can then be fed to Azure DevOps Yaml Task to generate BDD Style Reporting. For this we need to use the following Yaml commands : - task: PublishCucumberReport@1 inputs: jsonDir: '$(System.DefaultWorkingDirectory)/Projects/<Project_Name>/Results/TestExecution/<Release_Name>/<TestSet_Name>/Latest/' outputPath: '$(System.DefaultWorkingDirectory)' theme: 'bootstrap' reportSuiteAsScenarios: true name: 'ING' title: 'BDD Results' In Azure DevOps, the feature wise report can be viwed under the Cucumber Tab like the following :","title":"BDD Reports via Azure DevOps"},{"location":"browsertesting/","text":"Browser Testing The following are the built-in Actions within the tool to perform Browser Testing. At any point in time these actions can be modified or enhanced from the engine, based on the project needs. Web Elements Actions There are 24 built-in Actions. Please click the action-cloud below to check the details Dropdown Actions There are 17 built-in Actions. Please click the action-cloud below to check the details Dynamic Waits There are 17 built-in Actions. Please click the action-cloud below to check the details Frames and Browser Windows There are 12 built-in Actions. Please click the action-cloud below to check the details Browser/Driver Actions There are 12 built-in Actions. Please click the action-cloud below to check the details Javascript Actions There are 7 built-in Actions. Please click the action-cloud below to check the details Web Table Actions There are 5 built-in Actions. Please click the action-cloud below to check the details Dynamic Objects Actions There are 2 built-in Actions. Please click the action-cloud below to check the details Assertions Element Assertions There are 8 built-in Actions. Please click the action-cloud below to check the details Element Text Assertions There are 12 built-in Actions. Please click the action-cloud below to check the details Element Attribute Assertions There are 9 built-in Actions. Please click the action-cloud below to check the details Browser Title Assertions There are 9 built-in Actions. Please click the action-cloud below to check the details Scroll Assertions There are 4 built-in Actions. Please click the action-cloud below to check the details Additional Assertions There are 8 built-in Actions. Please click the action-cloud below to check the details","title":"Browser Testing"},{"location":"browsertesting/#browser-testing","text":"The following are the built-in Actions within the tool to perform Browser Testing. At any point in time these actions can be modified or enhanced from the engine, based on the project needs.","title":"Browser Testing"},{"location":"browsertesting/#web-elements-actions","text":"There are 24 built-in Actions. Please click the action-cloud below to check the details","title":"Web Elements Actions"},{"location":"browsertesting/#dropdown-actions","text":"There are 17 built-in Actions. Please click the action-cloud below to check the details","title":"Dropdown Actions"},{"location":"browsertesting/#dynamic-waits","text":"There are 17 built-in Actions. Please click the action-cloud below to check the details","title":"Dynamic Waits"},{"location":"browsertesting/#frames-and-browser-windows","text":"There are 12 built-in Actions. Please click the action-cloud below to check the details","title":"Frames and Browser Windows"},{"location":"browsertesting/#browserdriver-actions","text":"There are 12 built-in Actions. Please click the action-cloud below to check the details","title":"Browser/Driver Actions"},{"location":"browsertesting/#javascript-actions","text":"There are 7 built-in Actions. Please click the action-cloud below to check the details","title":"Javascript Actions"},{"location":"browsertesting/#web-table-actions","text":"There are 5 built-in Actions. Please click the action-cloud below to check the details","title":"Web Table Actions"},{"location":"browsertesting/#dynamic-objects-actions","text":"There are 2 built-in Actions. Please click the action-cloud below to check the details","title":"Dynamic Objects Actions"},{"location":"browsertesting/#assertions","text":"","title":"Assertions"},{"location":"browsertesting/#element-assertions","text":"There are 8 built-in Actions. Please click the action-cloud below to check the details","title":"Element Assertions"},{"location":"browsertesting/#element-text-assertions","text":"There are 12 built-in Actions. Please click the action-cloud below to check the details","title":"Element Text Assertions"},{"location":"browsertesting/#element-attribute-assertions","text":"There are 9 built-in Actions. Please click the action-cloud below to check the details","title":"Element Attribute Assertions"},{"location":"browsertesting/#browser-title-assertions","text":"There are 9 built-in Actions. Please click the action-cloud below to check the details","title":"Browser Title Assertions"},{"location":"browsertesting/#scroll-assertions","text":"There are 4 built-in Actions. Please click the action-cloud below to check the details","title":"Scroll Assertions"},{"location":"browsertesting/#additional-assertions","text":"There are 8 built-in Actions. Please click the action-cloud below to check the details","title":"Additional Assertions"},{"location":"cli/","text":"Command Line Interface The tool has a rich set of command line options for execution with parameters, retrieving execution details, setting variables, change settings etc. Options Output -v , --version Display current build details -run Run with the given details -rerun Rerun the last execution -project_location Project Location for Execution -scenario Scenario Name -testcase Testcase Name -browser Browser Name (Not applicable for Testset Execution) -release Release Name -testset Testset Name -tags Tags of Test Cases to be exceuted -bDate Display current build date -bTime Display current build time -bVersion Display current build version -dont_launch_report Disables launching summary report after execution -help Help -hi Says Hello! -t Display Current Time -latest_exe Returns the given property value for the latest execution -latest_exe_loc Returns the results folder for the latest execution -latest_exe_status Returns the status for the latest execution -latest_exe_data_loc Returns the Report data location for the latest execution -latest_exe_data_raw Returns the Report data for the latest execution -latest_exe_log_loc Returns the log file location for the latest execution -latest_exe_log_raw Returns the log file for the latest execution -latest_exe_perf_status Returns the page load performance results for latest execution -latest_exe_perf_report Returns the page load performance report for latest execution -checkPagePerf Returns the page load performance results after Run -setVar Create/Set user defined variable [-setVar \"var=value\"] -setEnv Create/Set Env settings -standalone_report Create Standalone Report instead of Relative one The examples below are shown with Run.bat , but same set of cli options are available for Run.command to be used in Linux or MAC. Single Test Case Execution Run.bat -run -project_location \"Projects\\Demo\" -scenario \"NewScenario\" -testcase \"NewTestCase\" -browser \"Chrome\" Test Set Execution Run.bat -run -project_location \"Projects\\Demo\" -release \"NewRelease\" -testset \"NewTestSet\" Test Set Execution with specific tags Run.bat -run -project_location \"Projects\\Demo\" -release \"NewRelease\" -testset \"NewTestSet\" -tags \"@Smoke\" Test Set Execution with Updated Environment Settings Run.bat -run -project_location \"Projects\\Demo\" -release \"NewRelease\" -testset \"NewTestSet\" -setEnv \"run.TestEnv=Acceptance\" In the above example, the test set will be forced to be executed on Acceptance Environment -setEnv is a very powerful command to override all the environment settings and userdefined variables. This can override the values in all of these settings : Lets look at the Run Settings for a Test Set. If we enter into the project location and navigate to the following location : Settings\\TestExecution\\ < ReleaseName > \\ < TestSetName > We will find the RunSettings.Properties and the TestMgmtSettings.Properties files. The RunSettings.Properties holds all the corresponding settings that we enter via the UI of the tool. Any of these properties can be overriden by -setEnv . For Example: -setEnv \"run.TakeFullPageScreenShot=False\" Similarly, if we go to the project location and navigate to Settings\\ directory, the userDefinedSettings.Properties holds all the corresponding data that we enter via the UI of the tool. We can use by -setEnv to override these values too. For Example: -setEnv \"user.Key1=NewValue1\" For the following settings, -setEnv can be used as follows : |Settings|option| |--------|-------| |Global settings| -setEnv \" exe .SettingName=Value\"| Run Settings | -setEnv \" run .SettingName=Value\"| User Defined Settings | -setEnv \" user .SettingName=Value\"| Driver Settings | -setEnv \" driver .SettingName=Value\"| Test Management Settings | -setEnv \" tm .SettingName=Value\"| Multiple settings can be altered via a single command as well : -setEnv \"run.var=value;exe.var=value;user.var=value\"","title":"Command Line Interface"},{"location":"cli/#command-line-interface","text":"The tool has a rich set of command line options for execution with parameters, retrieving execution details, setting variables, change settings etc. Options Output -v , --version Display current build details -run Run with the given details -rerun Rerun the last execution -project_location Project Location for Execution -scenario Scenario Name -testcase Testcase Name -browser Browser Name (Not applicable for Testset Execution) -release Release Name -testset Testset Name -tags Tags of Test Cases to be exceuted -bDate Display current build date -bTime Display current build time -bVersion Display current build version -dont_launch_report Disables launching summary report after execution -help Help -hi Says Hello! -t Display Current Time -latest_exe Returns the given property value for the latest execution -latest_exe_loc Returns the results folder for the latest execution -latest_exe_status Returns the status for the latest execution -latest_exe_data_loc Returns the Report data location for the latest execution -latest_exe_data_raw Returns the Report data for the latest execution -latest_exe_log_loc Returns the log file location for the latest execution -latest_exe_log_raw Returns the log file for the latest execution -latest_exe_perf_status Returns the page load performance results for latest execution -latest_exe_perf_report Returns the page load performance report for latest execution -checkPagePerf Returns the page load performance results after Run -setVar Create/Set user defined variable [-setVar \"var=value\"] -setEnv Create/Set Env settings -standalone_report Create Standalone Report instead of Relative one The examples below are shown with Run.bat , but same set of cli options are available for Run.command to be used in Linux or MAC. Single Test Case Execution Run.bat -run -project_location \"Projects\\Demo\" -scenario \"NewScenario\" -testcase \"NewTestCase\" -browser \"Chrome\" Test Set Execution Run.bat -run -project_location \"Projects\\Demo\" -release \"NewRelease\" -testset \"NewTestSet\" Test Set Execution with specific tags Run.bat -run -project_location \"Projects\\Demo\" -release \"NewRelease\" -testset \"NewTestSet\" -tags \"@Smoke\" Test Set Execution with Updated Environment Settings Run.bat -run -project_location \"Projects\\Demo\" -release \"NewRelease\" -testset \"NewTestSet\" -setEnv \"run.TestEnv=Acceptance\" In the above example, the test set will be forced to be executed on Acceptance Environment -setEnv is a very powerful command to override all the environment settings and userdefined variables. This can override the values in all of these settings : Lets look at the Run Settings for a Test Set. If we enter into the project location and navigate to the following location : Settings\\TestExecution\\ < ReleaseName > \\ < TestSetName > We will find the RunSettings.Properties and the TestMgmtSettings.Properties files. The RunSettings.Properties holds all the corresponding settings that we enter via the UI of the tool. Any of these properties can be overriden by -setEnv . For Example: -setEnv \"run.TakeFullPageScreenShot=False\" Similarly, if we go to the project location and navigate to Settings\\ directory, the userDefinedSettings.Properties holds all the corresponding data that we enter via the UI of the tool. We can use by -setEnv to override these values too. For Example: -setEnv \"user.Key1=NewValue1\" For the following settings, -setEnv can be used as follows : |Settings|option| |--------|-------| |Global settings| -setEnv \" exe .SettingName=Value\"| Run Settings | -setEnv \" run .SettingName=Value\"| User Defined Settings | -setEnv \" user .SettingName=Value\"| Driver Settings | -setEnv \" driver .SettingName=Value\"| Test Management Settings | -setEnv \" tm .SettingName=Value\"| Multiple settings can be altered via a single command as well : -setEnv \"run.var=value;exe.var=value;user.var=value\"","title":"Command Line Interface"},{"location":"comparison/","text":"Comparisons with industry standard frameworks and Limitations Learning Curve Benefit of using this tool is that learning curve is very small and doesn\u2019t require any programming skills to start. This immediately helps in including in the testing process, the CJEs, Business users, Platform and other DevOps Engineers who do not have programming or test automation background. Readymade Framework Selenium , Appium , HttpURLConnection , WinAppDriver are just libraries, not testing tools . A framework needs to be created from scratch or reused from open source market, to use these libraries. This tool does all heavy lifting with readily available framework developed on top of \"Selenium\", \"Appium\", \"HttpURLConnection\", \"WinAppDriver\" Comparitive Analysis It is important to note that in the comparison below, we will only include popular java or python frameworks and not libraries like Selenium , Playwright etc. Comparing frameworks with libraries is like comparing apples and oranges! The reason to choose java / python and not javascript is that, in Wholesale Banking, most applications are Packages and Commercial off-the-shelf (COTS) and monoliths. These applications do not have modern Web UI and are heavily focussed on the Business Processing side of things. Javascript based tools and frameworks are primarily aimed to test Modern Web UI . With Java we have a greater edge to test the processes like, Java Messaging Queue , Kafka Streams , Reports (xlsx, pdf) , DataBase etc. in addition to Web and API . Features CITS Cucumber Serenity Robot Framework Karate Katalon Test Complete Open Source \u2713 \u2713 \u2713 \u2713 \u2713 Freemium \u2717 Integrated IDE with data sheets and property files \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2713 OS Independent \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2717 Shallow Learning Curve \u2713 \u2717 \u2717 \u2713 \u2713 \u2713 \u2713 Community Support \u2717 (Community is growing but still small) \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 High Ease of test case creation \u2713 \u2717 \u2717 \u2713 \u2713 \u2713 \u2713 Business User Friendly \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2713 Built-in Record and Spy for quick start \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2713 Cross Browser Testing \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Multiple Object Properties in Object Repository \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2713 Distributed Execution \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Integration with Selenium Grid \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Built-in support for BDD approach \u2713 \u2713 \u2713 \u2717 \u2717 (Not to confuse with Karate BDD like DSL) \u2713 (Plugins needed) \u2713 (Plugins needed) Built-in support for Data-driven approach \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2713 Built-in support for Keyword-driven approach \u2713 \u2717 \u2717 \u2713 \u2717 \u2713 \u2713 Customizations and enhancements \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Built-in Native Azure DevOps reports with logs and screenshots \u2713 \u2717 (Junit doesn't support screenshots) \u2717 (Junit doesn't support screenshots) \u2717 (Plugins not supported in ING) \u2717 (Junit doesn't support screenshots) \u2717 (Junit doesn't support screenshots) \u2717 (Plugins not supported in ING) Built-in Azure DevOps Test Plan Integration \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 (Plugins not supported in ING) \u2717 (Plugins not supported in ING) Built-in API Testing \u2713 \u2713 (additional libraries needed) \u2713 (additional libraries needed) \u2713 (additional libraries needed) \u2713 \u2713 \u2717 Built-in Web Page Performance Testing \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 Built-in Accessibility Testing \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 Built-in Database Testing \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 Built-in Image Based Testing \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2713 Docker Support \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Limitations of the tool CITS is a tester-friendly tool. Developers, who are accustomed to only coding and writing scripts in an IDE like IntelliJ or Eclipse might find the UI of the tool, limiting. Even though the tool has an exhaustive Java project in the backend which can be customized, enhanced and even tailored for project specific purposes, it is not the first thing that a developer sees, thereby creating a feeling of lack of coding liberty. While CITS is designed to be user-friendly, there is still a learning curve involved in using the tool effectively. One may need to invest time in learning how to use the tool's features and scripting capabilities to create effective tests. The tool's community is quite small. Even though it is growing and efforts are being put in to create exhaustive documentation and videos, it will take some time for it to become popular.","title":"Comparisons with industry standard frameworks and Limitations"},{"location":"comparison/#comparisons-with-industry-standard-frameworks-and-limitations","text":"","title":"Comparisons with industry standard frameworks and Limitations"},{"location":"comparison/#learning-curve","text":"Benefit of using this tool is that learning curve is very small and doesn\u2019t require any programming skills to start. This immediately helps in including in the testing process, the CJEs, Business users, Platform and other DevOps Engineers who do not have programming or test automation background.","title":"Learning Curve"},{"location":"comparison/#readymade-framework","text":"Selenium , Appium , HttpURLConnection , WinAppDriver are just libraries, not testing tools . A framework needs to be created from scratch or reused from open source market, to use these libraries. This tool does all heavy lifting with readily available framework developed on top of \"Selenium\", \"Appium\", \"HttpURLConnection\", \"WinAppDriver\"","title":"Readymade Framework"},{"location":"comparison/#comparitive-analysis","text":"It is important to note that in the comparison below, we will only include popular java or python frameworks and not libraries like Selenium , Playwright etc. Comparing frameworks with libraries is like comparing apples and oranges! The reason to choose java / python and not javascript is that, in Wholesale Banking, most applications are Packages and Commercial off-the-shelf (COTS) and monoliths. These applications do not have modern Web UI and are heavily focussed on the Business Processing side of things. Javascript based tools and frameworks are primarily aimed to test Modern Web UI . With Java we have a greater edge to test the processes like, Java Messaging Queue , Kafka Streams , Reports (xlsx, pdf) , DataBase etc. in addition to Web and API . Features CITS Cucumber Serenity Robot Framework Karate Katalon Test Complete Open Source \u2713 \u2713 \u2713 \u2713 \u2713 Freemium \u2717 Integrated IDE with data sheets and property files \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2713 OS Independent \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2717 Shallow Learning Curve \u2713 \u2717 \u2717 \u2713 \u2713 \u2713 \u2713 Community Support \u2717 (Community is growing but still small) \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 High Ease of test case creation \u2713 \u2717 \u2717 \u2713 \u2713 \u2713 \u2713 Business User Friendly \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2713 Built-in Record and Spy for quick start \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2713 Cross Browser Testing \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Multiple Object Properties in Object Repository \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2713 Distributed Execution \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Integration with Selenium Grid \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Built-in support for BDD approach \u2713 \u2713 \u2713 \u2717 \u2717 (Not to confuse with Karate BDD like DSL) \u2713 (Plugins needed) \u2713 (Plugins needed) Built-in support for Data-driven approach \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2713 Built-in support for Keyword-driven approach \u2713 \u2717 \u2717 \u2713 \u2717 \u2713 \u2713 Customizations and enhancements \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Built-in Native Azure DevOps reports with logs and screenshots \u2713 \u2717 (Junit doesn't support screenshots) \u2717 (Junit doesn't support screenshots) \u2717 (Plugins not supported in ING) \u2717 (Junit doesn't support screenshots) \u2717 (Junit doesn't support screenshots) \u2717 (Plugins not supported in ING) Built-in Azure DevOps Test Plan Integration \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 (Plugins not supported in ING) \u2717 (Plugins not supported in ING) Built-in API Testing \u2713 \u2713 (additional libraries needed) \u2713 (additional libraries needed) \u2713 (additional libraries needed) \u2713 \u2713 \u2717 Built-in Web Page Performance Testing \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 Built-in Accessibility Testing \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 Built-in Database Testing \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 Built-in Image Based Testing \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2713 Docker Support \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713","title":"Comparitive Analysis"},{"location":"comparison/#limitations-of-the-tool","text":"CITS is a tester-friendly tool. Developers, who are accustomed to only coding and writing scripts in an IDE like IntelliJ or Eclipse might find the UI of the tool, limiting. Even though the tool has an exhaustive Java project in the backend which can be customized, enhanced and even tailored for project specific purposes, it is not the first thing that a developer sees, thereby creating a feeling of lack of coding liberty. While CITS is designed to be user-friendly, there is still a learning curve involved in using the tool effectively. One may need to invest time in learning how to use the tool's features and scripting capabilities to create effective tests. The tool's community is quite small. Even though it is growing and efforts are being put in to create exhaustive documentation and videos, it will take some time for it to become popular.","title":"Limitations of the tool"},{"location":"customfunction/","text":"Customization & Source Code Maintenance The tool mostly covers all the functions under the predefined list of available actions. But some times your scenario might demand a new action or utility to be implemented, for example performing PDF or Excel validation. This can be done by creating your own custom method. Requirements For Custom Methods which will appear in the UI of the tool Custom Methods should be public . The return type of Custom Methods should be void . Custom Methods should not contain parameters (use Data or Input or Condition variable for fetching data from the test case). Custom Method should contain the @Action annotation in order for it to get auto-suggested in the UI of the tool. Ensure that you import all the jars mentioned below, in your java file containing the Custom Method. import com.cognizant.cognizantits.engine.commands.General; import com.cognizant.cognizantits.engine.core.CommandControl; import com.cognizant.cognizantits.engine.support.Status; import com.cognizant.cognizantits.engine.support.methodInf.Action; import com.cognizant.cognizantits.engine.support.methodInf.ObjectType; import com.cognizant.cognizantits.engine.support.methodInf.InputType; The java class file containing the Custom Method should always have a constructor as shown below, since it must extend the General class. public class SampleScript extends General { public SampleScript(CommandControl cc) { super(cc); } @Action(object = ObjectType.BROWSER, desc = \"<Description of the Method>\", input = InputType.YES) public void customfunction() { try { // Here in goes the logic of the method } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); } } } Reporting To display the status of the custom action in the report, you can use the function Report.updateTestLog as described below. Report.updateTestLog(\"Userdefined Action\", \"Operation Done successfully\", Status.PASS); // Possible Statuses are Status.PASS, Status.PASSNS, Status.FAIL, Status.FAILNS, Status.DONE, Status.DEBUG, Status.WARNING,Status.SCREENSHOT //NS = No Screenshot To display with custom html tags in the report, use the following, Report.updateTestLog(\"Userdefined Action\", \"#CTAG &lt;b&gt; Operation Done successfully&lt;b&gt;;\", Status.PASS); Adding External Libraries Create your custom method that uses external jar(s) apart from the existing set of libraries under the lib folder. Always ensure that your custom method is working fine from your source code before introducing it in to the tool Place the jar files of your external libraries in the ./lib/clib folder Export your custom method as a jar file as explained in the Engine Section. Globally Exposed Variables You Can Use In Your Custom Method Following variables are defined internally and can be used in your custom method for deriving various kinds of information like the action in execution or the value stored under the Input column and etc. Given below is the description about each of the variable or keyword on the basis of it's functionality and usage. #### Driver - Type : WebDriver - Description : This variable will store the instance of the Webdriver class for the current browser in execution. Hence you can perform all the Driver related functions using this. - Usage : Driver.findElement(By.className(className)); WebElement element = Driver.findElement(By.id(Data)); #### Element - Type : WebElement - Description : This variable corresponds to the Object used under the ObjectName column of your currently executing test step. If there is no Object used in the ObjectName column of your Test step, then this variable will be Null . You can perform all WebElement related functions using this variable like for instance. - Usage : Element.click();//This will click on the respective Object which is used in the current test step. Data Type : String Description : This variable stores the resolved data from the Input Column of the current test step in execution. That means if the step is being fed a data from the datasheet like SheetName:ColumnName or variable like %var% or hardcoded as @data , the Data variable will hold the actual value inside. Usage : System.out.println(Data + \"Resolved Input used in InputColumn in the currentTestStep\"); Input Type : String Description : This variable stores the visible text/string in the Input Column of the current test step in execution. That means if the step is being fed a data from the datasheet like SheetName:ColumnName or variable like %var% or hardcoded as @data , the Input variable will hold the values as SheetName:ColumnName , %var% and @data respectivey Usage : System.out.println(Input + \"Input used in InputColumn in the currentTestStep\"); ObjectName Type : String Description : This variable stores the name of the object given under the ObjectName column of the current test step in execution. Usage : System.out.println(ObjectName + \"ObjectName used in ObjectColumn in the currentTestStep\"); Description Type : String Description : This variable stores the description present in the description column of the current test step. Usage : System.out.println(Description + \"Description used in DescriptionColumn in the currentTestStep\"); Action Type : String Description : This variable stores the name of the action used in the Action column of the current test step. Usage : System.out.println(Action + \"Action/Command used in ActionColumn in the currentTestStep\"); Reference Type : String Description : TThis variable stores the Name of the Page given under the Reference column of the current test step in execution. This Name of the Page is actually defined in the Object Repository. Usage : System.out.println(Reference + \"Reference/PageName used in ReferenceColumn in the currentTestStep\"); Execute A Specific Test Case From Custom Method There is an inbuilt method available called executeTestCase , which can be used to execute a particular test case under a particular scenario. public void executeTestCase(String scenarioName, String testCaseName); public void executeTestCase(String scenarioName, String testCaseName, int subIteration); The above method will execute the test case under the particular scenario and for that particular subiteration . Execute An Action From A Custom Method A method called executeMethod is available with the Engine and is overloaded in 4 different ways as follows. The name of the Action to be executed, should be passed as an argument and must be same as the action in the Engine. Type 1 public void executeMethod(WebElement element, String Action); Using this function you can provide the element and the action name, in the argument list, to execute the action on the element passed. For example, executeMethod(element, \"Click\"); Type 2 public void executeMethod(String Action, String Input); Using this function you can execute the action on the current element which also requires the information under the Input column or some String information that can be given directly.For example, executeMethod(\"Open\", \"@http://something\"); executeMethod(\"Open\", input); Type 3 public void executeMethod(WebElement element, String Action, String Input); Using this function you can execute the action on the supplied element which requires the information under the Input column or some String information that can be given directly.For example, executeMethod(element, \"Set\", input); Type 4 public void executeMethod(String Action); This will just call the method of the action that was instructed. Any of these overloaded methods can be used that suits your requirements best. Another method to call an action without using the executeMethod function is to go with the code described below, Here, we have to set the Data variable for the current step and call the Set action for execution. getCommander().Data = \"guest\";//This line will assign a value to the Data variable used in the current test step. new Basic(getCommander()).Set();//This line will call the Set action under the Basic java class file. Another example of using the getCommander() function to call an action is as follows.Here the method containing the definition for the action assertElementNotDisplayed is available under the AssertElement java class file. new AssertElement(getCommander()).assertElementNotDisplayed();//This line will just make a call to the action \"assertlementNotDisplayed\" Access An Object From The Object Repository It is possible to access a specific object from the object repository using the function AObject.findElement as shown below. WebElement element=AObject.findElement(ObjectName, Reference); Now all element related functions can be used for this element variable like; element.sendKeys(Data); It is also possible to use conditioned find method.Suppose you want to find an object on a web page using a particular property,obtained from the stored set of object properties in the Object Repository (OR) , then you can use the following function. WebElement element = AObject.findElement(\"p\", \"Yahoo\", ObjectProperty.Id); In the example below, a list of objects so obtained can be accessed by storing them in an ArrayList . List <WebElement> elementList= AObject.findElements(\"p\", \"Yahoo\", ObjectProperty.ClassName); In the above example object p under the page with name Yahoo (from the object repository) is found on the web page by using the Id property. If-Else or other Conditions Inside A Custom Method It is possible to write a custom function, that checks for a condition and if the condition passes it will execute a set of code and if it fails then it will execute a different set of code.The custom method example handleCondition defined below, will check if the element is displayed and if so, it will execute the test case cancelTicket but if it is not displayed then it will just update the report with a DONE status. public void handleCondition() throws FrameworkException { // No argument should be given here. Only then will this function be executed //Step 1: Getting object from the object repository WebElement element = AObject.findElement(\"ObjectName\", \"PageName\"); //Step 2: Base the condition on object being displayed or not if (element.isDisplayed()) { //Calling another test case if the condition is matched //Pass the Scenario name,Test case name and sub-iteration index executeTestCase(\"testscenario1\", \"cancelTicket\", 1); Report.updateTestLog(\"Userdefined Action \", \"inside reusable\", Status.PASS); //If needed you can break the test case also by calling existing functions executeMethod(\"StopBrowser\"); } else { Report.updateTestLog(\"Userdefined Action \", \"switch to origional\", Status.DONE); } } Access Test Data Sheet In Custom Method Local Data sheet getData There are functions to access the data from the datasheet. The getData function is overloaded in the following ways and can be used accordingly in your custom method. Type 1 public String getData(String DataSheetName, String ColumnName); Provide the name of the data sheet ( Sample ) and column ( Data1 ) that contains the data and this function will return a string which is the value of the required data.For instance, String input = userData.getData(\"Sample\", \"Data1\"); Type 2 public String getData(String DataSheetName, String ColumnName, String Iteration, String SubIteration); Provide the name of the sheet,column,iteration and subiteration values if you want to be specific, as shown in the example below; String input = userData.getData(\"Sample\", \"Data1\", \"1\", \"1\"); Here the data stored in the sheet Sample ,under the column Data1 having the subiteration and iteration value as 1 is stored in the input string variable. Another way is to provide all the information as given above in the argument list and also include the scenario and test case name. Type 3 public String getData(String DataSheetName, String ColumnName, String ScenarioName,String TestCase, String Iteration, String SubIteration); Example : String input = userData.getData(\"Sample\", \"Data1\", \"scenario\",\"testcase\", \"1\", \"1\"); In the example above the data stored in the sheet Sample under the column Data1 and belonging to the testcase named testcase and scenario named scenario having the iteration and subiteration value as 1 is stored in input string. putData It is also possible to write in to the data sheet using the \"putData\" function: The putData() function is overloaded in the following ways, Type 1 userData.putData(\"DatasheetName\", \"ColumnName\", \"value to be written\"); Example: userData.putData(\"Sample\", \"Data1\", \"kk\"); where Sample is the datasheet name , Data1 is the column name and kk is the value to be written under the respective column. Type 2 You can also provide the iteration and subiteration values in the argument list. userData.putData(\"DatasheetName\", \"ColumnName\", \"value to be written\", \"Iterationvalue\", \"SubIteration value\"); An example for this is, userData.putData(\"Sample\", \"Data1\", \"kk\", \"1\", \"1\"); where Sample is the datasheet name , Data1 is the column name and kk is the value to be written under the respective column for the iteration value of 1 and subiteration value of 1 . Type 3 Apart from the information above you can also include the test case and scenario name as shown below, userData.putData(\"DatasheetName\",\"columnName\",\"value to be written\",\"scenario name\",\"test case name\",\"Iteration value\",\"SubIteration value\"); An example for the above scenario is shown below, userData.putData(\"Sample\", \"Data1\", \"kk\", \"scenario\", \"testcase\", \"1\", \"1\"); where Sample is the datasheet name , Data1 is the column name, testcase is the testcase name, scenario is the scenario name and kk is the value to be written under the respective column for the iteration and subiteration value of 1 . Global Data Sheet To access a global data sheet from the custom method to read a global data value, use the method below : userData.getGlobalData(globalDataID, columnName); Example: String datavalue = userData.getGlobalData(\"Glob1\", \"username\"); To write or update a global data sheet, call the method below in your custom method, userData.putGlobalData(globalDataID, columnName, value); Example: userData.putGlobalData(\"Glob1\", \"username\", \"LukeSkywalker\"); TestDataModel As an alternative, you can use the following code to access the data sheet by its name and update the same, traversing through every record in the test data sheet. TestDataModel tdModel = Control.getCurrentProject().getTestData().getTestDataByName(\"TestDataSheetName\"); tdModel.loadTableModel(); int rowsCount = tdModel.getRowCount(); for (int row = 0; row < tdModel.getRowCount(); row++) { // Where orderId is a column in my data sheet int colIndex = tdModel.getColumnIndex(\"orderId\"); //To get value String orderId = (String) tdModel.getValueAt(row, colIndex); // To put values in to the sheet tdModel.setValueAt(\"New Value\", row, colIndex); } Stop Current Execution/Iteration Based On A Condition The following code can be used to stop the current iteration based on a condition. Boolean something = false; if (something) { SystemDefaults.stopCurrentIteration.set(true);//Stop the iteration } The following code can be used to stop the current execution based on a condition. Boolean something = false; if (something) { SystemDefaults.stopExecution.set(true);//Stop the execution } Get Iteration/Subiteration Value Of The Current TestStep It is possible to get the value of current iteration using the function \"getIteration\" String iterationValue=userData.getIteration(); This function returns a string value containing the Iteration number of the current iteration. It is also possible to get the value of current subiteration using the function getSubIteration String subiterationValue=userData.getSubIteration(); This function returns a string value containing the Subiteration number of the current sub iteration that is in execution. Get Current Scenario/TestCase Name The getScenario function returns a string value containing the name of the current scenario that is in execution. String scenarioName=userData.getScenario(); The getCurrentScenario function returns a string value containing the name of the current Reusable scenario that is in execution. String reusableScenarioName=userData.getCurrentScenario(); The getTestCase function returns a string value containing the name of the current test case in execution. String testcaseName= userData.getTestCase(); The getCurrentTestCase function returns a string value containing the name of the current Reusable test case in execution. String testcaseName= userData.getCurrentTestCase(); Get ObjectRepository Properties Of WebElement It is possible to access the specific property of an element stored in the Object Repository using the function AObject.getObjectProperty described below. String prop = AObject.getObjectProperty(\"pageName\", \"objectName\", ObjectProperty.Id); In the above scenario, pass the name of the page (under which the object is present in the Object Repository), objectName and object property that you want to access. You can also use the following method to get the particular property of the object from the OR. String prop = AObject.getWebObject(\"pageName\", \"objectName\").getId(); prop = AObject.getWebObject(Reference, ObjectName).getAttributeByName(ObjectProperty.Id); //to get current step object's Id property Add Value To A Variable Suppose you want to create a variable and define a value to it, you can go for addVar(arg1,arg2) function or addGlobalVar(arg1,arg2) methods. The addVar(arg1,arg2) function takes the variable name and it's value as parameters and is defined under the com.cognizant.cognizantits.engine.commands.Command java file as shown below, public void addVar(String key, String val) { Commander.addVar(key, val); } This method can be used as shown below: addVar(\"%nameVar%\", \"LukeSkywalker\"); The scope of this variable is only till the end of the execution of the test case in which it is defined. The addGlobalVar(arg1,arg2) function is used to add a value to a variable whose scope is till the end of the execution of the testset ie. till the end of execution of the last test case under the test set. This function can be used in your custom code as shown below: addGlobalVar(\"%nameVar%\", \"LukeSkywalker\"); This function is defined as shown below under the com.cognizant.cognizantits.engine.commands.Command java file. public void addGlobalVar(String key, String val) { if (key.matches(\"%.*%\")) { key = key.substring(1, key.length() - 1); } Commander.putUserDefinedData(key, val); } Access A Variable's Value In Custom Method The value of a variable created in your test case can be accessed using the function getVar which is defined, as shown below, under the com.cognizant.cognizantits.engine.commands.Command java file. public String getVar(String key) { return Commander.getVar(key); } This function can be used,as shown below, in your custom method. Provide the variable name between two percentage symbols (%%) String value = getVar(\"%newVar%\"); System.out.println(value); Suppose you have defined some variables in the userdefined tab of the Settings window, which can be opened by navigating through Run Settings icon >> UserDefined Tab , then you can access them in your custom method in two ways: Option 1: Use the getVar function as shown below. String value; value = getVar(\"%userdefinedVar%\"); value = getVar(\"userdefinedVar\");//This also will work The other way is to use the getUserDefinedData method,which is similar to the getVar ,but can only be used for accessing the user defined data. String value = getUserDefinedData(\"userdefinedVar\"); System.out.println(value); Sample Custom Method For creating any Custom Method, a java class is required. The following sample code can be used for understanding the usage of various variables and functions that you can access in your custom method. package com.cognizant.cognizantits.engine.commands; import com.cognizant.cognizantits.engine.commands.General; import com.cognizant.cognizantits.engine.core.CommandControl; import com.cognizant.cognizantits.engine.support.Status; import com.cognizant.cognizantits.engine.support.methodInf.Action; import com.cognizant.cognizantits.engine.support.methodInf.ObjectType; import com.cognizant.cognizantits.engine.support.methodInf.InputType; //extend Command to access elements public class SampleScript extends General { public SampleScript(CommandControl cc) { super(cc); } public void textExe() { Report.updateTestLog(Action, \"textExe\", Status.DONE); executeTestCase(\"testWeb\", \"search\"); } @Action(object = ObjectType.BROWSER, desc = \"open given url\", input = InputType.YES) public void prinThis(){ /** * No argument should be specifed. Only then will your custom method be executed. */ //To do any operations before and/or after execution of eachStep add your code to //functions beforeStepExecution / afterStepExecution in //Annotation.java inside com.cognizant.cognizantits.engine.core package //To do any operation after execution [execution is finished] add your code to //afterReportComplete function in //SummaryReport.java inside com.cognizant.cognizantits.engine.reporting package // do ur action try { /**********************************/ Element.click(); //Object in ObjectName is resolved as WebElement and assigned to this variable[Element] System.out.println(ObjectName + \"ObjectName used in ObjectColumn in the currentTestStep\"); System.out.println(Description + \"Description used in DescriptionColumn in the currentTestStep\"); System.out.println(Action + \"Action/Command used in ActionColumn in the currentTestStep\"); System.out.println(Input + \"Input used in InputColumn in the currentTestStep\"); System.out.println(Data + \"Resolved Input used in InputColumn in the currentTestStep\"); System.out.println(Reference + \"Reference/PageName used in ReferenceColumn in the currentTestStep\"); /**********************************/ System.out.println(getCurrentBrowserName() + \"To get the current browserName\"); /**********************************/ //If you stored some dynamic value in a variable[%newVar%] you can get the value from the variable using String value = getVar(\"%newVar%\"); System.out.println(value); //If you want to access the userdefined data created from UserDefined Settings pane you can use it in two ways //1st option value = getVar(\"%userdefinedVar%\"); value = getVar(\"userdefinedVar\"); //This also will work //2nd option value = getUserDefinedData(\"userdefinedVar\"); System.out.println(value); //If you want to store some value in a variable[%dyanmicVar%] you can store the value into a variable using //Scope is for Current Testcase addVar(\"%dyanmicVar%\", \"Value to be Stored\"); //Scope is for All addGlobalVar(\"%dyanmicVar%\", \"Value to be Stored\"); /**********************************/ // Using Inbuilt findMethod AObject.findElement(ObjectName, Reference); //To find thecurrent step's object AObject.findElements(ObjectName, Reference); //To find the current step's object // to access the object value pass ObjectName and PageName as inputs // ObjectName=p // PageName=Yahoo WebElement element = AObject.findElement(\"p\", \"Yahoo\"); List<WebElement>elementList = AObject.findElements(\"p\", \"Yahoo\"); // Using Conditioned FindMethod element = AObject.findElement(\"p\", \"Yahoo\", ObjectProperty.Id); elementList = AObject.findElements(\"p\", \"Yahoo\", ObjectProperty.ClassName); System.out.println(\"No of elements\" + elementList.size()); //Using Own findMethod element = Driver.findElement(By.id(Data)); /**********************************/ // using this element you can perform selenium operations element.sendKeys(\"Normal\"); element.sendKeys(Data); /**********************************/ //To get a property of an object from ObjectRepository String prop = AObject.getWebObject(\"pageName\",\"objectName\").getId(); prop = AObject.getWebObject(Reference,ObjectName).getAttributeByName(ObjectProperty.Id); //to get current step object's id property System.out.println(prop); /**********************************/ // to access the data from DataSheets pass DataSheetName and ColumnName as inputs // Don't pass GlobalData as inputsheet // SheetName,Columnname String input = userData.getData(\"Sample\", \"Data1\"); //To get values from specified Iteration and subiteration input = userData.getData(\"Sample\", \"Data1\", \"1\", \"1\"); //To get values from specified Scenario, Testcase, Iteration and subiteration input = userData.getData(\"Sample\", \"Data1\", \"scenario\",\"testcase\", \"1\", \"1\"); element.sendKeys(input); /**********************************/ //To write values into DataSheet //Don't pass GlobalData as inputsheet // SheetName,Columnname,value userData.putData(\"Sample\", \"Data1\", \"kk\"); //to write values for specified Iteration and subiteration userData.putData(\"Sample\", \"Data1\", \"kk\", \"1\", \"1\"); //to write values for specified Scenario, Testcase, Iteration and subiteration userData.putData(\"Sample\", \"Data1\", \"kk\", \"scenario\", \"testcase\", \"1\", \"1\"); /**********************************/ TestDataModel tdModel = Control.getCurrentProject().getTestData().getTestDataByName(\" TestDatasheetName\"); int rowsCount = tdModel.getRowCount(); for (int row = 0; row < tdModel.getRowCount(); row++) { // Where orderId is a column in my data sheet int colIndex = tdModel.getColumnIndex(\"orderId\"); //To get value String orderId = (String) tdModel.getValueAt(row, colIndex); // To put values in to the sheet tdModel.setValueAt(\"New Value\", row, colIndex); } /**********************************/ //To display in Report Report.updateTestLog(\"Userdefined Action \", \"Operation Done successfully\", Status.PASS); //To display in Report with custom html tags Report.updateTestLog(\"Userdefined Action \", \"#CTAG<b>Operation Done successfully<b>\", Status.PASS); /**********************************/ //To get the current Iteration userData.getIteration(); //To get the current SubIteration userData.getSubIteration(); //To get the current Scenario userData.getScenario(); //To get the current Testcase userData.getTestCase(); //To get the current BrowserName System.out.println(getCurrentBrowserName()); /**********************************/ // to stop the current iteration if u want to... based on condition Boolean something = false; if (something) { SystemDefaults.stopCurrentIteration.set(true); SystemDefaults.stopExecution.set(true); //Stop the execution } /**********************************/ // To use inbuilt functions //simple way //make sure you set the Data,Element and other variables new Basic(getCommander()).Click(); //Old school executeMethod(element, \"Click\"); executeMethod(\"open\", \"@http://something\"); executeMethod(\"open\", input); executeMethod(element, \"Set\", input); /**********************************/ //To execute Other Testcases // scenarioname,testcasename,subiteration executeTestCase(\"OnlineShopping\", \"BuyProduct\", 2); // scenarioname,testcasename executeTestCase(\"OnlineShopping\", \"BuyProduct\"); } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); } } /**********************************/ public void handleCondition() throws UnCaughtException { //Getting object from the object repository WebElement element = AObject.findElement(\"ObjectName\", \"PageName\"); //Basing the condition on a web element being displayed if (element.isDisplayed()) { //Calling another test case if the condition is matched //Pass the Scenario name,Test case name and sub-iteration index executeTestCase(\"testscenario1\", \"cancelTicket\", 1); Report.updateTestLog(\"Userdefined Action \", \"inside reusable\", Status.PASS); //If needed you can break the test case also by calling existing functions executeMethod(\"StopBrowser\"); // } else { Report.updateTestLog(\"Userdefined Action \", \"switch to origional\", Status.DONE); } } }","title":"Customization & Source Code Maintenance"},{"location":"customfunction/#customization-source-code-maintenance","text":"The tool mostly covers all the functions under the predefined list of available actions. But some times your scenario might demand a new action or utility to be implemented, for example performing PDF or Excel validation. This can be done by creating your own custom method.","title":"Customization &amp; Source Code Maintenance"},{"location":"customfunction/#requirements-for-custom-methods-which-will-appear-in-the-ui-of-the-tool","text":"Custom Methods should be public . The return type of Custom Methods should be void . Custom Methods should not contain parameters (use Data or Input or Condition variable for fetching data from the test case). Custom Method should contain the @Action annotation in order for it to get auto-suggested in the UI of the tool. Ensure that you import all the jars mentioned below, in your java file containing the Custom Method. import com.cognizant.cognizantits.engine.commands.General; import com.cognizant.cognizantits.engine.core.CommandControl; import com.cognizant.cognizantits.engine.support.Status; import com.cognizant.cognizantits.engine.support.methodInf.Action; import com.cognizant.cognizantits.engine.support.methodInf.ObjectType; import com.cognizant.cognizantits.engine.support.methodInf.InputType; The java class file containing the Custom Method should always have a constructor as shown below, since it must extend the General class. public class SampleScript extends General { public SampleScript(CommandControl cc) { super(cc); } @Action(object = ObjectType.BROWSER, desc = \"<Description of the Method>\", input = InputType.YES) public void customfunction() { try { // Here in goes the logic of the method } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); } } }","title":"Requirements For Custom Methods which will appear in the UI of the tool"},{"location":"customfunction/#reporting","text":"To display the status of the custom action in the report, you can use the function Report.updateTestLog as described below. Report.updateTestLog(\"Userdefined Action\", \"Operation Done successfully\", Status.PASS); // Possible Statuses are Status.PASS, Status.PASSNS, Status.FAIL, Status.FAILNS, Status.DONE, Status.DEBUG, Status.WARNING,Status.SCREENSHOT //NS = No Screenshot To display with custom html tags in the report, use the following, Report.updateTestLog(\"Userdefined Action\", \"#CTAG &lt;b&gt; Operation Done successfully&lt;b&gt;;\", Status.PASS);","title":"Reporting"},{"location":"customfunction/#adding-external-libraries","text":"Create your custom method that uses external jar(s) apart from the existing set of libraries under the lib folder. Always ensure that your custom method is working fine from your source code before introducing it in to the tool Place the jar files of your external libraries in the ./lib/clib folder Export your custom method as a jar file as explained in the Engine Section.","title":"Adding External Libraries"},{"location":"customfunction/#globally-exposed-variables-you-can-use-in-your-custom-method","text":"Following variables are defined internally and can be used in your custom method for deriving various kinds of information like the action in execution or the value stored under the Input column and etc. Given below is the description about each of the variable or keyword on the basis of it's functionality and usage. #### Driver - Type : WebDriver - Description : This variable will store the instance of the Webdriver class for the current browser in execution. Hence you can perform all the Driver related functions using this. - Usage : Driver.findElement(By.className(className)); WebElement element = Driver.findElement(By.id(Data)); #### Element - Type : WebElement - Description : This variable corresponds to the Object used under the ObjectName column of your currently executing test step. If there is no Object used in the ObjectName column of your Test step, then this variable will be Null . You can perform all WebElement related functions using this variable like for instance. - Usage : Element.click();//This will click on the respective Object which is used in the current test step.","title":"Globally Exposed Variables You Can Use In Your Custom Method"},{"location":"customfunction/#data","text":"Type : String Description : This variable stores the resolved data from the Input Column of the current test step in execution. That means if the step is being fed a data from the datasheet like SheetName:ColumnName or variable like %var% or hardcoded as @data , the Data variable will hold the actual value inside. Usage : System.out.println(Data + \"Resolved Input used in InputColumn in the currentTestStep\");","title":"Data"},{"location":"customfunction/#input","text":"Type : String Description : This variable stores the visible text/string in the Input Column of the current test step in execution. That means if the step is being fed a data from the datasheet like SheetName:ColumnName or variable like %var% or hardcoded as @data , the Input variable will hold the values as SheetName:ColumnName , %var% and @data respectivey Usage : System.out.println(Input + \"Input used in InputColumn in the currentTestStep\");","title":"Input"},{"location":"customfunction/#objectname","text":"Type : String Description : This variable stores the name of the object given under the ObjectName column of the current test step in execution. Usage : System.out.println(ObjectName + \"ObjectName used in ObjectColumn in the currentTestStep\");","title":"ObjectName"},{"location":"customfunction/#description","text":"Type : String Description : This variable stores the description present in the description column of the current test step. Usage : System.out.println(Description + \"Description used in DescriptionColumn in the currentTestStep\");","title":"Description"},{"location":"customfunction/#action","text":"Type : String Description : This variable stores the name of the action used in the Action column of the current test step. Usage : System.out.println(Action + \"Action/Command used in ActionColumn in the currentTestStep\");","title":"Action"},{"location":"customfunction/#reference","text":"Type : String Description : TThis variable stores the Name of the Page given under the Reference column of the current test step in execution. This Name of the Page is actually defined in the Object Repository. Usage : System.out.println(Reference + \"Reference/PageName used in ReferenceColumn in the currentTestStep\");","title":"Reference"},{"location":"customfunction/#execute-a-specific-test-case-from-custom-method","text":"There is an inbuilt method available called executeTestCase , which can be used to execute a particular test case under a particular scenario. public void executeTestCase(String scenarioName, String testCaseName); public void executeTestCase(String scenarioName, String testCaseName, int subIteration); The above method will execute the test case under the particular scenario and for that particular subiteration .","title":"Execute A Specific Test Case From Custom Method"},{"location":"customfunction/#execute-an-action-from-a-custom-method","text":"A method called executeMethod is available with the Engine and is overloaded in 4 different ways as follows. The name of the Action to be executed, should be passed as an argument and must be same as the action in the Engine. Type 1 public void executeMethod(WebElement element, String Action); Using this function you can provide the element and the action name, in the argument list, to execute the action on the element passed. For example, executeMethod(element, \"Click\"); Type 2 public void executeMethod(String Action, String Input); Using this function you can execute the action on the current element which also requires the information under the Input column or some String information that can be given directly.For example, executeMethod(\"Open\", \"@http://something\"); executeMethod(\"Open\", input); Type 3 public void executeMethod(WebElement element, String Action, String Input); Using this function you can execute the action on the supplied element which requires the information under the Input column or some String information that can be given directly.For example, executeMethod(element, \"Set\", input); Type 4 public void executeMethod(String Action); This will just call the method of the action that was instructed. Any of these overloaded methods can be used that suits your requirements best. Another method to call an action without using the executeMethod function is to go with the code described below, Here, we have to set the Data variable for the current step and call the Set action for execution. getCommander().Data = \"guest\";//This line will assign a value to the Data variable used in the current test step. new Basic(getCommander()).Set();//This line will call the Set action under the Basic java class file. Another example of using the getCommander() function to call an action is as follows.Here the method containing the definition for the action assertElementNotDisplayed is available under the AssertElement java class file. new AssertElement(getCommander()).assertElementNotDisplayed();//This line will just make a call to the action \"assertlementNotDisplayed\"","title":"Execute An Action From A Custom Method"},{"location":"customfunction/#access-an-object-from-the-object-repository","text":"It is possible to access a specific object from the object repository using the function AObject.findElement as shown below. WebElement element=AObject.findElement(ObjectName, Reference); Now all element related functions can be used for this element variable like; element.sendKeys(Data); It is also possible to use conditioned find method.Suppose you want to find an object on a web page using a particular property,obtained from the stored set of object properties in the Object Repository (OR) , then you can use the following function. WebElement element = AObject.findElement(\"p\", \"Yahoo\", ObjectProperty.Id); In the example below, a list of objects so obtained can be accessed by storing them in an ArrayList . List <WebElement> elementList= AObject.findElements(\"p\", \"Yahoo\", ObjectProperty.ClassName); In the above example object p under the page with name Yahoo (from the object repository) is found on the web page by using the Id property.","title":"Access An Object From The Object Repository"},{"location":"customfunction/#if-else-or-other-conditions-inside-a-custom-method","text":"It is possible to write a custom function, that checks for a condition and if the condition passes it will execute a set of code and if it fails then it will execute a different set of code.The custom method example handleCondition defined below, will check if the element is displayed and if so, it will execute the test case cancelTicket but if it is not displayed then it will just update the report with a DONE status. public void handleCondition() throws FrameworkException { // No argument should be given here. Only then will this function be executed //Step 1: Getting object from the object repository WebElement element = AObject.findElement(\"ObjectName\", \"PageName\"); //Step 2: Base the condition on object being displayed or not if (element.isDisplayed()) { //Calling another test case if the condition is matched //Pass the Scenario name,Test case name and sub-iteration index executeTestCase(\"testscenario1\", \"cancelTicket\", 1); Report.updateTestLog(\"Userdefined Action \", \"inside reusable\", Status.PASS); //If needed you can break the test case also by calling existing functions executeMethod(\"StopBrowser\"); } else { Report.updateTestLog(\"Userdefined Action \", \"switch to origional\", Status.DONE); } }","title":"If-Else or other Conditions Inside A Custom Method"},{"location":"customfunction/#access-test-data-sheet-in-custom-method","text":"","title":"Access Test Data Sheet In Custom Method"},{"location":"customfunction/#local-data-sheet","text":"","title":"Local Data sheet"},{"location":"customfunction/#getdata","text":"There are functions to access the data from the datasheet. The getData function is overloaded in the following ways and can be used accordingly in your custom method. Type 1 public String getData(String DataSheetName, String ColumnName); Provide the name of the data sheet ( Sample ) and column ( Data1 ) that contains the data and this function will return a string which is the value of the required data.For instance, String input = userData.getData(\"Sample\", \"Data1\"); Type 2 public String getData(String DataSheetName, String ColumnName, String Iteration, String SubIteration); Provide the name of the sheet,column,iteration and subiteration values if you want to be specific, as shown in the example below; String input = userData.getData(\"Sample\", \"Data1\", \"1\", \"1\"); Here the data stored in the sheet Sample ,under the column Data1 having the subiteration and iteration value as 1 is stored in the input string variable. Another way is to provide all the information as given above in the argument list and also include the scenario and test case name. Type 3 public String getData(String DataSheetName, String ColumnName, String ScenarioName,String TestCase, String Iteration, String SubIteration); Example : String input = userData.getData(\"Sample\", \"Data1\", \"scenario\",\"testcase\", \"1\", \"1\"); In the example above the data stored in the sheet Sample under the column Data1 and belonging to the testcase named testcase and scenario named scenario having the iteration and subiteration value as 1 is stored in input string.","title":"getData"},{"location":"customfunction/#putdata","text":"It is also possible to write in to the data sheet using the \"putData\" function: The putData() function is overloaded in the following ways, Type 1 userData.putData(\"DatasheetName\", \"ColumnName\", \"value to be written\"); Example: userData.putData(\"Sample\", \"Data1\", \"kk\"); where Sample is the datasheet name , Data1 is the column name and kk is the value to be written under the respective column. Type 2 You can also provide the iteration and subiteration values in the argument list. userData.putData(\"DatasheetName\", \"ColumnName\", \"value to be written\", \"Iterationvalue\", \"SubIteration value\"); An example for this is, userData.putData(\"Sample\", \"Data1\", \"kk\", \"1\", \"1\"); where Sample is the datasheet name , Data1 is the column name and kk is the value to be written under the respective column for the iteration value of 1 and subiteration value of 1 . Type 3 Apart from the information above you can also include the test case and scenario name as shown below, userData.putData(\"DatasheetName\",\"columnName\",\"value to be written\",\"scenario name\",\"test case name\",\"Iteration value\",\"SubIteration value\"); An example for the above scenario is shown below, userData.putData(\"Sample\", \"Data1\", \"kk\", \"scenario\", \"testcase\", \"1\", \"1\"); where Sample is the datasheet name , Data1 is the column name, testcase is the testcase name, scenario is the scenario name and kk is the value to be written under the respective column for the iteration and subiteration value of 1 .","title":"putData"},{"location":"customfunction/#global-data-sheet","text":"To access a global data sheet from the custom method to read a global data value, use the method below : userData.getGlobalData(globalDataID, columnName); Example: String datavalue = userData.getGlobalData(\"Glob1\", \"username\"); To write or update a global data sheet, call the method below in your custom method, userData.putGlobalData(globalDataID, columnName, value); Example: userData.putGlobalData(\"Glob1\", \"username\", \"LukeSkywalker\");","title":"Global Data Sheet"},{"location":"customfunction/#testdatamodel","text":"As an alternative, you can use the following code to access the data sheet by its name and update the same, traversing through every record in the test data sheet. TestDataModel tdModel = Control.getCurrentProject().getTestData().getTestDataByName(\"TestDataSheetName\"); tdModel.loadTableModel(); int rowsCount = tdModel.getRowCount(); for (int row = 0; row < tdModel.getRowCount(); row++) { // Where orderId is a column in my data sheet int colIndex = tdModel.getColumnIndex(\"orderId\"); //To get value String orderId = (String) tdModel.getValueAt(row, colIndex); // To put values in to the sheet tdModel.setValueAt(\"New Value\", row, colIndex); }","title":"TestDataModel"},{"location":"customfunction/#stop-current-executioniteration-based-on-a-condition","text":"The following code can be used to stop the current iteration based on a condition. Boolean something = false; if (something) { SystemDefaults.stopCurrentIteration.set(true);//Stop the iteration } The following code can be used to stop the current execution based on a condition. Boolean something = false; if (something) { SystemDefaults.stopExecution.set(true);//Stop the execution }","title":"Stop Current Execution/Iteration Based On A Condition"},{"location":"customfunction/#get-iterationsubiteration-value-of-the-current-teststep","text":"It is possible to get the value of current iteration using the function \"getIteration\" String iterationValue=userData.getIteration(); This function returns a string value containing the Iteration number of the current iteration. It is also possible to get the value of current subiteration using the function getSubIteration String subiterationValue=userData.getSubIteration(); This function returns a string value containing the Subiteration number of the current sub iteration that is in execution.","title":"Get Iteration/Subiteration Value Of The Current TestStep"},{"location":"customfunction/#get-current-scenariotestcase-name","text":"The getScenario function returns a string value containing the name of the current scenario that is in execution. String scenarioName=userData.getScenario(); The getCurrentScenario function returns a string value containing the name of the current Reusable scenario that is in execution. String reusableScenarioName=userData.getCurrentScenario(); The getTestCase function returns a string value containing the name of the current test case in execution. String testcaseName= userData.getTestCase(); The getCurrentTestCase function returns a string value containing the name of the current Reusable test case in execution. String testcaseName= userData.getCurrentTestCase();","title":"Get Current Scenario/TestCase Name"},{"location":"customfunction/#get-objectrepository-properties-of-webelement","text":"It is possible to access the specific property of an element stored in the Object Repository using the function AObject.getObjectProperty described below. String prop = AObject.getObjectProperty(\"pageName\", \"objectName\", ObjectProperty.Id); In the above scenario, pass the name of the page (under which the object is present in the Object Repository), objectName and object property that you want to access. You can also use the following method to get the particular property of the object from the OR. String prop = AObject.getWebObject(\"pageName\", \"objectName\").getId(); prop = AObject.getWebObject(Reference, ObjectName).getAttributeByName(ObjectProperty.Id); //to get current step object's Id property","title":"Get ObjectRepository Properties Of WebElement"},{"location":"customfunction/#add-value-to-a-variable","text":"Suppose you want to create a variable and define a value to it, you can go for addVar(arg1,arg2) function or addGlobalVar(arg1,arg2) methods. The addVar(arg1,arg2) function takes the variable name and it's value as parameters and is defined under the com.cognizant.cognizantits.engine.commands.Command java file as shown below, public void addVar(String key, String val) { Commander.addVar(key, val); } This method can be used as shown below: addVar(\"%nameVar%\", \"LukeSkywalker\"); The scope of this variable is only till the end of the execution of the test case in which it is defined. The addGlobalVar(arg1,arg2) function is used to add a value to a variable whose scope is till the end of the execution of the testset ie. till the end of execution of the last test case under the test set. This function can be used in your custom code as shown below: addGlobalVar(\"%nameVar%\", \"LukeSkywalker\"); This function is defined as shown below under the com.cognizant.cognizantits.engine.commands.Command java file. public void addGlobalVar(String key, String val) { if (key.matches(\"%.*%\")) { key = key.substring(1, key.length() - 1); } Commander.putUserDefinedData(key, val); }","title":"Add Value To A Variable"},{"location":"customfunction/#access-a-variables-value-in-custom-method","text":"The value of a variable created in your test case can be accessed using the function getVar which is defined, as shown below, under the com.cognizant.cognizantits.engine.commands.Command java file. public String getVar(String key) { return Commander.getVar(key); } This function can be used,as shown below, in your custom method. Provide the variable name between two percentage symbols (%%) String value = getVar(\"%newVar%\"); System.out.println(value); Suppose you have defined some variables in the userdefined tab of the Settings window, which can be opened by navigating through Run Settings icon >> UserDefined Tab , then you can access them in your custom method in two ways: Option 1: Use the getVar function as shown below. String value; value = getVar(\"%userdefinedVar%\"); value = getVar(\"userdefinedVar\");//This also will work The other way is to use the getUserDefinedData method,which is similar to the getVar ,but can only be used for accessing the user defined data. String value = getUserDefinedData(\"userdefinedVar\"); System.out.println(value);","title":"Access A Variable's Value In Custom Method"},{"location":"customfunction/#sample-custom-method","text":"For creating any Custom Method, a java class is required. The following sample code can be used for understanding the usage of various variables and functions that you can access in your custom method. package com.cognizant.cognizantits.engine.commands; import com.cognizant.cognizantits.engine.commands.General; import com.cognizant.cognizantits.engine.core.CommandControl; import com.cognizant.cognizantits.engine.support.Status; import com.cognizant.cognizantits.engine.support.methodInf.Action; import com.cognizant.cognizantits.engine.support.methodInf.ObjectType; import com.cognizant.cognizantits.engine.support.methodInf.InputType; //extend Command to access elements public class SampleScript extends General { public SampleScript(CommandControl cc) { super(cc); } public void textExe() { Report.updateTestLog(Action, \"textExe\", Status.DONE); executeTestCase(\"testWeb\", \"search\"); } @Action(object = ObjectType.BROWSER, desc = \"open given url\", input = InputType.YES) public void prinThis(){ /** * No argument should be specifed. Only then will your custom method be executed. */ //To do any operations before and/or after execution of eachStep add your code to //functions beforeStepExecution / afterStepExecution in //Annotation.java inside com.cognizant.cognizantits.engine.core package //To do any operation after execution [execution is finished] add your code to //afterReportComplete function in //SummaryReport.java inside com.cognizant.cognizantits.engine.reporting package // do ur action try { /**********************************/ Element.click(); //Object in ObjectName is resolved as WebElement and assigned to this variable[Element] System.out.println(ObjectName + \"ObjectName used in ObjectColumn in the currentTestStep\"); System.out.println(Description + \"Description used in DescriptionColumn in the currentTestStep\"); System.out.println(Action + \"Action/Command used in ActionColumn in the currentTestStep\"); System.out.println(Input + \"Input used in InputColumn in the currentTestStep\"); System.out.println(Data + \"Resolved Input used in InputColumn in the currentTestStep\"); System.out.println(Reference + \"Reference/PageName used in ReferenceColumn in the currentTestStep\"); /**********************************/ System.out.println(getCurrentBrowserName() + \"To get the current browserName\"); /**********************************/ //If you stored some dynamic value in a variable[%newVar%] you can get the value from the variable using String value = getVar(\"%newVar%\"); System.out.println(value); //If you want to access the userdefined data created from UserDefined Settings pane you can use it in two ways //1st option value = getVar(\"%userdefinedVar%\"); value = getVar(\"userdefinedVar\"); //This also will work //2nd option value = getUserDefinedData(\"userdefinedVar\"); System.out.println(value); //If you want to store some value in a variable[%dyanmicVar%] you can store the value into a variable using //Scope is for Current Testcase addVar(\"%dyanmicVar%\", \"Value to be Stored\"); //Scope is for All addGlobalVar(\"%dyanmicVar%\", \"Value to be Stored\"); /**********************************/ // Using Inbuilt findMethod AObject.findElement(ObjectName, Reference); //To find thecurrent step's object AObject.findElements(ObjectName, Reference); //To find the current step's object // to access the object value pass ObjectName and PageName as inputs // ObjectName=p // PageName=Yahoo WebElement element = AObject.findElement(\"p\", \"Yahoo\"); List<WebElement>elementList = AObject.findElements(\"p\", \"Yahoo\"); // Using Conditioned FindMethod element = AObject.findElement(\"p\", \"Yahoo\", ObjectProperty.Id); elementList = AObject.findElements(\"p\", \"Yahoo\", ObjectProperty.ClassName); System.out.println(\"No of elements\" + elementList.size()); //Using Own findMethod element = Driver.findElement(By.id(Data)); /**********************************/ // using this element you can perform selenium operations element.sendKeys(\"Normal\"); element.sendKeys(Data); /**********************************/ //To get a property of an object from ObjectRepository String prop = AObject.getWebObject(\"pageName\",\"objectName\").getId(); prop = AObject.getWebObject(Reference,ObjectName).getAttributeByName(ObjectProperty.Id); //to get current step object's id property System.out.println(prop); /**********************************/ // to access the data from DataSheets pass DataSheetName and ColumnName as inputs // Don't pass GlobalData as inputsheet // SheetName,Columnname String input = userData.getData(\"Sample\", \"Data1\"); //To get values from specified Iteration and subiteration input = userData.getData(\"Sample\", \"Data1\", \"1\", \"1\"); //To get values from specified Scenario, Testcase, Iteration and subiteration input = userData.getData(\"Sample\", \"Data1\", \"scenario\",\"testcase\", \"1\", \"1\"); element.sendKeys(input); /**********************************/ //To write values into DataSheet //Don't pass GlobalData as inputsheet // SheetName,Columnname,value userData.putData(\"Sample\", \"Data1\", \"kk\"); //to write values for specified Iteration and subiteration userData.putData(\"Sample\", \"Data1\", \"kk\", \"1\", \"1\"); //to write values for specified Scenario, Testcase, Iteration and subiteration userData.putData(\"Sample\", \"Data1\", \"kk\", \"scenario\", \"testcase\", \"1\", \"1\"); /**********************************/ TestDataModel tdModel = Control.getCurrentProject().getTestData().getTestDataByName(\" TestDatasheetName\"); int rowsCount = tdModel.getRowCount(); for (int row = 0; row < tdModel.getRowCount(); row++) { // Where orderId is a column in my data sheet int colIndex = tdModel.getColumnIndex(\"orderId\"); //To get value String orderId = (String) tdModel.getValueAt(row, colIndex); // To put values in to the sheet tdModel.setValueAt(\"New Value\", row, colIndex); } /**********************************/ //To display in Report Report.updateTestLog(\"Userdefined Action \", \"Operation Done successfully\", Status.PASS); //To display in Report with custom html tags Report.updateTestLog(\"Userdefined Action \", \"#CTAG<b>Operation Done successfully<b>\", Status.PASS); /**********************************/ //To get the current Iteration userData.getIteration(); //To get the current SubIteration userData.getSubIteration(); //To get the current Scenario userData.getScenario(); //To get the current Testcase userData.getTestCase(); //To get the current BrowserName System.out.println(getCurrentBrowserName()); /**********************************/ // to stop the current iteration if u want to... based on condition Boolean something = false; if (something) { SystemDefaults.stopCurrentIteration.set(true); SystemDefaults.stopExecution.set(true); //Stop the execution } /**********************************/ // To use inbuilt functions //simple way //make sure you set the Data,Element and other variables new Basic(getCommander()).Click(); //Old school executeMethod(element, \"Click\"); executeMethod(\"open\", \"@http://something\"); executeMethod(\"open\", input); executeMethod(element, \"Set\", input); /**********************************/ //To execute Other Testcases // scenarioname,testcasename,subiteration executeTestCase(\"OnlineShopping\", \"BuyProduct\", 2); // scenarioname,testcasename executeTestCase(\"OnlineShopping\", \"BuyProduct\"); } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); } } /**********************************/ public void handleCondition() throws UnCaughtException { //Getting object from the object repository WebElement element = AObject.findElement(\"ObjectName\", \"PageName\"); //Basing the condition on a web element being displayed if (element.isDisplayed()) { //Calling another test case if the condition is matched //Pass the Scenario name,Test case name and sub-iteration index executeTestCase(\"testscenario1\", \"cancelTicket\", 1); Report.updateTestLog(\"Userdefined Action \", \"inside reusable\", Status.PASS); //If needed you can break the test case also by calling existing functions executeMethod(\"StopBrowser\"); // } else { Report.updateTestLog(\"Userdefined Action \", \"switch to origional\", Status.DONE); } } }","title":"Sample Custom Method"},{"location":"database/","text":"Database Testing Database Testing is an important feature of the tool. It allows us to connect to any database and store and assert the results against datasheets. This gives us an advantage of executing Web, API and Database actions all in one go in a single Test Flow Set up Database Connection Download and store the jdbc driver jar in lib/clib location If you are using mysql database you need to download mysql-connector-j-X.jar from here . If you are using oracle database you need to download ojdbcX.jar from here . X is the version of your choice In order to connect to specific database from tool we need to provide values in Database Settings under Run Settings of the tool. In Java if you were to manually connect, you would invariably use the following : Class.forName(\"com.mysql.cj.jdbc.Driver\"); Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/productDB\", \"My_DB_UserName\", \"My_DB_Password\"); ## Query Editor After the above setting is done, you can proceed with your first steps as shown below. Data Parameterization can be done using the built-in editor. If you mouse-hover on the Input column, corresponding to the DB steps, an option to open up the Editor comes up. Inside this editor, we can write the Query and then parameterize it based on our needs. If we press [ctrl] + [SPACE] , the list of all available DataSheets : ColumnNames along with all user-defined variables show up. We can then select the appropriate item from where we want to parameterize. We need to press [esc] to close the editor The above image is a gif. So if its not moving, please reload the page ## Actions There are 11 built-in Actions. Please click the action-cloud below to check the details","title":"Database Testing"},{"location":"database/#database-testing","text":"Database Testing is an important feature of the tool. It allows us to connect to any database and store and assert the results against datasheets. This gives us an advantage of executing Web, API and Database actions all in one go in a single Test Flow","title":"Database Testing"},{"location":"database/#set-up-database-connection","text":"Download and store the jdbc driver jar in lib/clib location If you are using mysql database you need to download mysql-connector-j-X.jar from here . If you are using oracle database you need to download ojdbcX.jar from here . X is the version of your choice In order to connect to specific database from tool we need to provide values in Database Settings under Run Settings of the tool. In Java if you were to manually connect, you would invariably use the following : Class.forName(\"com.mysql.cj.jdbc.Driver\"); Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/productDB\", \"My_DB_UserName\", \"My_DB_Password\"); ## Query Editor After the above setting is done, you can proceed with your first steps as shown below. Data Parameterization can be done using the built-in editor. If you mouse-hover on the Input column, corresponding to the DB steps, an option to open up the Editor comes up. Inside this editor, we can write the Query and then parameterize it based on our needs. If we press [ctrl] + [SPACE] , the list of all available DataSheets : ColumnNames along with all user-defined variables show up. We can then select the appropriate item from where we want to parameterize. We need to press [esc] to close the editor The above image is a gif. So if its not moving, please reload the page ## Actions There are 11 built-in Actions. Please click the action-cloud below to check the details","title":"Set up Database Connection"},{"location":"engine/","text":"Engine The Engine is the heart of the tool. This is where the methods corresponding to all the available actions are defined and this folder ( location of your tool\\Engine ) can be imported into any IDE that supports Java. This gives users the flexibility to alter the code of the existing actions or add additional custom actions. After making modifications to the engine, the users can compile the engine and export it as a JAR file to be used from the UI of the tool. Note: Java 11 is mapped to Eclipse IDE's workspace settings in order to enable a seamless import of engine and custom method project . Make sure the Eclipse Java compiler is also set to 11 How to open the Engine in Eclipse? Open Eclipse IDE Import project using File > Import > General > Existing Projects into Workspace Locate the Engine project in your system by clicking on [Browse] . This location is usually inside the directory where the tool is present After performing the above steps, you can see the entire project structure If you see Build Path errors after importing the engine, then you can fix this by removing all the libraries and readding them. Step 1 : Remove All the libraries - Right Click on the Project Name - Select Build Path > Configure Build Path - Under the Libraries Tab, select all jar files under Classpath - Click on [Remove] Button Step 2 : Re-Add All the libraries - Select Classpath from the same location as above - Click on [Add External JARs] Button - Navigate to the location where the tool is installed - Select and add, all libraries under the lib folder - Click [Apply and Close] Button Where to write your custom method(s)? Create a custom package in the Engine under src and place all your .java files containing the custom methods in it. This is the best practice to add your custom method. How to use your custom method(s) in the UI of the tool? You can create your custom method in the Engine (as explained in the above section) and export the Engine as a Jar file for the changes to be visible in the UI of the tool. Follow the steps below to export and replace the engine.jar in the lib folder under the installation location. Select the src/main/java and src/main/resources folder of Engine project Right Click and choose Export option Select Java > jar option and click [Next] Click on [Browse] and select the path as <installation location>\\lib\\cognizant-intelligent-test-scripter-engine.jar Click on [Finish] > [OK] to complete the overwriting of the engine.jar Restart the tool to load the updated jar with new methods How to test your custom method(s) by running/debugging a test case from Engine? It is a best practice to run or debug your flow from the Engine, before exporting the jar. In case of any errors or exceptions, you can redesign your flow and finally export the jar once the errors have been fixed. Follow the steps below to execute test case from the Engine. Open Eclipse IDE If you have your custom method in a separate package , then follow the steps below to add your package name to the package.properties file available in the Configuration folder inside the installation location of the tool For example, if your custom method is added like this : Navigate to the location where the tool is installed >> Go to Configuration folder >> Inside package.properties add the package name like this : In the same Configuration folder >> Open the Global Settings.properties file and provide the details as shown in the image below: For executing the test case with your custom method: Add the custom method name in the test case as shown below. It will show in Red in the UI of the tool, but thats expected as you have not yet built a JAR file. You are only testing the custom method. Run the control.java file from the com.cognizant.cognizantits.engine.core package. You can also keep break points wherever required and debug the test case after triggering the execution form the control.java file.","title":"Engine"},{"location":"engine/#engine","text":"The Engine is the heart of the tool. This is where the methods corresponding to all the available actions are defined and this folder ( location of your tool\\Engine ) can be imported into any IDE that supports Java. This gives users the flexibility to alter the code of the existing actions or add additional custom actions. After making modifications to the engine, the users can compile the engine and export it as a JAR file to be used from the UI of the tool. Note: Java 11 is mapped to Eclipse IDE's workspace settings in order to enable a seamless import of engine and custom method project . Make sure the Eclipse Java compiler is also set to 11","title":"Engine"},{"location":"engine/#how-to-open-the-engine-in-eclipse","text":"Open Eclipse IDE Import project using File > Import > General > Existing Projects into Workspace Locate the Engine project in your system by clicking on [Browse] . This location is usually inside the directory where the tool is present After performing the above steps, you can see the entire project structure If you see Build Path errors after importing the engine, then you can fix this by removing all the libraries and readding them. Step 1 : Remove All the libraries - Right Click on the Project Name - Select Build Path > Configure Build Path - Under the Libraries Tab, select all jar files under Classpath - Click on [Remove] Button Step 2 : Re-Add All the libraries - Select Classpath from the same location as above - Click on [Add External JARs] Button - Navigate to the location where the tool is installed - Select and add, all libraries under the lib folder - Click [Apply and Close] Button","title":"How to open the Engine in Eclipse?"},{"location":"engine/#where-to-write-your-custom-methods","text":"Create a custom package in the Engine under src and place all your .java files containing the custom methods in it. This is the best practice to add your custom method.","title":"Where to write your custom method(s)?"},{"location":"engine/#how-to-use-your-custom-methods-in-the-ui-of-the-tool","text":"You can create your custom method in the Engine (as explained in the above section) and export the Engine as a Jar file for the changes to be visible in the UI of the tool. Follow the steps below to export and replace the engine.jar in the lib folder under the installation location. Select the src/main/java and src/main/resources folder of Engine project Right Click and choose Export option Select Java > jar option and click [Next] Click on [Browse] and select the path as <installation location>\\lib\\cognizant-intelligent-test-scripter-engine.jar Click on [Finish] > [OK] to complete the overwriting of the engine.jar Restart the tool to load the updated jar with new methods","title":"How to use your custom method(s) in the UI of the tool?"},{"location":"engine/#how-to-test-your-custom-methods-by-runningdebugging-a-test-case-from-engine","text":"It is a best practice to run or debug your flow from the Engine, before exporting the jar. In case of any errors or exceptions, you can redesign your flow and finally export the jar once the errors have been fixed. Follow the steps below to execute test case from the Engine. Open Eclipse IDE If you have your custom method in a separate package , then follow the steps below to add your package name to the package.properties file available in the Configuration folder inside the installation location of the tool For example, if your custom method is added like this : Navigate to the location where the tool is installed >> Go to Configuration folder >> Inside package.properties add the package name like this : In the same Configuration folder >> Open the Global Settings.properties file and provide the details as shown in the image below: For executing the test case with your custom method: Add the custom method name in the test case as shown below. It will show in Red in the UI of the tool, but thats expected as you have not yet built a JAR file. You are only testing the custom method. Run the control.java file from the com.cognizant.cognizantits.engine.core package. You can also keep break points wherever required and debug the test case after triggering the execution form the control.java file.","title":"How to test your custom method(s) by running/debugging a test case from Engine?"},{"location":"gettingstarted/","text":"Getting Started Prerequisites Hardware Requirements RAM: Min. 2GB (preferably 4GB) Operating System: Windows (32/64 bit)/ MAC OS/Linux The tool is built on Java. Hence it will work on any Operating System which supports Java. Software Requirements Java 11 or above For customizations, any IDE which supports Java Development (eg. Eclipse, Netbeans, etc.) Installation Step 1 : Download the Latest version of the tool from here . Step 2 : Extract the zip, into a directory of your choice. The tool as such does not require any \"installation\" process. Simple extraction of the zip file is enough. Step 3 : If you are using the tool for Browser Automation, then please ensure that you download and update the appropriate driver in the lib\\Drivers location where your tool is present. For example if you are using Chrome , then check the version of the browser installed on your machine from Help > About Google Chrome option. You need to download the same driver version as the browser version. So, if you see the version as 112.0.5615.138 (Official Build) (64-bit) then you need to download Chrome Driver 112.x . You can do so from here . Once downloaded, unzip it in the the lib\\Drivers location where your tool is present. Step 4 : For Record , Spy and Heal , you need the browser extention of the tool. From chrome webstore, add the tool extension in your browser. You can directly navigate to this link and add it. Make sure to pin the extension so that you can use it easily. Step 5 : To launch the tool, follow the following step(s) : For Windows : Double Click the Run.bat in the tool location For Mac : Open Terminal in the installation location and then type chmod +x Run.command . Then Double Click the Run.command . If you see It's Downloaded From Internet Warning then enter the following command in terminal xattr -d -r com.apple.quarantine /path/to/the tool Start with Recording The easiset and quickest way to get underway with automation is to record a user journey in the A.U.T. (Application Under Test). To do so, follow the steps below : Launch the tool : Double Click the Run.bat [Windows] or Run.command [Mac] Launch the recorder : Click the Record icon The Recorder should open up Connect to the extension : Click the Browser Extension while having the recorder launched . The extension should show a Green colored [R] indicating that Recorder mode is [ON] The extension should look like this : NOTE : If you get is an Error in connection or no response after clicking the extension, follow the following steps : Hit the following URL while having the recorder launched : https://localhost:8887/ Click on Proceed You should get a message like this Now Repeat the steps explained in Connect to the extension step.","title":"Getting Started"},{"location":"gettingstarted/#getting-started","text":"","title":"Getting Started"},{"location":"gettingstarted/#prerequisites","text":"","title":"Prerequisites"},{"location":"gettingstarted/#hardware-requirements","text":"RAM: Min. 2GB (preferably 4GB) Operating System: Windows (32/64 bit)/ MAC OS/Linux The tool is built on Java. Hence it will work on any Operating System which supports Java.","title":"Hardware Requirements"},{"location":"gettingstarted/#software-requirements","text":"Java 11 or above For customizations, any IDE which supports Java Development (eg. Eclipse, Netbeans, etc.)","title":"Software Requirements"},{"location":"gettingstarted/#installation","text":"Step 1 : Download the Latest version of the tool from here . Step 2 : Extract the zip, into a directory of your choice. The tool as such does not require any \"installation\" process. Simple extraction of the zip file is enough. Step 3 : If you are using the tool for Browser Automation, then please ensure that you download and update the appropriate driver in the lib\\Drivers location where your tool is present. For example if you are using Chrome , then check the version of the browser installed on your machine from Help > About Google Chrome option. You need to download the same driver version as the browser version. So, if you see the version as 112.0.5615.138 (Official Build) (64-bit) then you need to download Chrome Driver 112.x . You can do so from here . Once downloaded, unzip it in the the lib\\Drivers location where your tool is present. Step 4 : For Record , Spy and Heal , you need the browser extention of the tool. From chrome webstore, add the tool extension in your browser. You can directly navigate to this link and add it. Make sure to pin the extension so that you can use it easily. Step 5 : To launch the tool, follow the following step(s) : For Windows : Double Click the Run.bat in the tool location For Mac : Open Terminal in the installation location and then type chmod +x Run.command . Then Double Click the Run.command . If you see It's Downloaded From Internet Warning then enter the following command in terminal xattr -d -r com.apple.quarantine /path/to/the tool","title":"Installation"},{"location":"gettingstarted/#start-with-recording","text":"The easiset and quickest way to get underway with automation is to record a user journey in the A.U.T. (Application Under Test). To do so, follow the steps below : Launch the tool : Double Click the Run.bat [Windows] or Run.command [Mac] Launch the recorder : Click the Record icon The Recorder should open up Connect to the extension : Click the Browser Extension while having the recorder launched . The extension should show a Green colored [R] indicating that Recorder mode is [ON] The extension should look like this : NOTE : If you get is an Error in connection or no response after clicking the extension, follow the following steps : Hit the following URL while having the recorder launched : https://localhost:8887/ Click on Proceed You should get a message like this Now Repeat the steps explained in Connect to the extension step.","title":"Start with Recording"},{"location":"goodtoknow/","text":"Good to know features 01. Global Data Sheets For every project that is created in Cognizant Intelligent Test Scripter, a default global data sheet is generated. The data entered in the global data sheet can be referenced in any test data sheet within the project. This allows you to reuse the data across multiple test cases. Where to use the Global Data? Identify the Data column name which is common across multiple data sheets. Select that data value and click on global data icon, as shown in the image above. Give the global data id, in the respective window, as shown below, You will get the global id in the global data sheet, as shown below. 02. Rename a Project To rename your project, right click on the project name from the Test Plan section and choose Details from the context menu option. The Project Details window opens and the following options are available in the window, as shown below. To rename your project, give the new name in the Project Name text box and click on Rename . Your project will be renamed. The open option opens the project location in your system. Right below these options, you have details on the total number of scenarios, test cases, reusable components and test data sheets present in the project. 03. Execute A Reusable For Specific Set Of Data A reusable test case can be executed with a desired set of data by providing the sub iteration index in the Input column. It will fetch the data set from the data sheet with the desired index and use it within the test case. This is very useful when you want to execute the same reusable component, inside a single test case, with different set set of data passed each time. 04. Looping NOTE: In Test Design panel, users are only given access to Iteration 1 and its various Subiterations For the above image, Steps 11 to 18 will be executed 2 times (equal to the number of Sub iterations for Iteration 1) For first iteration, data will be taken from Iteration 1 and Subiteration 1 For second iteration, data will be taken from Iteration 1 and Subiteration 2 To repeat an entire Test Case, keep Start Param in the first Step of your test Case and End Param in the last Step of your Test Case. In the above image, we have used End Param:@1 . This will execute Step 11 to 18, once and not twice. To iterate through the entire Test Case for all the sub iterations of data in the data sheet, keep Start Param in the first step and End Param in the last step of your Test Case. 05. Iterations And Subiterations In Test Execution Panel NOTE: In the Test Execution panel, you are given access to all Iterations and their Sub iterations. In the above image, there are some options given under the Iteration column All : will Iterate through all your Iterations of your datasheet. Single : will only Iterate through Iteration 1 of your datasheet. n:n (Range): will Iterate through a range of iterations. For example, if you use 2:5, then Cognizant Intelligent Test Scripter will only Iterate through Iteration 2 to Iteration 5 even if there are more iterations. n : will allow you to Iterate a particular (nth) iteration in your datasheet. For example, if you use 5, then Cognizant Intelligent Test Scripter iterate only the 5th iteration and all its sub iterations. Note: Subiterations will work according to the definition of Start Param and End Param in the Test Design panel. Looping Without Test Datasheet To repeat few steps, use Start Loop and End Loop:@n . In the above image, Start Loop is at Step 2 and End Loop:@5 is at Step 8. So, Step 2 to 8 will be repeated 5 times. 06. Handle Random Actions/Pop up Windows In some applications, there may be components which will originate at random ie. the origination of such components cannot be predicted. This section will describe how to handle such components. Logic Since the origin of some components cannot be predicted, check for the availability of the respective component before or after performing each step. How To Do It? Open ther Engine in Eclipse IDE (or any IDE supporting java development). Navigate to com.cognizant.cognizantits.engine.execution.run . The following actions will be available in this class Annotation : beforeStepExecution :Enter the code to handle the component here ,if you want to perform the check before the execution of each step. afterStepExecution :Enter the code to handle the component here,if you want to perform the check after the execution of each step. 07. How To Navigate between Test Data Sheets? Right click on any data sheet and choose the option Search Test Data from the context menu In the Go To Test Data window, choose the test data sheet or the global data sheet to which you want to navigate You will be navigated to the respective sheet after clicking on [OK] 08. How To Call AutoIT scripts in the tool? To call any .exe file and execute the same directly from the UI, follow the procedure below : Create a test step, under the object name as App , action as openApp and give the path of the exe file under the Input column, as shown below. Now when you run this script, the corresponding .exe file will be executed. 09. User Defined Variables User Defined variables can be created and defined by two ways as given below. Using the actions AddVar and AddGlobalVar . AddVar action will let you de\udbc0\udca6ne a variable whose scope is throughout the execution of your test case and is valid for all the sub-iterations of the iteration 1 of your test case. But AddGlobalVar action will let you define a variable whose scope is throughout the execution of your test set. Navigate to Configuration>Run Settings tab and provide your variable name and value under the Property Name and Value columns respectively, as shown in the screen shot below. Click on save for saving your settings. These variables can now be used anywhere in your project, an example of which is shown below. In addition to these, we have certain actions that take variables as input and will store the corresponding result in the variable provided. 10. How To Change Report Theme? Go to Configuration>Options Theme . From the Reporting theme , select a theme of your choice. You can also toggle between Single * and Group View**. You can choose which columns need to be displayed in the report. Show or hide columns in the report using the show/hide columns option. Check the respective column name checkbox to display that column or uncheck the respective column name checkbox to hide it. Filtering In Report You can filter reports using Global Search or Column Search . Sorting In Report You can sort the reports using the up/down arrows beside each column name. 11. Generate Run Time Data There are options available in the Input column to perform functions like rounding off numbers, generating a random number, concatenating strings, other arithmetic calculations and etc. Follow the steps below to access those options. Consider any action that requires Input column. For instance let us take the Print action. Instead of providing the URL directly, you can concatenate two strings that lead to the URL. Consider the custom method below that uses the Data keyword which will process the concatenate function and open the URL. Note : It is also possible to combine two relevant functions for optimum usage . For example,= Concat(Diaphragm,=Round(360.45)) in the input column will return the following result Diaphragm360 . 12. Add Custom Functions For Run Time Data Generation Navigate to : com.cognizant.cognizantits.engine.util.data.fx; > Functions.java add your custom function as shown below. This is an example of creating a Trim function which will accept a String input and will return a trimmed output. public Object Trim(String... args) { String op = \"\"; try { op = args[0].trim(); } catch (Exception ex) { LOG.log(Level.SEVERE, ex.getMessage(), ex); } return op; } 13. Enabling/Disabling screenshots for PASS/FAIL In the report, you will be able to view the screenshots for the steps whose Status is PASS or FAIL . However, you have the option to enable/disable the screenshots for such steps. In the Cognizant Intelligent Test Scripter UI, go to Configurations->Run Settings . Under Screenshot section, you can check/uncheck the Pass or Fail checkboxes in order to enable/disable the screenshots in the report. To enable/disable the screenshots for the entire page, check/uncheck the Take Full Page Screenshot checkbox. Note : Give the status as PASSNS or FAILNS under the Report.updateTestLog() method for PASS status without screenshot or FAIL status without screenshot respectively. 14. Execution in debug mode. You can debug the errors in your test case by adding breakpoints to the desired test steps and running the test case in debug mode. Select the steps for which you wish to add a breakpoint, right click and choose Toggle Breakpoint . Right click the Debug button (situated next to the run button), select the browser of your choice and click the Debug button. Once the execution starts, the debug toolbar will appear on top of the screen as shown below. The execution will pause at the step where the breakpoint has been added. You can then debug your test case accordingly. To view the console log, click the button. To pause the execution of the test case, click the button. Once the execution has been paused, you can insert new succeeding steps in the test case or check the object properties using Object Heal and update them. To resume the execution of the test case, click the button. To move to the next step of the test case, click the button. To stop the execution of the test case, click the button. Note : In addition to adding breakpoints to the test steps, you can comment the selected test steps as well, by performing right click and choosing the option Toggle Comments .","title":"Good to know features"},{"location":"goodtoknow/#good-to-know-features","text":"","title":"Good to know features"},{"location":"goodtoknow/#01-global-data-sheets","text":"For every project that is created in Cognizant Intelligent Test Scripter, a default global data sheet is generated. The data entered in the global data sheet can be referenced in any test data sheet within the project. This allows you to reuse the data across multiple test cases. Where to use the Global Data? Identify the Data column name which is common across multiple data sheets. Select that data value and click on global data icon, as shown in the image above. Give the global data id, in the respective window, as shown below, You will get the global id in the global data sheet, as shown below.","title":"01. Global Data Sheets"},{"location":"goodtoknow/#02-rename-a-project","text":"To rename your project, right click on the project name from the Test Plan section and choose Details from the context menu option. The Project Details window opens and the following options are available in the window, as shown below. To rename your project, give the new name in the Project Name text box and click on Rename . Your project will be renamed. The open option opens the project location in your system. Right below these options, you have details on the total number of scenarios, test cases, reusable components and test data sheets present in the project.","title":"02. Rename a Project"},{"location":"goodtoknow/#03-execute-a-reusable-for-specific-set-of-data","text":"A reusable test case can be executed with a desired set of data by providing the sub iteration index in the Input column. It will fetch the data set from the data sheet with the desired index and use it within the test case. This is very useful when you want to execute the same reusable component, inside a single test case, with different set set of data passed each time.","title":"03. Execute A Reusable For Specific Set Of Data"},{"location":"goodtoknow/#04-looping","text":"NOTE: In Test Design panel, users are only given access to Iteration 1 and its various Subiterations For the above image, Steps 11 to 18 will be executed 2 times (equal to the number of Sub iterations for Iteration 1) For first iteration, data will be taken from Iteration 1 and Subiteration 1 For second iteration, data will be taken from Iteration 1 and Subiteration 2 To repeat an entire Test Case, keep Start Param in the first Step of your test Case and End Param in the last Step of your Test Case. In the above image, we have used End Param:@1 . This will execute Step 11 to 18, once and not twice. To iterate through the entire Test Case for all the sub iterations of data in the data sheet, keep Start Param in the first step and End Param in the last step of your Test Case.","title":"04. Looping"},{"location":"goodtoknow/#05-iterations-and-subiterations-in-test-execution-panel","text":"NOTE: In the Test Execution panel, you are given access to all Iterations and their Sub iterations. In the above image, there are some options given under the Iteration column All : will Iterate through all your Iterations of your datasheet. Single : will only Iterate through Iteration 1 of your datasheet. n:n (Range): will Iterate through a range of iterations. For example, if you use 2:5, then Cognizant Intelligent Test Scripter will only Iterate through Iteration 2 to Iteration 5 even if there are more iterations. n : will allow you to Iterate a particular (nth) iteration in your datasheet. For example, if you use 5, then Cognizant Intelligent Test Scripter iterate only the 5th iteration and all its sub iterations. Note: Subiterations will work according to the definition of Start Param and End Param in the Test Design panel. Looping Without Test Datasheet To repeat few steps, use Start Loop and End Loop:@n . In the above image, Start Loop is at Step 2 and End Loop:@5 is at Step 8. So, Step 2 to 8 will be repeated 5 times.","title":"05. Iterations And Subiterations In Test Execution Panel"},{"location":"goodtoknow/#06-handle-random-actionspop-up-windows","text":"In some applications, there may be components which will originate at random ie. the origination of such components cannot be predicted. This section will describe how to handle such components. Logic Since the origin of some components cannot be predicted, check for the availability of the respective component before or after performing each step. How To Do It? Open ther Engine in Eclipse IDE (or any IDE supporting java development). Navigate to com.cognizant.cognizantits.engine.execution.run . The following actions will be available in this class Annotation : beforeStepExecution :Enter the code to handle the component here ,if you want to perform the check before the execution of each step. afterStepExecution :Enter the code to handle the component here,if you want to perform the check after the execution of each step.","title":"06. Handle Random Actions/Pop up Windows"},{"location":"goodtoknow/#07-how-to-navigate-between-test-data-sheets","text":"Right click on any data sheet and choose the option Search Test Data from the context menu In the Go To Test Data window, choose the test data sheet or the global data sheet to which you want to navigate You will be navigated to the respective sheet after clicking on [OK]","title":"07. How To Navigate between Test Data Sheets?"},{"location":"goodtoknow/#08-how-to-call-autoit-scripts-in-the-tool","text":"To call any .exe file and execute the same directly from the UI, follow the procedure below : Create a test step, under the object name as App , action as openApp and give the path of the exe file under the Input column, as shown below. Now when you run this script, the corresponding .exe file will be executed.","title":"08. How To Call AutoIT scripts in the tool?"},{"location":"goodtoknow/#09-user-defined-variables","text":"User Defined variables can be created and defined by two ways as given below. Using the actions AddVar and AddGlobalVar . AddVar action will let you de\udbc0\udca6ne a variable whose scope is throughout the execution of your test case and is valid for all the sub-iterations of the iteration 1 of your test case. But AddGlobalVar action will let you define a variable whose scope is throughout the execution of your test set. Navigate to Configuration>Run Settings tab and provide your variable name and value under the Property Name and Value columns respectively, as shown in the screen shot below. Click on save for saving your settings. These variables can now be used anywhere in your project, an example of which is shown below. In addition to these, we have certain actions that take variables as input and will store the corresponding result in the variable provided.","title":"09. User Defined Variables"},{"location":"goodtoknow/#10-how-to-change-report-theme","text":"Go to Configuration>Options Theme . From the Reporting theme , select a theme of your choice. You can also toggle between Single * and Group View**. You can choose which columns need to be displayed in the report. Show or hide columns in the report using the show/hide columns option. Check the respective column name checkbox to display that column or uncheck the respective column name checkbox to hide it. Filtering In Report You can filter reports using Global Search or Column Search . Sorting In Report You can sort the reports using the up/down arrows beside each column name.","title":"10. How To Change Report Theme?"},{"location":"goodtoknow/#11-generate-run-time-data","text":"There are options available in the Input column to perform functions like rounding off numbers, generating a random number, concatenating strings, other arithmetic calculations and etc. Follow the steps below to access those options. Consider any action that requires Input column. For instance let us take the Print action. Instead of providing the URL directly, you can concatenate two strings that lead to the URL. Consider the custom method below that uses the Data keyword which will process the concatenate function and open the URL. Note : It is also possible to combine two relevant functions for optimum usage . For example,= Concat(Diaphragm,=Round(360.45)) in the input column will return the following result Diaphragm360 .","title":"11. Generate Run Time Data"},{"location":"goodtoknow/#12-add-custom-functions-for-run-time-data-generation","text":"Navigate to : com.cognizant.cognizantits.engine.util.data.fx; > Functions.java add your custom function as shown below. This is an example of creating a Trim function which will accept a String input and will return a trimmed output. public Object Trim(String... args) { String op = \"\"; try { op = args[0].trim(); } catch (Exception ex) { LOG.log(Level.SEVERE, ex.getMessage(), ex); } return op; }","title":"12. Add Custom Functions For Run Time Data Generation"},{"location":"goodtoknow/#13-enablingdisabling-screenshots-for-passfail","text":"In the report, you will be able to view the screenshots for the steps whose Status is PASS or FAIL . However, you have the option to enable/disable the screenshots for such steps. In the Cognizant Intelligent Test Scripter UI, go to Configurations->Run Settings . Under Screenshot section, you can check/uncheck the Pass or Fail checkboxes in order to enable/disable the screenshots in the report. To enable/disable the screenshots for the entire page, check/uncheck the Take Full Page Screenshot checkbox. Note : Give the status as PASSNS or FAILNS under the Report.updateTestLog() method for PASS status without screenshot or FAIL status without screenshot respectively.","title":"13. Enabling/Disabling screenshots for PASS/FAIL"},{"location":"goodtoknow/#14-execution-in-debug-mode","text":"You can debug the errors in your test case by adding breakpoints to the desired test steps and running the test case in debug mode. Select the steps for which you wish to add a breakpoint, right click and choose Toggle Breakpoint . Right click the Debug button (situated next to the run button), select the browser of your choice and click the Debug button. Once the execution starts, the debug toolbar will appear on top of the screen as shown below. The execution will pause at the step where the breakpoint has been added. You can then debug your test case accordingly. To view the console log, click the button. To pause the execution of the test case, click the button. Once the execution has been paused, you can insert new succeeding steps in the test case or check the object properties using Object Heal and update them. To resume the execution of the test case, click the button. To move to the next step of the test case, click the button. To stop the execution of the test case, click the button. Note : In addition to adding breakpoints to the test steps, you can comment the selected test steps as well, by performing right click and choosing the option Toggle Comments .","title":"14. Execution in debug mode."},{"location":"home/","text":"Introduction CITS is an open-source no code/low code test automation solution that provides a unified interface for all the agile test automation activities such as : * test design * test development * test execution * reporting * maintenance At a Glance Browser Testing API Testing Database Testing WebPage Performance Layout & Accessibility Testing Image Based Testing Uses Selenium Uses java HttpURLConnection Uses JDBC Driver Page and Resource timings report Uses GalenFramework for Layout Validations Uses Sikuli ~280 built-in actions ~25 built-in actions ~15 built-in actions Har Compare Creates PageDump Image comparisons Local and Selenium Grid execution Easy Data parameterisation Easy Data parameterisation Har Comparison Report Auto-suggests Layout Validations Image Text Extractions Parallel Execution Parallel Execution CLI support for Report Uses aXe for Accessibility Tests Image Text Validations Integrated Development Environment (IDE) Easy to get started with build-in record , spy and heal features Quick creation of test flow scaffoldings and boilerplate reusables Reusable components block for reusing scripts Intuitive Test-data parameterisation Environment-based test-data set up and execution (Example: DEV , TEST , ACCEPTANCE ) Built-in Dynamic Data creation actions Platform independent - Can be used in any operating system supporting java, like Windows , MAC , Linux Integrated BDD Built-in Gherkin editor for writing feature files Imports feature files to generate the corresponding Test scenarios, Step Definition scaffoldings and Test Data Generates BDD style reporting afetr execution Azure DevOps Rich command line interface to run test cases and pass propeties and variables at run time Easy to add cli execution commands to Azure DevOps YAML files Generates Nunit report which shows the test results (including execution logs , screenshots , request payloads , response payloads directly in Azure DevOps) Seamless integration into Azure DevOps Test Plans to report back the execution status in the Test Plan Execute failed testcases in a test set automatically after a run Customization Addition of new methods for project specific requirements is possible through the Engine project Enhancing an built-in method is also possible through the same way Incorporation of external libraries is also possible Architecture Comparisons and Limitations Click here to read about the Comparisons with industry standard frameworks and also the limitations of the tool.","title":"**Introduction**"},{"location":"home/#introduction","text":"CITS is an open-source no code/low code test automation solution that provides a unified interface for all the agile test automation activities such as : * test design * test development * test execution * reporting * maintenance","title":"Introduction"},{"location":"home/#at-a-glance","text":"Browser Testing API Testing Database Testing WebPage Performance Layout & Accessibility Testing Image Based Testing Uses Selenium Uses java HttpURLConnection Uses JDBC Driver Page and Resource timings report Uses GalenFramework for Layout Validations Uses Sikuli ~280 built-in actions ~25 built-in actions ~15 built-in actions Har Compare Creates PageDump Image comparisons Local and Selenium Grid execution Easy Data parameterisation Easy Data parameterisation Har Comparison Report Auto-suggests Layout Validations Image Text Extractions Parallel Execution Parallel Execution CLI support for Report Uses aXe for Accessibility Tests Image Text Validations","title":"At a Glance"},{"location":"home/#integrated-development-environment-ide","text":"Easy to get started with build-in record , spy and heal features Quick creation of test flow scaffoldings and boilerplate reusables Reusable components block for reusing scripts Intuitive Test-data parameterisation Environment-based test-data set up and execution (Example: DEV , TEST , ACCEPTANCE ) Built-in Dynamic Data creation actions Platform independent - Can be used in any operating system supporting java, like Windows , MAC , Linux","title":"Integrated Development Environment (IDE)"},{"location":"home/#integrated-bdd","text":"Built-in Gherkin editor for writing feature files Imports feature files to generate the corresponding Test scenarios, Step Definition scaffoldings and Test Data Generates BDD style reporting afetr execution","title":"Integrated BDD"},{"location":"home/#azure-devops","text":"Rich command line interface to run test cases and pass propeties and variables at run time Easy to add cli execution commands to Azure DevOps YAML files Generates Nunit report which shows the test results (including execution logs , screenshots , request payloads , response payloads directly in Azure DevOps) Seamless integration into Azure DevOps Test Plans to report back the execution status in the Test Plan Execute failed testcases in a test set automatically after a run","title":"Azure DevOps"},{"location":"home/#customization","text":"Addition of new methods for project specific requirements is possible through the Engine project Enhancing an built-in method is also possible through the same way Incorporation of external libraries is also possible","title":"Customization"},{"location":"home/#architecture","text":"","title":"Architecture"},{"location":"home/#comparisons-and-limitations","text":"Click here to read about the Comparisons with industry standard frameworks and also the limitations of the tool.","title":"Comparisons and Limitations"},{"location":"image/","text":"Image Based Testing !!! Documentation on this is currently in progress Text imgAssertText Description : This function is used to check if the given expected text is present in the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgVerifyText Description : This function is used to verify if the given expected text is present in the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgStoreText Description : This function is used to store image text in a user-defined variable. Input Format : %Variable_Name% Example: ObjectName Input Condition Image %dynamicVar% imgAssertTextAbove Description : This function is used to check if the expected text is above the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgAssertTextBelow Description : This function is used to check if the expected text is below the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgAssertTextRight Description :This function is used to check if the expected text is at the right to the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgAssertTextLeft Description : This function is used to check if the expected text is at the left of the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgVerifyTextAbove Description : TThis function is used to check if the expected text is above the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgVerifyTextBelow Description : This function is used to check if the expected text is below the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgVerifyTextRight Description : This function is used to check if the expected text is to the right of the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgVerifyTextLeft Description : This function is used to check if the expected text is to the left of the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgStoreTextAbove Description : This function is used to store a text above the object in a user-defined Input Format : %Variable_Name% Example: ObjectName Input Condition Image %dynamicVar% imgStoreTextBelow Description : This function is used to store a text below the object in a user-defined Input Format : %Variable_Name% Example: ObjectName Input Condition Image %dynamicVar% imgStoreTextRight Description : This function is used to store a text to the right of the object in a userdefined variable. Input Format : %Variable_Name% Example: ObjectName Input Condition Image %dynamicVar% imgStoreTextLeft Description : This function is used to store a text to the left of the object in a user-defined variable. Input Format : %Variable_Name% Example: ObjectName Input Condition Image %dynamicVar% Common Image Methods imgClearAndSet Description : This function will clear an image object and then it will set the user provided data in that object. Input Format : @Expected data. Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgSetEncrypted Description : This function is used to enter the encrypted data into image objects. Input Format : @Expected data. Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% Note : If the data is passed from data sheet, then the data in the sheet should be encrypted. imgDoubleClick Description : This function is used to find and double-click the image on the screen. Example: ObjectName Input Condition Image imgVerifyImage Description : This function is used to verify if the image object is on the screen. Example: ObjectName Input Condition Image imgAssertImage Description : This function is used to check if the image is on the screen. Example: ObjectName Input Condition Image imgClick Description : Finds and clicks the image on the screen. Input Format : Give Optional parameter as keyModifiers (i.e., Ctrl/Shift/Alt) Example: ObjectName Input Condition Image Image @value Image Sheet:Column Image %dynamicVar% imgType Description : This function is used for typing any user given data in an image. Input Format : @Expected Data Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% typeOnScreen Description : This function is used to type any text on the screen where the cursor/focus is currently available. Input Format : @Text to be typed Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% imgClearText Description : This function is used to delete the whole text from the image objects such as from a text. Example: ObjectName Input Condition Image imgHover Description : This function is used to hover the mouse over the image object on the screen. Example: ObjectName Input Condition Image imgSet Description : This function is used to set (Paste) the input data on the image. Input Format : @Expected Data Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgRightClick Description : This function is used to right-click the specificed image on the screen. Example: ObjectName Input Condition Image imgWait Description : Waits for the image to appear on the screen Input Format : @time in seconds .If the input column is left empty default time of 10 seconds will be used. Example: ObjectName Input Condition Image Image @value Image Sheet:Column Image %dynamicVar% imgWaitVanish Description : This function is used to wait for the image to disappear from the screen. Input Format : @time in seconds. If the input column is left empty default time of 10 seconds will be used Example: ObjectName Input Condition Image Image @value Image Sheet:Column Image %dynamicVar% imgFindinPage Description : This function is used to find any image on the page within the desired time. Input Format : @Time in miliseconds Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% Mouse imgmouseDown Description : This function is used to perform the mouse down operation. Keys integer value can be given as the input. Input Format : @Keys Integer Representation (16, 8, 4, -1, 1 respectively for mouse left, middle, right, wheel up, wheel down buttons) Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgmouseUp Description : This function is used to perform the mouse up operation. Keys integer value can be given as the input. Input Format : @Keys Integer Representation (16, 8, 4, -1, 1 respectively for mouse left, middle, right, wheel up, and wheel down buttons) Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% moveMouseTO Description : This function will move the mouse to a user-defined location. Input Format : @Location Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% Application shortcutKeys Description : This function is used to perform the keyboard shortcut actions. Input Format : @Combination of keys such as Ctrl+a Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% pressKeys Description :This function is used to perform the keyboard key press actions. After pressing it, do not forget to release the keys. Input Format : @Keyboard Keys like Ctrl,Shift,Alt Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% releaseKeys Description : This function is used to perform release actions of the keyboard keys. It will release an already pressed key. Input Format : @Keyboard Keys like Ctrl,Shift,Alt Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% openApp Description : This function is used to open the given application from your system. Input Format : @App Name [if the path is available in the 'path' environment variable] or App Location. Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% closeApp Description :This function is used to close any application opened by using the openApp action. Input Format : @App Name or App Location Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% focusApp Description : This function is used to focus any application opened by using openApp action. Input Format : @App Name or App Location Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% keyboardKey Description : This function is used to perform single keyboard key events. Input Format : @Keyboard_Key(like Enter,Shift,Ctrl) Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% pageDown Description : This function is used to perform page down actions for desired number of times. Input Format : @No of page down(integer) Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% clickOn Description : This function is used to perform click operations on text. Input Format : @Text, which needs to be clicked. Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% Drag and Drop imgDragandDrop Description : This function is used to drag any image and drop it on another image on the screen. Input Format : @Page Name,Image Object Name Example: ObjectName Input Condition Image @value imgDragandDropAt Description : This function is used to drag an image and drop it in a user-defined region. Input Format :@x coordinate,y coordinate,width,height (All integers) Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgDrag Description : This function is used to drag any image from screen. Example: ObjectName Input Condition Image imgDropAt Description : This function is used to drop the dragged image on the given image object. Be sure that dragging is not already released. Example: ObjectName Input Condition Image takeDesktopScreenShot Description :This function is used to take a screenshot of the entire screen, the screenshot includes the task bar as well if the task bar is visible Example: ObjectName Input Condition App","title":"Image Based Testing"},{"location":"image/#image-based-testing","text":"!!! Documentation on this is currently in progress","title":"Image Based Testing"},{"location":"image/#text","text":"imgAssertText Description : This function is used to check if the given expected text is present in the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgVerifyText Description : This function is used to verify if the given expected text is present in the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgStoreText Description : This function is used to store image text in a user-defined variable. Input Format : %Variable_Name% Example: ObjectName Input Condition Image %dynamicVar% imgAssertTextAbove Description : This function is used to check if the expected text is above the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgAssertTextBelow Description : This function is used to check if the expected text is below the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgAssertTextRight Description :This function is used to check if the expected text is at the right to the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgAssertTextLeft Description : This function is used to check if the expected text is at the left of the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgVerifyTextAbove Description : TThis function is used to check if the expected text is above the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgVerifyTextBelow Description : This function is used to check if the expected text is below the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgVerifyTextRight Description : This function is used to check if the expected text is to the right of the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgVerifyTextLeft Description : This function is used to check if the expected text is to the left of the image object. Input Format : @Expected Text Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgStoreTextAbove Description : This function is used to store a text above the object in a user-defined Input Format : %Variable_Name% Example: ObjectName Input Condition Image %dynamicVar% imgStoreTextBelow Description : This function is used to store a text below the object in a user-defined Input Format : %Variable_Name% Example: ObjectName Input Condition Image %dynamicVar% imgStoreTextRight Description : This function is used to store a text to the right of the object in a userdefined variable. Input Format : %Variable_Name% Example: ObjectName Input Condition Image %dynamicVar% imgStoreTextLeft Description : This function is used to store a text to the left of the object in a user-defined variable. Input Format : %Variable_Name% Example: ObjectName Input Condition Image %dynamicVar%","title":"Text"},{"location":"image/#common-image-methods","text":"imgClearAndSet Description : This function will clear an image object and then it will set the user provided data in that object. Input Format : @Expected data. Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgSetEncrypted Description : This function is used to enter the encrypted data into image objects. Input Format : @Expected data. Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% Note : If the data is passed from data sheet, then the data in the sheet should be encrypted. imgDoubleClick Description : This function is used to find and double-click the image on the screen. Example: ObjectName Input Condition Image imgVerifyImage Description : This function is used to verify if the image object is on the screen. Example: ObjectName Input Condition Image imgAssertImage Description : This function is used to check if the image is on the screen. Example: ObjectName Input Condition Image imgClick Description : Finds and clicks the image on the screen. Input Format : Give Optional parameter as keyModifiers (i.e., Ctrl/Shift/Alt) Example: ObjectName Input Condition Image Image @value Image Sheet:Column Image %dynamicVar% imgType Description : This function is used for typing any user given data in an image. Input Format : @Expected Data Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% typeOnScreen Description : This function is used to type any text on the screen where the cursor/focus is currently available. Input Format : @Text to be typed Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% imgClearText Description : This function is used to delete the whole text from the image objects such as from a text. Example: ObjectName Input Condition Image imgHover Description : This function is used to hover the mouse over the image object on the screen. Example: ObjectName Input Condition Image imgSet Description : This function is used to set (Paste) the input data on the image. Input Format : @Expected Data Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgRightClick Description : This function is used to right-click the specificed image on the screen. Example: ObjectName Input Condition Image imgWait Description : Waits for the image to appear on the screen Input Format : @time in seconds .If the input column is left empty default time of 10 seconds will be used. Example: ObjectName Input Condition Image Image @value Image Sheet:Column Image %dynamicVar% imgWaitVanish Description : This function is used to wait for the image to disappear from the screen. Input Format : @time in seconds. If the input column is left empty default time of 10 seconds will be used Example: ObjectName Input Condition Image Image @value Image Sheet:Column Image %dynamicVar% imgFindinPage Description : This function is used to find any image on the page within the desired time. Input Format : @Time in miliseconds Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar%","title":"Common Image Methods"},{"location":"image/#mouse","text":"imgmouseDown Description : This function is used to perform the mouse down operation. Keys integer value can be given as the input. Input Format : @Keys Integer Representation (16, 8, 4, -1, 1 respectively for mouse left, middle, right, wheel up, wheel down buttons) Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgmouseUp Description : This function is used to perform the mouse up operation. Keys integer value can be given as the input. Input Format : @Keys Integer Representation (16, 8, 4, -1, 1 respectively for mouse left, middle, right, wheel up, and wheel down buttons) Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% moveMouseTO Description : This function will move the mouse to a user-defined location. Input Format : @Location Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar%","title":"Mouse"},{"location":"image/#application","text":"shortcutKeys Description : This function is used to perform the keyboard shortcut actions. Input Format : @Combination of keys such as Ctrl+a Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% pressKeys Description :This function is used to perform the keyboard key press actions. After pressing it, do not forget to release the keys. Input Format : @Keyboard Keys like Ctrl,Shift,Alt Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% releaseKeys Description : This function is used to perform release actions of the keyboard keys. It will release an already pressed key. Input Format : @Keyboard Keys like Ctrl,Shift,Alt Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% openApp Description : This function is used to open the given application from your system. Input Format : @App Name [if the path is available in the 'path' environment variable] or App Location. Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% closeApp Description :This function is used to close any application opened by using the openApp action. Input Format : @App Name or App Location Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% focusApp Description : This function is used to focus any application opened by using openApp action. Input Format : @App Name or App Location Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% keyboardKey Description : This function is used to perform single keyboard key events. Input Format : @Keyboard_Key(like Enter,Shift,Ctrl) Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% pageDown Description : This function is used to perform page down actions for desired number of times. Input Format : @No of page down(integer) Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar% clickOn Description : This function is used to perform click operations on text. Input Format : @Text, which needs to be clicked. Example: ObjectName Input Condition App @value App Sheet:Column App %dynamicVar%","title":"Application"},{"location":"image/#drag-and-drop","text":"imgDragandDrop Description : This function is used to drag any image and drop it on another image on the screen. Input Format : @Page Name,Image Object Name Example: ObjectName Input Condition Image @value imgDragandDropAt Description : This function is used to drag an image and drop it in a user-defined region. Input Format :@x coordinate,y coordinate,width,height (All integers) Example: ObjectName Input Condition Image @value Image Sheet:Column Image %dynamicVar% imgDrag Description : This function is used to drag any image from screen. Example: ObjectName Input Condition Image imgDropAt Description : This function is used to drop the dragged image on the given image object. Be sure that dragging is not already released. Example: ObjectName Input Condition Image takeDesktopScreenShot Description :This function is used to take a screenshot of the entire screen, the screenshot includes the task bar as well if the task bar is visible Example: ObjectName Input Condition App","title":"Drag and Drop"},{"location":"knowyourtool/","text":"Know The Tool Menu Ribbon 1. Tools 2. Execution ## Test Design Pane This is where the test cases are designed and debugged. On opening the tool, the user by default lands on this pane. The Design Pane is composed of the following 5 components : ### 1. Test Plan This where the Test Scenarios and Test Cases are created and organized. Every Scenario in the tool's UI , is a Directory in the backend and every Test case is a .csv file. To see this, you can navigate to the location of your tool, then Projects >> Your Project >> Test Plan If you select a Scenario or Test Case and Right Click , you will have some interesting and handy options to work with : ### 2. Reusable Components This where the Reusable Test Scenarios and Test Cases ( logical grouping of test steps ) are created and organized. Every Scenario in the tool's UI , is a Directory in the backend and every Test case is a .csv file. To see this, you can navigate to the location of your tool, then Projects >> Your Project >> Test Plan What differentiates the Scenarios and Test Cases in the Test Plan compared to those in the Reusable Component is the purpose : * Test Plan is supposed contain Functional/Regression/E2E/Business Test Cases * Reusable Component is supposed contain logical test step groupings, to be used in multiple test cases in the test plan. The tool makes use of the ReusableComponent.xml located in the Project Location, to differentiate between the above 2 type : Here is the ReusableComponent.xml for the above example : ```xml ``` If you select a Reusable Scenario or Reusable Test Case and Right Click , you will have some interesting and handy options to work with : ### 3. Test Steps This is the canvas where you have your test steps in sequential order To make working simple, intuitive and easy, you can also use the drag and drop to create test steps. In the following example, we can create the Checkout Reusable simply by dragging and dropping the objects from the Object Repository and parameterizing them by dragging and dropping the datasheet columns The above image is a gif. So if its not moving, please reload the page As a best practice, it is advisable to compose your test case only with Reusables and not have any loose (orphan) steps. You can also drag and drop the Reusables to create test cases like this : The above image is a gif. So if its not moving, please reload the page 4. Test Data This is the area where you can set up your test data in multiple sheets. Set up Multiple Environments To set up environment based execution, you can set up mutiple environments following the 5 steps as below : Step 1 : From Test Data >> Make sure Multiple Environments is selected Step 2 : Click the [+] icon in the Data Section, to add a new Environment Step 3 : Enter the [Environment] Name Step 4 : Check [Copy Data from Other Environments] Step 5 : Select the Environment and the corresponding Data sheets to be copied and then click [Create] Button If you select a data cell and Right Click , you will have some interesting and handy options to work with : 5. Object Repository This is the area where the Web Elements/Objects are present along with the multiple attributes/properties to be used to find that element on the Application. If any of the properties gets changed or updated in the application, the tool will try to use the next property in the list to identify and loop through the entire list, till it finds a unique match. If you select a Property and Right Click , you will have some interesting and handy options to work with. These options are applicable to used for : Selected Object All objects in the Page All Objects in the OR Test Execution Pane In this pane we can club our test cases together into logical test sets or test suites and execute them - Either locally or via a CICD pipeline. Step 1 : Right Click on the Project Name >> Add Release >> Right Click on the Release Name >> Add TestSet Step 2 : Select the test cases that you want to add to the set. You can do individual selections or bulk selection by simply selecting the entire Scenario. Once selected, click on the Green <--- Arrow to pull your selections into the set. Step 3 : Order the Test Cases in the sequence of your choice. Choose the appropriate Browsers. Step 4 : Click on the gear icon and open up the Run Settings . Here you can configure many settings like : Parallel Thread count Execution Mode as Grid or Local Which Environment to pick for execution Once done, we are good to start our execution by clicking on the Green Play/Run button Dashboard Pane In this pane we can view the detailed summary report and even access historical individual reports. The Detailed Summary Report tab looks like this : The Latest Summary Report tab looks like this :","title":"Know the Tool"},{"location":"knowyourtool/#know-the-tool","text":"","title":"Know The Tool"},{"location":"knowyourtool/#menu-ribbon","text":"","title":"Menu Ribbon"},{"location":"knowyourtool/#1-tools","text":"","title":"1. Tools"},{"location":"knowyourtool/#2-execution","text":"## Test Design Pane This is where the test cases are designed and debugged. On opening the tool, the user by default lands on this pane. The Design Pane is composed of the following 5 components : ### 1. Test Plan This where the Test Scenarios and Test Cases are created and organized. Every Scenario in the tool's UI , is a Directory in the backend and every Test case is a .csv file. To see this, you can navigate to the location of your tool, then Projects >> Your Project >> Test Plan If you select a Scenario or Test Case and Right Click , you will have some interesting and handy options to work with : ### 2. Reusable Components This where the Reusable Test Scenarios and Test Cases ( logical grouping of test steps ) are created and organized. Every Scenario in the tool's UI , is a Directory in the backend and every Test case is a .csv file. To see this, you can navigate to the location of your tool, then Projects >> Your Project >> Test Plan What differentiates the Scenarios and Test Cases in the Test Plan compared to those in the Reusable Component is the purpose : * Test Plan is supposed contain Functional/Regression/E2E/Business Test Cases * Reusable Component is supposed contain logical test step groupings, to be used in multiple test cases in the test plan. The tool makes use of the ReusableComponent.xml located in the Project Location, to differentiate between the above 2 type : Here is the ReusableComponent.xml for the above example : ```xml ``` If you select a Reusable Scenario or Reusable Test Case and Right Click , you will have some interesting and handy options to work with : ### 3. Test Steps This is the canvas where you have your test steps in sequential order To make working simple, intuitive and easy, you can also use the drag and drop to create test steps. In the following example, we can create the Checkout Reusable simply by dragging and dropping the objects from the Object Repository and parameterizing them by dragging and dropping the datasheet columns The above image is a gif. So if its not moving, please reload the page As a best practice, it is advisable to compose your test case only with Reusables and not have any loose (orphan) steps. You can also drag and drop the Reusables to create test cases like this : The above image is a gif. So if its not moving, please reload the page","title":"2. Execution"},{"location":"knowyourtool/#4-test-data","text":"This is the area where you can set up your test data in multiple sheets.","title":"4. Test Data"},{"location":"knowyourtool/#set-up-multiple-environments","text":"To set up environment based execution, you can set up mutiple environments following the 5 steps as below : Step 1 : From Test Data >> Make sure Multiple Environments is selected Step 2 : Click the [+] icon in the Data Section, to add a new Environment Step 3 : Enter the [Environment] Name Step 4 : Check [Copy Data from Other Environments] Step 5 : Select the Environment and the corresponding Data sheets to be copied and then click [Create] Button If you select a data cell and Right Click , you will have some interesting and handy options to work with :","title":"Set up Multiple Environments"},{"location":"knowyourtool/#5-object-repository","text":"This is the area where the Web Elements/Objects are present along with the multiple attributes/properties to be used to find that element on the Application. If any of the properties gets changed or updated in the application, the tool will try to use the next property in the list to identify and loop through the entire list, till it finds a unique match. If you select a Property and Right Click , you will have some interesting and handy options to work with. These options are applicable to used for : Selected Object All objects in the Page All Objects in the OR","title":"5. Object Repository"},{"location":"knowyourtool/#test-execution-pane","text":"In this pane we can club our test cases together into logical test sets or test suites and execute them - Either locally or via a CICD pipeline. Step 1 : Right Click on the Project Name >> Add Release >> Right Click on the Release Name >> Add TestSet Step 2 : Select the test cases that you want to add to the set. You can do individual selections or bulk selection by simply selecting the entire Scenario. Once selected, click on the Green <--- Arrow to pull your selections into the set. Step 3 : Order the Test Cases in the sequence of your choice. Choose the appropriate Browsers. Step 4 : Click on the gear icon and open up the Run Settings . Here you can configure many settings like : Parallel Thread count Execution Mode as Grid or Local Which Environment to pick for execution Once done, we are good to start our execution by clicking on the Green Play/Run button","title":"Test Execution Pane"},{"location":"knowyourtool/#dashboard-pane","text":"In this pane we can view the detailed summary report and even access historical individual reports. The Detailed Summary Report tab looks like this : The Latest Summary Report tab looks like this :","title":"Dashboard Pane"},{"location":"layout/","text":"Layout Validation !!! Documentation on this is currently in progress CSS properties assertElementCssPropEquals Description : This function will validate if the specified Css Property for an element is equal to the user-provided value. Syntax : ObjectName Input Condition ObjectName @Css Property value Example: ObjectName Input Condition ObjectName @font-size 17 px assertElementCssPropContains Description : This function will validate if the specified Css Property for an element contains the user-provided value. Syntax : ObjectName Input Condition ObjectName @Css Property value Example: ObjectName Input Condition ObjectName @font-family sans-serif assertElementCssPropEndsWith Description : This function will validate if the specified Css Property for an element ends with the user-provided value. Syntax : ObjectName Input Condition ObjectName @Css Property value Example: ObjectName Input Condition ObjectName @font-size 17 px assertElementCssPropMatches Description : This function will validate if the specified Css Property for an element matches with the user-provided value. User can use regular expression also in input field. Syntax : ObjectName Input Condition ObjectName @Css Property value Example: ObjectName Input Condition ObjectName @font-family (.)Arial(.) assertElementCssPropStartsWith Description : This function will validate if the specified Css Property for an element begins with the user-provided value. Syntax : ObjectName Input Condition ObjectName @Css Property value Example: ObjectName Input Condition ObjectName @font-family Helvetica On assertElementOnTopLeft Description : TThis function verifies if the element is moved from another element from a specified corner. Visually it could be considered as if one element is placed at the top left of another element. Input Format : Locations Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Label @20 px left, 10 px bottom user picture NOTE : To avoid typing the name of the secondary object, you can simply drag the object and drop the object from the OR(Object Repository) in to the Condition Column. assertElementOnTopRight Description : This function verifies if the element is moved from another element from a specified corner. Visually it could be considered as if one element is placed at the top right of another element. Input Format : Locations Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition item1 @20 px left, 10 px bottom item2 assertElementOnBottomLeft Description : This function verifies if the element is moved from another element from a specified corner. Visually it could be considered as if one element is placed at the bottom left of another element Input Format : Locations Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition item1 @20 px left, 10 px bottom item2 assertElementOnBottomRight Description : This function verifies if the element is moved from another element from a specified corner. Visually it could be considered as if one element is placed at the bottom right of another element. Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition item1 @20 px left, 10 px bottom item2 Centered assertElementCenteredAInside Description : It allows to verify if the element is completely centered within another element with the user-defined error rate. Useful in case of responsive Web Design applications. Input Format : Range or empty Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Button Box Button @10px Box assertElementCenteredAOn Description : It allows to verify that the element is completely centered on top of another element with user-defined error rate. Useful in case of responsive Web Design applications. Input Format : Range or empty Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Button Box Button @10px Box assertElementCenteredHOn Description : It allows to verify if the element is horizontally centered on top of another element with the user-defined error rate. Useful in case of responsive Web Design applications. Input Format : Range or empty Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Button Box Button @10px Box assertElementCenteredHInside Description : It allows to verify if the element is horizontally centered within another element with the user-defined error rate. Useful in case of responsive Web Design applications. Input Format : Range or empty Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Button Box Button @10px Box assertElementCenteredVOn Description : It allows to verify if the element is vertically centered on top of another element with the user-defined error rate. Useful in case of responsive Web Design applications. Input Format : Range or empty Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Button Box Button @10px Box assertElementCenteredVInside Description :This function will validate if the given image matches with the speci Input Format : Image file location Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Button Box Button @10px Box Image assertElementImage Description : This function is used to add a user-defined variable with a desired value and the scope of this variable is till the end of the test case in which it is defined Syntax : ObjectName Input Condition ObjectToBeCompared @Parameter Example: The step given below will compare object on the screen pixel to pixel with image imagefolder/image1.png and will notify if the amount of mismatching pixel is higher than 10 pixels that is allowed maximum. ObjectName Input Condition Item1 @file imagefolder/image1.png, error 10 px You can also change the assertion from absolute pixels values to percentage. ObjectName Input Condition Item1 @file imagefolder/image1.png, error 4% When comparing images of different sizes, we place one image on top of another and assume that the missing pixels are of black color. You can change this behavior by stretching the image to ObjectName Input Condition Item1 @file imgs/menu-item-1.png, error 4%, stretch You can also define an area which should be used from the sample image as given below. The area parameter takes 4 values: left, top, width, and height. ObjectName Input Condition Item1 @file imgs/menu-item-1.png, error 4%, area 10 10 100 30 Sometimes you may have different images for different browsers and this will break all your tests. For such cases, you can define different image samples in one step as given below. ObjectName Input Condition Item1 @file imagefolder/image1.png, imagefolder/image2.png, imagefolder/image3.png, error 20 px Sometimes you may want to apply some filters to compared images to have a smarter image comparison. For an instance, you can apply blur to images. This might be handy if the compared image has generated noise. Or, you can also apply denoise ObjectName Input Condition Item1 @file item-1.png, error 1%,filter saturation 0, map-filter denoise 5 If you want to apply filter only to the original image, you can use filter-a expression as given below. ObjectName Input Condition Item1 @file imgs/item-1.png, filter-a blur 10, error 4% If you want to apply a specific filter only to a sample image, you can use filter-b expression as given below. ObjectName Input Condition Item1 @file imgs/login-button.png, filter-b contrast 200, error 4% Following will happen as a result of this check : * Cognizant Intelligent Test Scripter takes both images and applies blur filter with radius 4. * It applies saturation filter with Level 0. That is, complete loss of color and change of images color to Grey. * It compares the image and builds a comparison map. * After these operations, it applies denoise filter with radius 5 pixels and removes noise from the generated map. * After all these operations, it counts the mismatching pixels. List of all available image filters blur < radius> - Blurs the image with the given radius of blur. saturation < level> -Removes the colors with the given level. Zero value means complete loss of colors. At 100 value all the colors are left the same. At Level 50 the image is colored by half. contrast < level> - Increases the contrast. The allowed range for level is between 0 to 258. denoise < radius> - Removes noise from image. It is applicable only as a map-filter as it only works with black/white images. quantinize < colorsAmount> - Makes less colors on the image. Align assertElementAlignedHoriz Description : This function will validate Horizontal Alignment of an object with another object. Input Format : alignment error rate in px Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition item1 @all item2 item1 @all 10px item2 ObjectName Input Condition PrimaryObject @top item2 PrimaryObject @top 10px item2 ObjectName Input Condition item1 @bottom item2 item1 @bottom 10px item2 item1 @centered item2 item1 @centered 10px item2 assertElementAlignedVert Description : This function will validate the Vertical Alignment of an object with another object. Input Format : alignment error rate in px. Syntax: ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition item1 @all item2 item1 @all 10px item2 PrimaryObject @left SecondaryObject PrimaryObject @left 10px SecondaryObject ObjectName Input Condition item1 @right item2 item1 @right 10px item2 item1 @centered item2 item1 @centered 10px item2 Near assertElementNear Description : This function will validate if the specified element is placed near another element. Input Format :Locations Syntax: ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition textfield @10 px left button ObjectName Input Condition button @10 px right textfield ObjectName Input Condition textfield @5 px top button ObjectName Input Condition button @5 px bottom textfield ObjectName Input Condition textfield @5 px bottom left button ObjectName Input Condition button @5 px top right textfield ObjectName Input Condition textfield @5 px top, 10 px left button Pagedump createPageDump Description :This function will create page dump for the user specified page. Input Format : PageName from ObjectRepository. Syntax: ObjectName Input Condition Browser @PageNameInObjectRepository Example: ObjectName Input Condition Browser @Sample Contains highlight Description : This function will validate if specified element has a list of specified elements. Input Format : Color in hexcode like @#ff44ff . If it is left empty red will be taken as default. Syntax: ObjectName Input Condition Browser SecondarObjectName/RegularExpression Example: *To check if an element contains another element ObjectName Input Condition item1 item2 *To check if an element contains more than one elements ObjectName Input Condition item1 (item2 or item2 or item3) *You can also use asterisk to match all other objects. For if we have an object menu and in it there other object like: menu-item1, menu-item2, menu-item3 ObjectName Input Condition menu item-(.*) assertElementContainsPartly Description : This function is used when an element is not completely within another element. Syntax: ObjectName Input Condition Browser SecondarObjectName/RegularExpression Example: ObjectName Input Condition item1 item2 item1 (item1 or item2 or item3) menu item-(.*) ColorScheme assertElementColorScheme Description : This function verifies color distribution on object area. Galen takes a picture and then calculates the object\u2019s area color spectrum so that you can later verify the usage for specific colors. Input Format : @Expected color distribution. Syntax: ObjectName Input Condition ObjectName @Parameter Example: ObjectName Input Condition ObjectName @50% white, 4 to 5 % black, 30% #f845b7 Inside assertElementInsidePartly Description : This function will validate if the specified element is placed partly within another element. Input Format : Locations Syntax: ObjectName Input Condition PrimaryObject @Parameter SecondaryObject Example: ObjectName Input Condition button box button @10 px top container button @10 px bottom container button @10 px left container button @10 px right container button @10 px top left container ObjectName Input Condition button @10 px left right, 20 px top bottom container assertElementInside Description : This function will validate if the specified element lies within another element. Input Format : Locations Syntax: ObjectName Input Condition PrimaryObject @Parameter SecondaryObject Example: ObjectName Input Condition button box ObjectName Input Condition button @10 px top container button @10 px bottom container button @10 px left container button @10 px right container button @10 px top left container ObjectName Input Condition button @10 px left right, 20 px top bottom container Direction assertElementAbove Description : This function will validate if an element is present above another element. Input Format :Range [optional] Syntax: ObjectName Input Condition PrimaryObject @Parameter SecondaryObject Example: ObjectName Input Condition caption @15 px Secondary ObjectName assertElementBelow Description : This function will validate if an element is below another element. Input Format :Range [optional] Syntax: ObjectName Input Condition PrimaryObject @Parameter SecondaryObject Example: ObjectName Input Condition caption @15 px Secondary ObjectName assertElementLeftOf Description : This function will validate if the specified element is placed to the left of another element. Input Format : Range in px Syntax: ObjectName Input Condition Browser @Parameter SecondaryObject Example: ObjectName Input Condition caption @10 px Secondary ObjectName assertElementRightOf Description : This function will validate if the specified element is placed at the right of another element. Syntax: ObjectName Input Condition Browser @Parameter SecondaryObject Example: ObjectName Input Condition caption @10 px Secondary ObjectName Width and Height assertElementWidthElement Description : This function will validate the width of the specified object with respect to the width of another element. Input Format : @Parameter Syntax: ObjectName Input Condition Primary Object @Parameter Secondary Objectname/screen/viewport Primary Object @50 px Secondary Objectname assertElementHeightElement Description : This function will validate the height of the specified object with respect to the height of another element. Input Format : Range in % Syntax: ObjectName Input Condition Primary Object @Parameter Secondary Objectname/screen/viewport Primary Object @50% Secondary Objectname assertElementWidth Description : This function will verify the width of an object with an user provided data. Input Format :@Parameter Syntax: ObjectName Input Condition Primary Object @Parameter Example: ObjectName Input Condition ObjectName @50 px assertElementHeight Description : This function will verify the height of an object with an expected data. Input Format : @Parameter Syntax: ObjectName Input Condition Primary Object @Parameter Example: ObjectName Input Condition PrimaryObjectName @50 px","title":"Layout Validation"},{"location":"layout/#layout-validation","text":"!!! Documentation on this is currently in progress","title":"Layout Validation"},{"location":"layout/#css-properties","text":"assertElementCssPropEquals Description : This function will validate if the specified Css Property for an element is equal to the user-provided value. Syntax : ObjectName Input Condition ObjectName @Css Property value Example: ObjectName Input Condition ObjectName @font-size 17 px assertElementCssPropContains Description : This function will validate if the specified Css Property for an element contains the user-provided value. Syntax : ObjectName Input Condition ObjectName @Css Property value Example: ObjectName Input Condition ObjectName @font-family sans-serif assertElementCssPropEndsWith Description : This function will validate if the specified Css Property for an element ends with the user-provided value. Syntax : ObjectName Input Condition ObjectName @Css Property value Example: ObjectName Input Condition ObjectName @font-size 17 px assertElementCssPropMatches Description : This function will validate if the specified Css Property for an element matches with the user-provided value. User can use regular expression also in input field. Syntax : ObjectName Input Condition ObjectName @Css Property value Example: ObjectName Input Condition ObjectName @font-family (.)Arial(.) assertElementCssPropStartsWith Description : This function will validate if the specified Css Property for an element begins with the user-provided value. Syntax : ObjectName Input Condition ObjectName @Css Property value Example: ObjectName Input Condition ObjectName @font-family Helvetica","title":"CSS properties"},{"location":"layout/#on","text":"assertElementOnTopLeft Description : TThis function verifies if the element is moved from another element from a specified corner. Visually it could be considered as if one element is placed at the top left of another element. Input Format : Locations Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Label @20 px left, 10 px bottom user picture NOTE : To avoid typing the name of the secondary object, you can simply drag the object and drop the object from the OR(Object Repository) in to the Condition Column. assertElementOnTopRight Description : This function verifies if the element is moved from another element from a specified corner. Visually it could be considered as if one element is placed at the top right of another element. Input Format : Locations Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition item1 @20 px left, 10 px bottom item2 assertElementOnBottomLeft Description : This function verifies if the element is moved from another element from a specified corner. Visually it could be considered as if one element is placed at the bottom left of another element Input Format : Locations Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition item1 @20 px left, 10 px bottom item2 assertElementOnBottomRight Description : This function verifies if the element is moved from another element from a specified corner. Visually it could be considered as if one element is placed at the bottom right of another element. Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition item1 @20 px left, 10 px bottom item2","title":"On"},{"location":"layout/#centered","text":"assertElementCenteredAInside Description : It allows to verify if the element is completely centered within another element with the user-defined error rate. Useful in case of responsive Web Design applications. Input Format : Range or empty Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Button Box Button @10px Box assertElementCenteredAOn Description : It allows to verify that the element is completely centered on top of another element with user-defined error rate. Useful in case of responsive Web Design applications. Input Format : Range or empty Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Button Box Button @10px Box assertElementCenteredHOn Description : It allows to verify if the element is horizontally centered on top of another element with the user-defined error rate. Useful in case of responsive Web Design applications. Input Format : Range or empty Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Button Box Button @10px Box assertElementCenteredHInside Description : It allows to verify if the element is horizontally centered within another element with the user-defined error rate. Useful in case of responsive Web Design applications. Input Format : Range or empty Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Button Box Button @10px Box assertElementCenteredVOn Description : It allows to verify if the element is vertically centered on top of another element with the user-defined error rate. Useful in case of responsive Web Design applications. Input Format : Range or empty Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Button Box Button @10px Box assertElementCenteredVInside Description :This function will validate if the given image matches with the speci Input Format : Image file location Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition Button Box Button @10px Box","title":"Centered"},{"location":"layout/#image","text":"assertElementImage Description : This function is used to add a user-defined variable with a desired value and the scope of this variable is till the end of the test case in which it is defined Syntax : ObjectName Input Condition ObjectToBeCompared @Parameter Example: The step given below will compare object on the screen pixel to pixel with image imagefolder/image1.png and will notify if the amount of mismatching pixel is higher than 10 pixels that is allowed maximum. ObjectName Input Condition Item1 @file imagefolder/image1.png, error 10 px You can also change the assertion from absolute pixels values to percentage. ObjectName Input Condition Item1 @file imagefolder/image1.png, error 4% When comparing images of different sizes, we place one image on top of another and assume that the missing pixels are of black color. You can change this behavior by stretching the image to ObjectName Input Condition Item1 @file imgs/menu-item-1.png, error 4%, stretch You can also define an area which should be used from the sample image as given below. The area parameter takes 4 values: left, top, width, and height. ObjectName Input Condition Item1 @file imgs/menu-item-1.png, error 4%, area 10 10 100 30 Sometimes you may have different images for different browsers and this will break all your tests. For such cases, you can define different image samples in one step as given below. ObjectName Input Condition Item1 @file imagefolder/image1.png, imagefolder/image2.png, imagefolder/image3.png, error 20 px Sometimes you may want to apply some filters to compared images to have a smarter image comparison. For an instance, you can apply blur to images. This might be handy if the compared image has generated noise. Or, you can also apply denoise ObjectName Input Condition Item1 @file item-1.png, error 1%,filter saturation 0, map-filter denoise 5 If you want to apply filter only to the original image, you can use filter-a expression as given below. ObjectName Input Condition Item1 @file imgs/item-1.png, filter-a blur 10, error 4% If you want to apply a specific filter only to a sample image, you can use filter-b expression as given below. ObjectName Input Condition Item1 @file imgs/login-button.png, filter-b contrast 200, error 4% Following will happen as a result of this check : * Cognizant Intelligent Test Scripter takes both images and applies blur filter with radius 4. * It applies saturation filter with Level 0. That is, complete loss of color and change of images color to Grey. * It compares the image and builds a comparison map. * After these operations, it applies denoise filter with radius 5 pixels and removes noise from the generated map. * After all these operations, it counts the mismatching pixels. List of all available image filters blur < radius> - Blurs the image with the given radius of blur. saturation < level> -Removes the colors with the given level. Zero value means complete loss of colors. At 100 value all the colors are left the same. At Level 50 the image is colored by half. contrast < level> - Increases the contrast. The allowed range for level is between 0 to 258. denoise < radius> - Removes noise from image. It is applicable only as a map-filter as it only works with black/white images. quantinize < colorsAmount> - Makes less colors on the image.","title":"Image"},{"location":"layout/#align","text":"assertElementAlignedHoriz Description : This function will validate Horizontal Alignment of an object with another object. Input Format : alignment error rate in px Syntax : ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition item1 @all item2 item1 @all 10px item2 ObjectName Input Condition PrimaryObject @top item2 PrimaryObject @top 10px item2 ObjectName Input Condition item1 @bottom item2 item1 @bottom 10px item2 item1 @centered item2 item1 @centered 10px item2 assertElementAlignedVert Description : This function will validate the Vertical Alignment of an object with another object. Input Format : alignment error rate in px. Syntax: ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition item1 @all item2 item1 @all 10px item2 PrimaryObject @left SecondaryObject PrimaryObject @left 10px SecondaryObject ObjectName Input Condition item1 @right item2 item1 @right 10px item2 item1 @centered item2 item1 @centered 10px item2","title":"Align"},{"location":"layout/#near","text":"assertElementNear Description : This function will validate if the specified element is placed near another element. Input Format :Locations Syntax: ObjectName Input Condition PrimaryObjectName @Parameter SecondaryObjectName Example: ObjectName Input Condition textfield @10 px left button ObjectName Input Condition button @10 px right textfield ObjectName Input Condition textfield @5 px top button ObjectName Input Condition button @5 px bottom textfield ObjectName Input Condition textfield @5 px bottom left button ObjectName Input Condition button @5 px top right textfield ObjectName Input Condition textfield @5 px top, 10 px left button","title":"Near"},{"location":"layout/#pagedump","text":"createPageDump Description :This function will create page dump for the user specified page. Input Format : PageName from ObjectRepository. Syntax: ObjectName Input Condition Browser @PageNameInObjectRepository Example: ObjectName Input Condition Browser @Sample","title":"Pagedump"},{"location":"layout/#contains","text":"highlight Description : This function will validate if specified element has a list of specified elements. Input Format : Color in hexcode like @#ff44ff . If it is left empty red will be taken as default. Syntax: ObjectName Input Condition Browser SecondarObjectName/RegularExpression Example: *To check if an element contains another element ObjectName Input Condition item1 item2 *To check if an element contains more than one elements ObjectName Input Condition item1 (item2 or item2 or item3) *You can also use asterisk to match all other objects. For if we have an object menu and in it there other object like: menu-item1, menu-item2, menu-item3 ObjectName Input Condition menu item-(.*) assertElementContainsPartly Description : This function is used when an element is not completely within another element. Syntax: ObjectName Input Condition Browser SecondarObjectName/RegularExpression Example: ObjectName Input Condition item1 item2 item1 (item1 or item2 or item3) menu item-(.*)","title":"Contains"},{"location":"layout/#colorscheme","text":"assertElementColorScheme Description : This function verifies color distribution on object area. Galen takes a picture and then calculates the object\u2019s area color spectrum so that you can later verify the usage for specific colors. Input Format : @Expected color distribution. Syntax: ObjectName Input Condition ObjectName @Parameter Example: ObjectName Input Condition ObjectName @50% white, 4 to 5 % black, 30% #f845b7","title":"ColorScheme"},{"location":"layout/#inside","text":"assertElementInsidePartly Description : This function will validate if the specified element is placed partly within another element. Input Format : Locations Syntax: ObjectName Input Condition PrimaryObject @Parameter SecondaryObject Example: ObjectName Input Condition button box button @10 px top container button @10 px bottom container button @10 px left container button @10 px right container button @10 px top left container ObjectName Input Condition button @10 px left right, 20 px top bottom container assertElementInside Description : This function will validate if the specified element lies within another element. Input Format : Locations Syntax: ObjectName Input Condition PrimaryObject @Parameter SecondaryObject Example: ObjectName Input Condition button box ObjectName Input Condition button @10 px top container button @10 px bottom container button @10 px left container button @10 px right container button @10 px top left container ObjectName Input Condition button @10 px left right, 20 px top bottom container","title":"Inside"},{"location":"layout/#direction","text":"assertElementAbove Description : This function will validate if an element is present above another element. Input Format :Range [optional] Syntax: ObjectName Input Condition PrimaryObject @Parameter SecondaryObject Example: ObjectName Input Condition caption @15 px Secondary ObjectName assertElementBelow Description : This function will validate if an element is below another element. Input Format :Range [optional] Syntax: ObjectName Input Condition PrimaryObject @Parameter SecondaryObject Example: ObjectName Input Condition caption @15 px Secondary ObjectName assertElementLeftOf Description : This function will validate if the specified element is placed to the left of another element. Input Format : Range in px Syntax: ObjectName Input Condition Browser @Parameter SecondaryObject Example: ObjectName Input Condition caption @10 px Secondary ObjectName assertElementRightOf Description : This function will validate if the specified element is placed at the right of another element. Syntax: ObjectName Input Condition Browser @Parameter SecondaryObject Example: ObjectName Input Condition caption @10 px Secondary ObjectName","title":"Direction"},{"location":"layout/#width-and-height","text":"assertElementWidthElement Description : This function will validate the width of the specified object with respect to the width of another element. Input Format : @Parameter Syntax: ObjectName Input Condition Primary Object @Parameter Secondary Objectname/screen/viewport Primary Object @50 px Secondary Objectname assertElementHeightElement Description : This function will validate the height of the specified object with respect to the height of another element. Input Format : Range in % Syntax: ObjectName Input Condition Primary Object @Parameter Secondary Objectname/screen/viewport Primary Object @50% Secondary Objectname assertElementWidth Description : This function will verify the width of an object with an user provided data. Input Format :@Parameter Syntax: ObjectName Input Condition Primary Object @Parameter Example: ObjectName Input Condition ObjectName @50 px assertElementHeight Description : This function will verify the height of an object with an expected data. Input Format : @Parameter Syntax: ObjectName Input Condition Primary Object @Parameter Example: ObjectName Input Condition PrimaryObjectName @50 px","title":"Width and Height"},{"location":"shortcuts/","text":"Shortcuts File Menu Shortcut Keys Description Ctrl + Shift + N Create a new project Ctrl + Shift+ O Open an existing project Ctrl + Shift+ S Save All F1 Open Help File Launch Utilities Shortcut Keys Description Ctrl + Alt +p Start Spy from the UI and open Spy window Ctrl + Alt +H Start Heal from the UI and open Heal window Alt + S To start Spy during Heal Ctrl + Alt + I Start Image Spy Ctrl + Alt + M Start Mobile Spy Ctrl + Alt + R Start Recording Navigation Shortcut Keys Description Alt+ shift + N Navigate to TEST DESIGN panel Alt+ shift + E Navigate to TEST EXECUTION panel Alt+ shift + D Navigate to DASHBOARD Alt+ shift + A Adjust UI Workspace Shortcut Keys Description Ctrl + Plus Add row Ctrl + Minus Delete rows Ctrl + B Toggle Breakpoint Ctrl + / Toggle Comment Test Data Table Shortcut Keys Description Ctrl + Plus Add row Ctrl + Minus Remove row Left Double Click Edit header/ cell data Common Shortcut Keys Description F2 Rename Del Delete Ctrl + X Cut Ctrl + C Copy Ctrl + V Paste Help Shortcut Keys Description F1 Open Help File F3 To go to next search Shift +F3 To go to previous search F5 Reload Mobile Spy Shortcut Keys Description Ctrl + Alt+M Open Mobile Spy Alt + F4 Exit Mobile Spy Ctrl + L Load the Screen of connected device Ctrl + Alt + M Map the current view to the Selected Page Ctrl + Alt + L Load the mapped View from Selected Page Ctrl + o Load a View from a selected file Others Shortcut Keys Description F9 Show Log Ctrl + Shift + E Launch Exploratory Ribbon Ctrl+ Alt + S Open Run settings","title":"Shortcuts"},{"location":"shortcuts/#shortcuts","text":"","title":"Shortcuts"},{"location":"shortcuts/#file-menu","text":"Shortcut Keys Description Ctrl + Shift + N Create a new project Ctrl + Shift+ O Open an existing project Ctrl + Shift+ S Save All F1 Open Help File","title":"File Menu"},{"location":"shortcuts/#launch-utilities","text":"Shortcut Keys Description Ctrl + Alt +p Start Spy from the UI and open Spy window Ctrl + Alt +H Start Heal from the UI and open Heal window Alt + S To start Spy during Heal Ctrl + Alt + I Start Image Spy Ctrl + Alt + M Start Mobile Spy Ctrl + Alt + R Start Recording","title":"Launch Utilities"},{"location":"shortcuts/#navigation","text":"Shortcut Keys Description Alt+ shift + N Navigate to TEST DESIGN panel Alt+ shift + E Navigate to TEST EXECUTION panel Alt+ shift + D Navigate to DASHBOARD Alt+ shift + A Adjust UI","title":"Navigation"},{"location":"shortcuts/#workspace","text":"Shortcut Keys Description Ctrl + Plus Add row Ctrl + Minus Delete rows Ctrl + B Toggle Breakpoint Ctrl + / Toggle Comment","title":"Workspace"},{"location":"shortcuts/#test-data-table","text":"Shortcut Keys Description Ctrl + Plus Add row Ctrl + Minus Remove row Left Double Click Edit header/ cell data","title":"Test Data Table"},{"location":"shortcuts/#common","text":"Shortcut Keys Description F2 Rename Del Delete Ctrl + X Cut Ctrl + C Copy Ctrl + V Paste","title":"Common"},{"location":"shortcuts/#help","text":"Shortcut Keys Description F1 Open Help File F3 To go to next search Shift +F3 To go to previous search F5 Reload","title":"Help"},{"location":"shortcuts/#mobile-spy","text":"Shortcut Keys Description Ctrl + Alt+M Open Mobile Spy Alt + F4 Exit Mobile Spy Ctrl + L Load the Screen of connected device Ctrl + Alt + M Map the current view to the Selected Page Ctrl + Alt + L Load the mapped View from Selected Page Ctrl + o Load a View from a selected file","title":"Mobile Spy"},{"location":"shortcuts/#others","text":"Shortcut Keys Description F9 Show Log Ctrl + Shift + E Launch Exploratory Ribbon Ctrl+ Alt + S Open Run settings","title":"Others"},{"location":"tips/","text":"Some Tips and Tricks Execution TimeOut Handling Execution Timeout Of Test Sets The tool provides an option to set the Execution timeout of the test sets run from the execution panel. The default execution timeout is 300minutes (5 hours). When Is It Useful? Suppose, you have a test set containing 100 test cases and it takes 7 hours to execute all the test cases. As the default execution timeout is 5 hours, the test set will run for the 5 hours and remaining test cases yet to run will be marked as NoRun . Increasing the timeout will help in executing the full set. How Is It Done? To set the execution timeout, go to Configuration->Run settings Click the Run settings tab and set the execution timeout to the desired value. Note: The execution timeout must be given in minutes Click Save . Note : To save the settings for the individual test sets, click on the test set and open the Run settings to save or use the Quick settings option in the execution panel To check if the settings have been saved, go to Projects->Project name->Settings->TestExecution->Release name->Testset name and open the RunSettings file to view the settings. If there are multiple test sets, the execution timeout must be set individually for each set. Full Page Screenshots Why The Browser Scrolls Up And Down At Certain Steps In The Application While executing the test scripts, you might have observed that sometimes the browser scrolls up and down in a particular page in the application under test. This might eventually increase the execution time of your scripts as well. The browser scrolls up and down in order to take full page screen shots of the current application page. How to stop the browser from scrolling while execution? If it is not required to take full page screen shots, you can disable full page screenshots by following the steps \u2013 Navigate to Configurations -> Run Settings Uncheck the check box for \u201cTake full page screen shots\u201d, under Run settings tab. You can also enable/disable the screenshots for the PASS or FAIL steps bychecking/unchecking the Pass or Fail checkboxes respectively Global Data Sheet What is Global Data sheet? Global Data sheet is used to contain data that can be used across multiple data sheets (for example application URL, API endpoints etc). How To Use Global Data Sheet? For every project that is created, a default global data sheet is generated. Where to use the Global Data? Identify the Data column name which is common across multiple data sheets. Select that data value and click on global data icon, as shown in the image above.Give the global data id, in the respective window, as shown below, You will get the global id in the global data sheet, as shown below. Impact Analysis Impact Analysis At Object, Flow And Test Data Level The tool has a feature to get the list of impacted testcases , if there is any change in the object properties, reusable component or in testdata sheet. User can quickly validate the change by running the test cases which are impacted. How To Perform Impact Analysis? Object Level In the Object Repository, right-click the modified object and select the option Get Impacted TestCases . In the Impacted TestCases dialog box, the list of impacted test cases will beshown. Select the required test cases and click Create as TestSet Now a new testset will be created. In the Execution panel, you can see the newly created test set under the releasename. The test set will contain the selected test cases and reusables that havebeen affected due to the modifications done to that object.You can rename the testset accordingly. Now, select the test cases that you wish to run and click the run button. Flow Level In the Reusable Components section, right-click the modified reusable and selectthe option \u2018 Get Impacted TestCases \u2019. ! You can create a new Test Set containing the required Test cases and run thesame from the Execution Panel. Test Data Level \u2022 In the Test Data section, right-click the modified data sheet and select the option \u2018 Get Impacted TestCases \u2019. \u2022 You can create a new Test Set containing the required Test cases and run the same from the Execution Panel. Object Property Hierarchy Setting Object Property Hierarchy at Project, Page and Object Level You can change the priority of properties of a web element based on which, elements are identified at Object, Page and Project level in the Object Repository. Why is it needed? Any object property, by which we can identify the object uniquely can be set at high priority to reduce the time taken to identify the object on the Web application. Instead of setting the property hierarchy for each object individually, the hierarchy can be set at the project or the page level. As a result all the objects within the same page or project will follow the same property hierarchy, enabling easy identification of objects. When will it be useful? If the objects id/name is dynamic in nature, we can set the object priority to relative xpath/CSS to identify the object. How can we implement it? To change priority at Object level , select an Object in Object Repository then in the object properties table shuffle the attributes using Up arrow or Down arrow . Now the object will be identified using the changed the property attribute. To change priority at Page level , set the property hierarchy in the Properties pane.Then, right click, go to Set Priority and select the option Set Priority to Page . Now all the objects within the page will follow the same hierarchy. To change priority at Project level , set the property hierarchy in the Properties pane. Then, right click, go to Set Priority and select the option Set Priority to All .Now all the objects within the project will follow the same hierarchy. To change priority for selected objects , select the objects and set the property hierarchy in the Properties pane. Then, right click, go to Set Priority and select the option Set Priority to Selected . Now the selected objects will follow the same hierarchy. Rename and Refactor The tool comes with an option to rename and refactor the object, test case, data sheet and reusable component names Consider the example, given below, I want to refactor the object billName . Go to the Object Repository section, select the object and perform a right click. Choose Rename Object or press F2 The object gets refactored automatically in all the locations, wherever it is used The same procedure can be applied to test cases, test data sheets and reusable components as well. Report Sharing Not Able To View Reports Properly When Shared? When you run any script from design or execution panel, the reports will be availablein the location, \\Projects\\Results . If you just share the .html files, your report will open as shown below, This is because of the absence of the media folder found in the \\Projects\\ \\Results location . The media folder contains allthe necessary js, css and other files required to present the report file. So ensure that you share the entire results folder found in the location \\Projects\\ \\Results . You can compress and share the zipped file. You can also create standalone reports for the test cases or test sets. Before execution, go to Configurations->Options and enable the Create Standalone Report checkbox. After execution, the reports created will be standalone and can be sharedindependently without the Results folder. Use Existing Browser Use Case: If you want to run all the test cases in your test set in one session in the same browser in which the first test case is configured, then you can use this option. How To Use: Create a test set in the execution panel *Choose the browser name for the first test case alone, which is Chrome in the image below, the default browser for the other test cases will be Firefox With the test set selected on the left (Test Suite section), navigate to Configuration>Run Settings In the Run settings window, check the option Use Existing Browser and click on Save Now when you run the test set, all your test cases will be executed in the browser configured for the first test case in the test set in one session, irrespective of the browser names configured for the rest of the test cases. NOTE: This option is not applicable for parallel execution User Defined Variables You can create a user defined variable and use the variable to access data in multiple test cases. When Will It Be Useful? This feature really comes in handy when you have to use the same data across multiple test cases. If you are using global data sheet to pass data which is common to various testcases, you will have to map the data in the global data sheet to test data sheets of the respective test cases, which is a bit cumbersome. If you are using the user defined variable, you can directly pass the variable value to the test case i.e. mapping the data to the test data sheets in respective test cases can be skipped. How To Pass The Data To Your Test Case Using The User Defined Variable? Suppose in all your test cases that you create, you first navigate to a particular URL and then perform your row, you can hard code the URL to all you test cases as shown below. Please note there might be some cases where the URL is environment dependent i.e. the URL is different for different environment. In that case you will have to go to each and every test case in your project and change the URL in all the test cases manually. These issues can be eliminated by using user defined variables to pass the common data (URL in this case) To create a user defined variable? Go to Configurations -> Settings -> UserDefined Add the variable and pass the value Now, you will be able to use the variable inside your test case as shown below If you wish to run the test case in different environment now, you can simply change the value for the user defined variable and the change will be reflected in all your test cases where the variable is used.","title":"Some Tips & Tricks"},{"location":"tips/#some-tips-and-tricks","text":"","title":"Some Tips and Tricks"},{"location":"tips/#execution-timeout","text":"","title":"Execution TimeOut"},{"location":"tips/#handling-execution-timeout-of-test-sets","text":"The tool provides an option to set the Execution timeout of the test sets run from the execution panel. The default execution timeout is 300minutes (5 hours).","title":"Handling Execution Timeout Of Test Sets"},{"location":"tips/#when-is-it-useful","text":"Suppose, you have a test set containing 100 test cases and it takes 7 hours to execute all the test cases. As the default execution timeout is 5 hours, the test set will run for the 5 hours and remaining test cases yet to run will be marked as NoRun . Increasing the timeout will help in executing the full set.","title":"When Is It Useful?"},{"location":"tips/#how-is-it-done","text":"To set the execution timeout, go to Configuration->Run settings Click the Run settings tab and set the execution timeout to the desired value. Note: The execution timeout must be given in minutes Click Save . Note : To save the settings for the individual test sets, click on the test set and open the Run settings to save or use the Quick settings option in the execution panel To check if the settings have been saved, go to Projects->Project name->Settings->TestExecution->Release name->Testset name and open the RunSettings file to view the settings. If there are multiple test sets, the execution timeout must be set individually for each set.","title":"How Is It Done?"},{"location":"tips/#full-page-screenshots","text":"","title":"Full Page Screenshots"},{"location":"tips/#why-the-browser-scrolls-up-and-down-at-certain-steps-in-the-application","text":"While executing the test scripts, you might have observed that sometimes the browser scrolls up and down in a particular page in the application under test. This might eventually increase the execution time of your scripts as well. The browser scrolls up and down in order to take full page screen shots of the current application page.","title":"Why The Browser Scrolls Up And Down At Certain Steps In The Application"},{"location":"tips/#how-to-stop-the-browser-from-scrolling-while-execution","text":"If it is not required to take full page screen shots, you can disable full page screenshots by following the steps \u2013 Navigate to Configurations -> Run Settings Uncheck the check box for \u201cTake full page screen shots\u201d, under Run settings tab. You can also enable/disable the screenshots for the PASS or FAIL steps bychecking/unchecking the Pass or Fail checkboxes respectively","title":"How to stop the browser from scrolling while execution?"},{"location":"tips/#global-data-sheet","text":"","title":"Global Data Sheet"},{"location":"tips/#what-is-global-data-sheet","text":"Global Data sheet is used to contain data that can be used across multiple data sheets (for example application URL, API endpoints etc).","title":"What is Global Data sheet?"},{"location":"tips/#how-to-use-global-data-sheet","text":"For every project that is created, a default global data sheet is generated.","title":"How To Use Global Data Sheet?"},{"location":"tips/#where-to-use-the-global-data","text":"Identify the Data column name which is common across multiple data sheets. Select that data value and click on global data icon, as shown in the image above.Give the global data id, in the respective window, as shown below, You will get the global id in the global data sheet, as shown below.","title":"Where to use the Global Data?"},{"location":"tips/#impact-analysis","text":"","title":"Impact Analysis"},{"location":"tips/#impact-analysis-at-object-flow-and-test-data-level","text":"The tool has a feature to get the list of impacted testcases , if there is any change in the object properties, reusable component or in testdata sheet. User can quickly validate the change by running the test cases which are impacted.","title":"Impact Analysis At Object, Flow And Test Data Level"},{"location":"tips/#how-to-perform-impact-analysis","text":"Object Level In the Object Repository, right-click the modified object and select the option Get Impacted TestCases . In the Impacted TestCases dialog box, the list of impacted test cases will beshown. Select the required test cases and click Create as TestSet Now a new testset will be created. In the Execution panel, you can see the newly created test set under the releasename. The test set will contain the selected test cases and reusables that havebeen affected due to the modifications done to that object.You can rename the testset accordingly. Now, select the test cases that you wish to run and click the run button. Flow Level In the Reusable Components section, right-click the modified reusable and selectthe option \u2018 Get Impacted TestCases \u2019. ! You can create a new Test Set containing the required Test cases and run thesame from the Execution Panel. Test Data Level \u2022 In the Test Data section, right-click the modified data sheet and select the option \u2018 Get Impacted TestCases \u2019. \u2022 You can create a new Test Set containing the required Test cases and run the same from the Execution Panel.","title":"How To Perform Impact Analysis?"},{"location":"tips/#object-property-hierarchy","text":"","title":"Object Property Hierarchy"},{"location":"tips/#setting-object-property-hierarchy-at-project-page-and-object-level","text":"You can change the priority of properties of a web element based on which, elements are identified at Object, Page and Project level in the Object Repository.","title":"Setting Object Property Hierarchy at Project, Page and Object Level"},{"location":"tips/#why-is-it-needed","text":"Any object property, by which we can identify the object uniquely can be set at high priority to reduce the time taken to identify the object on the Web application. Instead of setting the property hierarchy for each object individually, the hierarchy can be set at the project or the page level. As a result all the objects within the same page or project will follow the same property hierarchy, enabling easy identification of objects.","title":"Why is it needed?"},{"location":"tips/#when-will-it-be-useful","text":"If the objects id/name is dynamic in nature, we can set the object priority to relative xpath/CSS to identify the object.","title":"When will it be useful?"},{"location":"tips/#how-can-we-implement-it","text":"To change priority at Object level , select an Object in Object Repository then in the object properties table shuffle the attributes using Up arrow or Down arrow . Now the object will be identified using the changed the property attribute. To change priority at Page level , set the property hierarchy in the Properties pane.Then, right click, go to Set Priority and select the option Set Priority to Page . Now all the objects within the page will follow the same hierarchy. To change priority at Project level , set the property hierarchy in the Properties pane. Then, right click, go to Set Priority and select the option Set Priority to All .Now all the objects within the project will follow the same hierarchy. To change priority for selected objects , select the objects and set the property hierarchy in the Properties pane. Then, right click, go to Set Priority and select the option Set Priority to Selected . Now the selected objects will follow the same hierarchy.","title":"How can we implement it?"},{"location":"tips/#rename-and-refactor","text":"The tool comes with an option to rename and refactor the object, test case, data sheet and reusable component names Consider the example, given below, I want to refactor the object billName . Go to the Object Repository section, select the object and perform a right click. Choose Rename Object or press F2 The object gets refactored automatically in all the locations, wherever it is used The same procedure can be applied to test cases, test data sheets and reusable components as well.","title":"Rename and Refactor"},{"location":"tips/#report-sharing","text":"","title":"Report Sharing"},{"location":"tips/#not-able-to-view-reports-properly-when-shared","text":"When you run any script from design or execution panel, the reports will be availablein the location, \\Projects\\Results . If you just share the .html files, your report will open as shown below, This is because of the absence of the media folder found in the \\Projects\\ \\Results location . The media folder contains allthe necessary js, css and other files required to present the report file. So ensure that you share the entire results folder found in the location \\Projects\\ \\Results . You can compress and share the zipped file. You can also create standalone reports for the test cases or test sets. Before execution, go to Configurations->Options and enable the Create Standalone Report checkbox. After execution, the reports created will be standalone and can be sharedindependently without the Results folder.","title":"Not Able To View Reports Properly When Shared?"},{"location":"tips/#use-existing-browser","text":"","title":"Use Existing Browser"},{"location":"tips/#use-case","text":"If you want to run all the test cases in your test set in one session in the same browser in which the first test case is configured, then you can use this option.","title":"Use Case:"},{"location":"tips/#how-to-use","text":"Create a test set in the execution panel *Choose the browser name for the first test case alone, which is Chrome in the image below, the default browser for the other test cases will be Firefox With the test set selected on the left (Test Suite section), navigate to Configuration>Run Settings In the Run settings window, check the option Use Existing Browser and click on Save Now when you run the test set, all your test cases will be executed in the browser configured for the first test case in the test set in one session, irrespective of the browser names configured for the rest of the test cases. NOTE: This option is not applicable for parallel execution","title":"How To Use:"},{"location":"tips/#user-defined-variables","text":"You can create a user defined variable and use the variable to access data in multiple test cases.","title":"User Defined Variables"},{"location":"tips/#when-will-it-be-useful_1","text":"This feature really comes in handy when you have to use the same data across multiple test cases. If you are using global data sheet to pass data which is common to various testcases, you will have to map the data in the global data sheet to test data sheets of the respective test cases, which is a bit cumbersome. If you are using the user defined variable, you can directly pass the variable value to the test case i.e. mapping the data to the test data sheets in respective test cases can be skipped.","title":"When Will It Be Useful?"},{"location":"tips/#how-to-pass-the-data-to-your-test-case-using-the-user-defined-variable","text":"Suppose in all your test cases that you create, you first navigate to a particular URL and then perform your row, you can hard code the URL to all you test cases as shown below. Please note there might be some cases where the URL is environment dependent i.e. the URL is different for different environment. In that case you will have to go to each and every test case in your project and change the URL in all the test cases manually. These issues can be eliminated by using user defined variables to pass the common data (URL in this case) To create a user defined variable? Go to Configurations -> Settings -> UserDefined Add the variable and pass the value Now, you will be able to use the variable inside your test case as shown below If you wish to run the test case in different environment now, you can simply change the value for the user defined variable and the change will be reflected in all your test cases where the variable is used.","title":"How To Pass The Data To Your Test Case Using The User Defined Variable?"},{"location":"troubleshooting/","text":"Troubleshooting Error in Connection Follow the below steps for such scenario: Checking Connection status and establishing the same For Chrome and Firefox: Follow the steps below to troubleshoot the \"error in Connection\" error message, Open the options window, right-click the add-on to launch options window in chrome and use the shortcut Ctrl+Shift+O in firefox for the same. Launch spy or heal or record from the IDE Click on Test Connection , use the default port 8887 , this port can also be changed as per your choice. If you are getting a red bulb , the certificate is not installed properly, so click on the bulb again, you will be navigated to the url https://localhost:8887/status , you need to give \" Proceed to unsafe \" in chrome and Add exception in Firefox to get to this link If you do not get this message then you need to install the certificates manually. NOTE : A green bulb indicates that the connection between browser extension and the UI is established and is working fine. Unable To Open The Tool After Introducing Your Custom Method This happens when the cognizant-intelligent-test-scripter-engine- .jar found in Cognizant Intelligent Test Scripter installation_location/lib , gets corrupted while exporting the cognizant-intelligenttest-scripter-engine- .jar back from Engine or while inject script is performed. You might get an exception stating that main class not found . To overcome this issue, always take a backup of the cognizant-intelligent-testscripter-engine- .jar before you export the jar from Engine . So even when the jar is corrupt you can still replace the existing jar by the new one. Also do not change the name of the cognizant-intelligent-test-scripter-engine- .jar available inside the lib folder. Another alternative is to delete the recent items file present in the installation location when Cognizant Intelligent Test Scripter is closed and open again. Note: Please do not take the back up in the same location or inside the lib folder. Place it in a different location. If you face this issue after performing inject script then delete the .class file of your custom method found in the userdefined folder of installation location and close and reopen. Note: This could also be because the .jar files present in the location\\lib\\commands might have got corrupted. So you can simply remove those files to open Cognizant Intelligent Test Scripter. How To Hard Code Java Path Variable For Cognizant Intelligent Test Scripter It is possible to hard code the java path in the Run.bat file.Refer the section below on how it can be done. Prerequisites Following must be installed in your system: Cognizant Intelligent Test Scripter setup Java How to do it? Navigate to the location where Cognizant Intelligent Test Scripter is installed in your system. Right-click the Run batch file. Click the edit option in the context menu. Give the path of the jre location under the 'SET PATH' like this, SET PATH=\"C:\\Program Files\\Java\\jdk1.x.x_xx\\jre\\bin\" . Save the file. Double-click the Run.bat file and launch Application.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#error-in-connection","text":"Follow the below steps for such scenario: Checking Connection status and establishing the same For Chrome and Firefox: Follow the steps below to troubleshoot the \"error in Connection\" error message, Open the options window, right-click the add-on to launch options window in chrome and use the shortcut Ctrl+Shift+O in firefox for the same. Launch spy or heal or record from the IDE Click on Test Connection , use the default port 8887 , this port can also be changed as per your choice. If you are getting a red bulb , the certificate is not installed properly, so click on the bulb again, you will be navigated to the url https://localhost:8887/status , you need to give \" Proceed to unsafe \" in chrome and Add exception in Firefox to get to this link If you do not get this message then you need to install the certificates manually. NOTE : A green bulb indicates that the connection between browser extension and the UI is established and is working fine.","title":"Error in Connection"},{"location":"troubleshooting/#unable-to-open-the-tool-after-introducing-your-custom-method","text":"This happens when the cognizant-intelligent-test-scripter-engine- .jar found in Cognizant Intelligent Test Scripter installation_location/lib , gets corrupted while exporting the cognizant-intelligenttest-scripter-engine- .jar back from Engine or while inject script is performed. You might get an exception stating that main class not found . To overcome this issue, always take a backup of the cognizant-intelligent-testscripter-engine- .jar before you export the jar from Engine . So even when the jar is corrupt you can still replace the existing jar by the new one. Also do not change the name of the cognizant-intelligent-test-scripter-engine- .jar available inside the lib folder. Another alternative is to delete the recent items file present in the installation location when Cognizant Intelligent Test Scripter is closed and open again. Note: Please do not take the back up in the same location or inside the lib folder. Place it in a different location. If you face this issue after performing inject script then delete the .class file of your custom method found in the userdefined folder of installation location and close and reopen. Note: This could also be because the .jar files present in the location\\lib\\commands might have got corrupted. So you can simply remove those files to open Cognizant Intelligent Test Scripter. How To Hard Code Java Path Variable For Cognizant Intelligent Test Scripter It is possible to hard code the java path in the Run.bat file.Refer the section below on how it can be done. Prerequisites Following must be installed in your system: Cognizant Intelligent Test Scripter setup Java How to do it? Navigate to the location where Cognizant Intelligent Test Scripter is installed in your system. Right-click the Run batch file. Click the edit option in the context menu. Give the path of the jre location under the 'SET PATH' like this, SET PATH=\"C:\\Program Files\\Java\\jdk1.x.x_xx\\jre\\bin\" . Save the file. Double-click the Run.bat file and launch Application.","title":"Unable To Open The Tool After Introducing Your Custom Method"},{"location":"webpageperformance/","text":"WebPage Performance Testing We can analyse the performance of a Web Page by using some built-in actions. The tool generates an information-rich performance report which is very handy to visualize which resource consumed how much time. Additionally, there is an option to compare HAR files and even set benchmarks. HAR is the short form for HTTP ARchive format, which tracks all the logging of web browser's interaction with a site. HAR files can be a requirement for troubleshooting issues specifically for problems such as performance and page rendering. Actions capturePageTimings Description : This action captures page navigation and resource timings parameters of the web page last opened or navigated to and stores it in the Performance Report and HAR file. Input Format : @PageName Usage ObjectName Action Input Condition Reference Browser capturePageTimings @value PageName << Hardcoded Input Browser capturePageTimings Sheet:Column PageName << Input from Datasheet Browser capturePageTimings %dynamicVar% PageName << Input from variable Internally uses: var pt=performance.timing; var t={}; t.title=document.title; t.url=window.location.href; for(var k in pt){t[k]=pt[k];} t.toJSON=undefined; return JSON.stringify(t); ClearCache Description : Clears browser's data, for example cookies. Usage: ObjectName Action Input Condition Reference Browser ClearCache Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"To delete all the cookies\", input = InputType.NO) public void ClearCache() { try { Driver.manage().deleteAllCookies(); Report.updateTestLog(Action, \"Cookies Cleared\", Status.DONE); } catch (Exception e) { Report.updateTestLog(Action, \"Failed to clear cookies\", Status.DONE); } } Create HAR files Use the action capturePageTimings on strategic pages Navigate to Configuration>Run Settings and check the Performance Reporting check box under the Run settings tab . Once this configuration is saved, run your test set and post the execution you will get a report.Expand the report by clicking on your test case and this time the console icon on the bottom right will change into the Performance Report icon . To launch the performance report click on the Performance Report icon . The table and graph view contains the har files generated post execution.Click on them to get the various page and resource timings parameters captured by the capturePageTimings action. Compare Har Files To Compare your Har files, navigate to Tools>Har Compare and you will be redirected to the Har Comparator site. Here you compare the Har files that you have in your project. You can and also set benchmarks for achieving standards.","title":"WebPage Performance Testing"},{"location":"webpageperformance/#webpage-performance-testing","text":"We can analyse the performance of a Web Page by using some built-in actions. The tool generates an information-rich performance report which is very handy to visualize which resource consumed how much time. Additionally, there is an option to compare HAR files and even set benchmarks. HAR is the short form for HTTP ARchive format, which tracks all the logging of web browser's interaction with a site. HAR files can be a requirement for troubleshooting issues specifically for problems such as performance and page rendering.","title":"WebPage Performance Testing"},{"location":"webpageperformance/#actions","text":"","title":"Actions"},{"location":"webpageperformance/#capturepagetimings","text":"Description : This action captures page navigation and resource timings parameters of the web page last opened or navigated to and stores it in the Performance Report and HAR file. Input Format : @PageName Usage ObjectName Action Input Condition Reference Browser capturePageTimings @value PageName << Hardcoded Input Browser capturePageTimings Sheet:Column PageName << Input from Datasheet Browser capturePageTimings %dynamicVar% PageName << Input from variable Internally uses: var pt=performance.timing; var t={}; t.title=document.title; t.url=window.location.href; for(var k in pt){t[k]=pt[k];} t.toJSON=undefined; return JSON.stringify(t);","title":"capturePageTimings"},{"location":"webpageperformance/#clearcache","text":"Description : Clears browser's data, for example cookies. Usage: ObjectName Action Input Condition Reference Browser ClearCache Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"To delete all the cookies\", input = InputType.NO) public void ClearCache() { try { Driver.manage().deleteAllCookies(); Report.updateTestLog(Action, \"Cookies Cleared\", Status.DONE); } catch (Exception e) { Report.updateTestLog(Action, \"Failed to clear cookies\", Status.DONE); } }","title":"ClearCache"},{"location":"webpageperformance/#create-har-files","text":"Use the action capturePageTimings on strategic pages Navigate to Configuration>Run Settings and check the Performance Reporting check box under the Run settings tab . Once this configuration is saved, run your test set and post the execution you will get a report.Expand the report by clicking on your test case and this time the console icon on the bottom right will change into the Performance Report icon . To launch the performance report click on the Performance Report icon . The table and graph view contains the har files generated post execution.Click on them to get the various page and resource timings parameters captured by the capturePageTimings action.","title":"Create HAR files"},{"location":"webpageperformance/#compare-har-files","text":"To Compare your Har files, navigate to Tools>Har Compare and you will be redirected to the Har Comparator site. Here you compare the Har files that you have in your project. You can and also set benchmarks for achieving standards.","title":"Compare Har Files"},{"location":"apiActions/webservice/","text":"API Testing Actions postRestRequest Description : This function is used to perform POST action on a Rest API. Input Format : @Expected Payload Usage: ObjectName Action Input Condition Reference Webservice postRestRequest @Payload (from Editor) << Hardcoded Input Webservice postRestRequest Sheet:Column << Input from Datasheet Webservice postRestRequest %dynamicVar% << Input from variable Inputs in the Input column can be either hardcoded , passed inside the JSON editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: HttpURLConnection.setDoOutput(true); HttpURLConnection.setRequestMethod(\"POST\"); try (OutputStreamWriter out = new OutputStreamWriter(httpConnections.get(key).getOutputStream())) { out.write(data); out.flush(); out.close(); } InputStreamReader reader = new InputStreamReader(HttpURLConnection.getInputStream()); StringBuilder buf = new StringBuilder(); char[] cbuf = new char[2048]; int num; while (-1 != (num = reader.read(cbuf))) { buf.append(cbuf, 0, num); } putRestRequest Description : This function is used to perform PUT action on a Rest API. Input Format : @Expected Payload Usage: ObjectName Action Input Condition Reference Webservice putRestRequest @Payload (from Editor) << Hardcoded Input Webservice putRestRequest Sheet:Column << Input from Datasheet Webservice putRestRequest %dynamicVar% << Input from variable Inputs in the Input column can be either hardcoded , passed inside the JSON editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: HttpURLConnection.setDoOutput(true); HttpURLConnection.setRequestMethod(\"PUT\"); try (OutputStreamWriter out = new OutputStreamWriter(httpConnections.get(key).getOutputStream())) { out.write(data); out.flush(); out.close(); } InputStreamReader reader = new InputStreamReader(HttpURLConnection.getInputStream()); StringBuilder buf = new StringBuilder(); char[] cbuf = new char[2048]; int num; while (-1 != (num = reader.read(cbuf))) { buf.append(cbuf, 0, num); } postSoapRequest Description : This function is used to perform POST action on a SOAP API. Input Format : @Expected Payload Usage: ObjectName Action Input Condition Reference Webservice postRestRequest @Payload (from Editor) << Hardcoded Input Webservice postRestRequest Sheet:Column << Input from Datasheet Webservice postRestRequest %dynamicVar% << Input from variable Inputs in the Input column can be either hardcoded , passed inside the XML editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: HttpURLConnection.setDoOutput(true); HttpURLConnection.setRequestMethod(\"POST\"); try (OutputStreamWriter out = new OutputStreamWriter(httpConnections.get(key).getOutputStream())) { out.write(data); out.flush(); out.close(); } InputStreamReader reader = new InputStreamReader(HttpURLConnection.getInputStream()); StringBuilder buf = new StringBuilder(); char[] cbuf = new char[2048]; int num; while (-1 != (num = reader.read(cbuf))) { buf.append(cbuf, 0, num); } getRestRequest Description : This function is used to perform GET action on a Rest API. Usage: ObjectName Action Input Condition Reference Webservice getRestRequest Corresponding Code: HttpURLConnection.setRequestMethod(\"GET\"); InputStreamReader reader = new InputStreamReader(HttpURLConnection.getInputStream()); StringBuilder buf = new StringBuilder(); char[] cbuf = new char[2048]; int num; while (-1 != (num = reader.read(cbuf))) { buf.append(cbuf, 0, num); } deleteRestRequest Description : This function is used to perform DELETE action on a Rest API. Usage: ObjectName Action Input Condition Reference Webservice deleteRestRequest Corresponding Code: HttpURLConnection.setRequestMethod(\"DELETE\"); InputStreamReader reader = new InputStreamReader(HttpURLConnection.getInputStream()); StringBuilder buf = new StringBuilder(); char[] cbuf = new char[2048]; int num; while (-1 != (num = reader.read(cbuf))) { buf.append(cbuf, 0, num); } assertResponseCode Description : This function is used to validate the response code of SOAP/REST response. Input Format : @Expected code Usage: ObjectName Action Input Condition Reference Webservice assertResponseCode @value << Hardcoded Input Webservice assertResponseCode Sheet:Column << Input from Datasheet Webservice assertResponseCode %dynamicVar% << Input from variable Corresponding Code: responsecodes.put(key, Integer.toString(httpConnections.get(key).getResponseCode())); /***************************************************/ @Action(object = ObjectType.WEBSERVICE, desc = \"Assert Response Code \", input = InputType.YES) public void assertResponseCode() { try { if (responsecodes.get(key).equals(Data)) { Report.updateTestLog(Action, \"Status code is : \" + Data, Status.PASSNS); } else { Report.updateTestLog(Action, \"Status code is : \" + responsecodes.get(key) + \" but should be \" + Data,Status.FAILNS); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error in validating response code :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } } assertResponseMessage Description : This function is used to validate the response message of SOAP/REST response. Input Format : @Expected message Usage: ObjectName Action Input Condition Reference Webservice assertResponseMessage @value << Hardcoded Input Webservice assertResponseMessage Sheet:Column << Input from Datasheet Webservice assertResponseMessage %dynamicVar% << Input from variable Corresponding Code: responsemessages.put(key, httpConnections.get(key).getResponseMessage()); /***************************************************/ @Action(object = ObjectType.WEBSERVICE, desc = \"Assert Response Message \", input = InputType.YES) public void assertResponseMessage() { try { if (responsemessages.get(key).equals(Data)) { Report.updateTestLog(Action, \"Response message is : \" + Data, Status.PASSNS); } else { Report.updateTestLog(Action,\"Response message is : \" + responsemessages.get(key) + \" but should be \" + Data, Status.FAILNS); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error in validating response message :\" + \"\\n\" + ex.getMessage(),Status.DEBUG); } } assertResponsebodycontains Description : This function is used to validate whether the response body of SOAP/REST request contains an expected text or not. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Webservice assertResponsebodycontains @value << Hardcoded Input Webservice assertResponsebodycontains Sheet:Column << Input from Datasheet Webservice assertResponsebodycontains %dynamicVar% << Input from variable Corresponding Code: responsemessages.put(key, httpConnections.get(key).getResponseMessage()); /***************************************************/ @Action(object = ObjectType.WEBSERVICE, desc = \"Assert Response Body contains \", input = InputType.YES) public void assertResponsebodycontains() { try { if (responsebodies.get(key).contains(Data)) { Report.updateTestLog(Action, \"Response body contains : \" + Data, Status.PASSNS); } else { Report.updateTestLog(Action, \"Response body does not contain : \" + Data, Status.FAILNS); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error in validating response body :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } } assertJSONelementEquals Description : This function is used to validate whether a certain JSON tag of the response body of REST request contains an expected text or not. Input Format : @Expected Text Condition Format : JSON Path of the tag Usage: ObjectName Action Input Condition Reference Webservice assertJSONelementEquals @value JSONPath << Hardcoded Input Webservice assertJSONelementEquals Sheet:Column JSONPath << Input from Datasheet Webservice assertJSONelementEquals %dynamicVar% JSONPath << Input from variable Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Assert JSON Element Equals \", input = InputType.YES, condition = InputType.YES) public void assertJSONelementEquals() { try { String response = responsebodies.get(key); String jsonpath = Condition; String value = JsonPath.read(response, jsonpath).toString(); if (value.equals(Data)) { Report.updateTestLog(Action, \"Element text [\" + value + \"] is as expected\", Status.PASSNS); } else { Report.updateTestLog(Action, \"Element text is [\" + value + \"] but is expected to be [\" + Data + \"]\",Status.FAILNS); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error in validating JSON element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } } assertXMLelementEquals Description : This function is used to validate whether a certain XML tag of the response body of SOAP request contains an expected text or not. Input Format : @Expected Text Condition Format : XPath of the tag Usage: ObjectName Action Input Condition Reference Webservice assertXMLelementEquals @value XPath << Hardcoded Input Webservice assertXMLelementEquals Sheet:Column XPath << Input from Datasheet Webservice assertXMLelementEquals %dynamicVar% XPath << Input from variable Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Assert XML Element Equals \", input = InputType.YES, condition = InputType.YES) public void assertXMLelementEquals() { try { DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder dBuilder; InputSource inputSource = new InputSource(); inputSource.setCharacterStream(new StringReader(responsebodies.get(key))); dBuilder = dbFactory.newDocumentBuilder(); Document doc = dBuilder.parse(inputSource); doc.getDocumentElement().normalize(); XPath xPath = XPathFactory.newInstance().newXPath(); String expression = Condition; NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET); Node nNode = nodeList.item(0); String value = nNode.getNodeValue(); if (value.equals(Data)) { Report.updateTestLog(Description, \"Element text [\" + value + \"] is as expected\", Status.PASSNS); } else { Report.updateTestLog(Description, \"Element text is [\" + value + \"] but is expected to be [\"+Data+\"]\", Status.FAILNS); } } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException | SAXException ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Description, \"Error validating XML element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } } storeJSONelementInDataSheet Description : This function is used to store a certain JSON tag value inside the response body of REST request, into a respective column of a given datasheet. Input Format : @Expected datasheet name:column name Condition Format : JSONPath of the tag Usage: ObjectName Action Input Condition Reference Webservice storeJSONelementInDataSheet Sheet:Column JSONPath << Datasheet to where value is supposed br stored Note: Ensure that your data sheet doesn't contain column names with spaces. Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Store JSON Element In DataSheet \", input = InputType.YES, condition = InputType.YES) public void storeJSONelementInDataSheet() { try { String strObj = Input; if (strObj.matches(\".*:.*\")) { try { System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration()); String sheetName = strObj.split(\":\", 2)[0]; String columnName = strObj.split(\":\", 2)[1]; String response = responsebodies.get(key); String jsonpath = Condition; String value = JsonPath.read(response, jsonpath).toString(); userData.putData(sheetName, columnName, value); Report.updateTestLog(Action, \"Element text [\" + value + \"] is stored in \" + strObj, Status.DONE); } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex); Report.updateTestLog(Action, \"Error Storing JSON element in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG); } } else { Report.updateTestLog(Action,\"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName\",Status.DEBUG); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error Storing JSON element in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG); } } storeXMLelementInDataSheet Description : This function is used to store a certain XML tag value inside the response body of SOAP request, into a respective column of a given datasheet. Input Format : @Expected datasheet name:column name Condition Format : XPath of the tag Usage: ObjectName Action Input Condition Reference Webservice storeXMLelementInDataSheet Sheet:Column XPath << Datasheet to where value is supposed br stored Note: Ensure that your data sheet doesn't contain column names with spaces. Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Store XML Element In DataSheet \", input = InputType.YES, condition = InputType.YES) public void storeXMLelementInDataSheet() { try { String strObj = Input; if (strObj.matches(\".*:.*\")) { try { String expression = \"\"; System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration()); String sheetName = strObj.split(\":\", 2)[0]; String columnName = strObj.split(\":\", 2)[1]; String xmlText = responsebodies.get(key); DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder dBuilder; InputSource inputSource = new InputSource(); inputSource.setCharacterStream(new StringReader(xmlText)); dBuilder = dbFactory.newDocumentBuilder(); Document doc = dBuilder.parse(inputSource); doc.getDocumentElement().normalize(); XPath xPath = XPathFactory.newInstance().newXPath(); if (Condition.matches(\"%.*%\")) expression = getVar(Condition); else expression = Condition; NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET); Node nNode = nodeList.item(0); String value = nNode.getNodeValue(); userData.putData(sheetName, columnName, value); Report.updateTestLog(Action, \"Element text [\" + value + \"] is stored in \" + strObj, Status.DONE); } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException| SAXException ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex); Report.updateTestLog(Action, \"Error Storing XML element in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG); } } else { Report.updateTestLog(Action, \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",Status.DEBUG); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error Storing XML element in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG); } } storeJSONelement Description : This function is used to store a certain JSON tag value from the response body of REST request, into a variable. Input Format : @ JSONPath of the tag Condition Format : %variable% Usage: ObjectName Action Input Condition Reference Webservice storeJSONelement @ JSONPath %var% << Hardcoded Input Webservice storeJSONelement Sheet:Column containing JSONPath %var% << Input from Datasheet Webservice storeJSONelement %Var% containing JSONPath %var% << Input from variable Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Store JSON Element\", input = InputType.YES, condition = InputType.YES) public void storeJSONelement() { try { String variableName = Condition; String jsonpath = Data; if (variableName.matches(\"%.*%\")) { addVar(variableName, JsonPath.read(responsebodies.get(key), jsonpath).toString()); Report.updateTestLog(Action, \"JSON element value stored\", Status.DONE); } else { Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error Storing JSON element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } } storeXMLelement Description : This function is used to store a certain XML tag value inside the response body of SOAP request, into a variable. Input Format : @ XPath of the tag Condition Format : %variable% Usage: ObjectName Action Input Condition Reference Webservice storeXMLelement @ XPath %var% << Hardcoded Input Webservice storeXMLelement Sheet:Column containing XPath %var% << Input from Datasheet Webservice storeXMLelement %Var% containing XPath %var% << Input from variable Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Store XML Element\", input = InputType.YES, condition = InputType.YES) public void storeXMLelement() { try { String variableName = Condition; String expression = Data; if (variableName.matches(\"%.*%\")) { DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder dBuilder; InputSource inputSource = new InputSource(); inputSource.setCharacterStream(new StringReader(responsebodies.get(key))); dBuilder = dbFactory.newDocumentBuilder(); Document doc = dBuilder.parse(inputSource); doc.getDocumentElement().normalize(); XPath xPath = XPathFactory.newInstance().newXPath(); NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET); Node nNode = nodeList.item(0); String value = nNode.getNodeValue(); addVar(variableName, value); Report.updateTestLog(Action, \"XML element value stored\", Status.DONE); } else { Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG); } } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException | SAXException ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error Storing XML element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } } storeResponseBodyInDataSheet Description : This function is used to store the response body of SOAP/REST request, into a respective column of a given datasheet. Input Format : @Expected DatasheetName:ColumnName Usage: ObjectName Action Input Condition Reference Webservice storeResponseBodyInDataSheet Sheet:Column << Datasheet to where value is supposed br stored Note: Ensure that your data sheet doesn't contain column names with spaces. Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Store Response Message In DataSheet \", input = InputType.YES) public void storeResponseBodyInDataSheet() { try { String strObj = Input; if (strObj.matches(\".*:.*\")) { try { System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration()); String sheetName = strObj.split(\":\", 2)[0]; String columnName = strObj.split(\":\", 2)[1]; userData.putData(sheetName, columnName, responsebodies.get(key)); Report.updateTestLog(Action, \"Response body is stored in \" + strObj, Status.DONE); } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex); Report.updateTestLog(Action, \"Error Storing text in datasheet :\" + ex.getMessage(), Status.DEBUG); } } else { Report.updateTestLog(Action, \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",Status.DEBUG); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error Storing response body in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG); } } storeHeaderElementByName Description : This function is used to store a Header Value of the response of SOAP/REST request, into a variable. Input Format : @ HeaderName Condition Format : %variable% Usage: ObjectName Action Input Condition Reference Webservice storeHeaderElementByName @ HeaderName %var% << Hardcoded Input Webservice storeHeaderElementByName Sheet:Column containing HeaderName %var% << Input from Datasheet Webservice storeHeaderElementByName %Var% containing HeaderName %var% << Input from variable Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Store Header Element in Datasheet\", input = InputType.YES, condition = InputType.YES) public void storeHeaderElementByName() { try { String variableName = Condition; String headerName = Data; if (variableName.matches(\"%.*%\")) { addVar(variableName, httpConnections.get(key).getHeaderField(headerName)); Report.updateTestLog(Action, \"Header value stored\", Status.DONE); } else { Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error Storing Header Element element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } } setEndPoint Description : This function is used to set the End Point for a Rest/SOAP API. Input Format : @EndPoint Usage: ObjectName Action Input Condition Reference Webservice setEndPoint @Endpoint (from Editor) << Hardcoded Input Webservice setEndPoint Sheet:Column << Input from Datasheet Webservice setEndPoint %dynamicVar% << Input from variable Inputs in the Input column can be either hardcoded , passed inside the Endpoint editor which is capable of parameterising the Endpoint (Press ctrl+space to see the list of variables available ), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: Performs opening of URL Connection httpConnections.put(key, (HttpURLConnection) url.openConnection()); addHeader Description : This function is used to add a header for a Rest/SOAP API request. Input Format : @ HeaderName = HeaderValue Usage: ObjectName Action Input Condition Reference Webservice addHeader @ HeaderName = HeaderValue << Hardcoded Input Webservice addHeader Sheet:Column containing HeaderName = HeaderValue << Input from Datasheet Webservice addHeader %dynamicVar% containing HeaderName = HeaderValue << Input from variable Corresponding Code: This function adds all the Headers into a HashMap headerlist . Then those are applied to the request as : if (headerlist.size() > 0) { headerlist.forEach((header) -> { httpConnections.get(key).setRequestProperty(header.split(\"=\")[0], header.split(\"=\")[1]); }); } closeConnection Description : This function is used to close a connection for a Rest/SOAP API request. Usage: ObjectName Action Input Condition Reference Webservice closeConnection Corresponding Code: Performs disconnection of the URL connection httpConnection.disconnect();","title":"API Testing Actions"},{"location":"apiActions/webservice/#api-testing-actions","text":"","title":"API Testing Actions"},{"location":"apiActions/webservice/#postrestrequest","text":"Description : This function is used to perform POST action on a Rest API. Input Format : @Expected Payload Usage: ObjectName Action Input Condition Reference Webservice postRestRequest @Payload (from Editor) << Hardcoded Input Webservice postRestRequest Sheet:Column << Input from Datasheet Webservice postRestRequest %dynamicVar% << Input from variable Inputs in the Input column can be either hardcoded , passed inside the JSON editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: HttpURLConnection.setDoOutput(true); HttpURLConnection.setRequestMethod(\"POST\"); try (OutputStreamWriter out = new OutputStreamWriter(httpConnections.get(key).getOutputStream())) { out.write(data); out.flush(); out.close(); } InputStreamReader reader = new InputStreamReader(HttpURLConnection.getInputStream()); StringBuilder buf = new StringBuilder(); char[] cbuf = new char[2048]; int num; while (-1 != (num = reader.read(cbuf))) { buf.append(cbuf, 0, num); }","title":"postRestRequest"},{"location":"apiActions/webservice/#putrestrequest","text":"Description : This function is used to perform PUT action on a Rest API. Input Format : @Expected Payload Usage: ObjectName Action Input Condition Reference Webservice putRestRequest @Payload (from Editor) << Hardcoded Input Webservice putRestRequest Sheet:Column << Input from Datasheet Webservice putRestRequest %dynamicVar% << Input from variable Inputs in the Input column can be either hardcoded , passed inside the JSON editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: HttpURLConnection.setDoOutput(true); HttpURLConnection.setRequestMethod(\"PUT\"); try (OutputStreamWriter out = new OutputStreamWriter(httpConnections.get(key).getOutputStream())) { out.write(data); out.flush(); out.close(); } InputStreamReader reader = new InputStreamReader(HttpURLConnection.getInputStream()); StringBuilder buf = new StringBuilder(); char[] cbuf = new char[2048]; int num; while (-1 != (num = reader.read(cbuf))) { buf.append(cbuf, 0, num); }","title":"putRestRequest"},{"location":"apiActions/webservice/#postsoaprequest","text":"Description : This function is used to perform POST action on a SOAP API. Input Format : @Expected Payload Usage: ObjectName Action Input Condition Reference Webservice postRestRequest @Payload (from Editor) << Hardcoded Input Webservice postRestRequest Sheet:Column << Input from Datasheet Webservice postRestRequest %dynamicVar% << Input from variable Inputs in the Input column can be either hardcoded , passed inside the XML editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: HttpURLConnection.setDoOutput(true); HttpURLConnection.setRequestMethod(\"POST\"); try (OutputStreamWriter out = new OutputStreamWriter(httpConnections.get(key).getOutputStream())) { out.write(data); out.flush(); out.close(); } InputStreamReader reader = new InputStreamReader(HttpURLConnection.getInputStream()); StringBuilder buf = new StringBuilder(); char[] cbuf = new char[2048]; int num; while (-1 != (num = reader.read(cbuf))) { buf.append(cbuf, 0, num); }","title":"postSoapRequest"},{"location":"apiActions/webservice/#getrestrequest","text":"Description : This function is used to perform GET action on a Rest API. Usage: ObjectName Action Input Condition Reference Webservice getRestRequest Corresponding Code: HttpURLConnection.setRequestMethod(\"GET\"); InputStreamReader reader = new InputStreamReader(HttpURLConnection.getInputStream()); StringBuilder buf = new StringBuilder(); char[] cbuf = new char[2048]; int num; while (-1 != (num = reader.read(cbuf))) { buf.append(cbuf, 0, num); }","title":"getRestRequest"},{"location":"apiActions/webservice/#deleterestrequest","text":"Description : This function is used to perform DELETE action on a Rest API. Usage: ObjectName Action Input Condition Reference Webservice deleteRestRequest Corresponding Code: HttpURLConnection.setRequestMethod(\"DELETE\"); InputStreamReader reader = new InputStreamReader(HttpURLConnection.getInputStream()); StringBuilder buf = new StringBuilder(); char[] cbuf = new char[2048]; int num; while (-1 != (num = reader.read(cbuf))) { buf.append(cbuf, 0, num); }","title":"deleteRestRequest"},{"location":"apiActions/webservice/#assertresponsecode","text":"Description : This function is used to validate the response code of SOAP/REST response. Input Format : @Expected code Usage: ObjectName Action Input Condition Reference Webservice assertResponseCode @value << Hardcoded Input Webservice assertResponseCode Sheet:Column << Input from Datasheet Webservice assertResponseCode %dynamicVar% << Input from variable Corresponding Code: responsecodes.put(key, Integer.toString(httpConnections.get(key).getResponseCode())); /***************************************************/ @Action(object = ObjectType.WEBSERVICE, desc = \"Assert Response Code \", input = InputType.YES) public void assertResponseCode() { try { if (responsecodes.get(key).equals(Data)) { Report.updateTestLog(Action, \"Status code is : \" + Data, Status.PASSNS); } else { Report.updateTestLog(Action, \"Status code is : \" + responsecodes.get(key) + \" but should be \" + Data,Status.FAILNS); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error in validating response code :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } }","title":"assertResponseCode"},{"location":"apiActions/webservice/#assertresponsemessage","text":"Description : This function is used to validate the response message of SOAP/REST response. Input Format : @Expected message Usage: ObjectName Action Input Condition Reference Webservice assertResponseMessage @value << Hardcoded Input Webservice assertResponseMessage Sheet:Column << Input from Datasheet Webservice assertResponseMessage %dynamicVar% << Input from variable Corresponding Code: responsemessages.put(key, httpConnections.get(key).getResponseMessage()); /***************************************************/ @Action(object = ObjectType.WEBSERVICE, desc = \"Assert Response Message \", input = InputType.YES) public void assertResponseMessage() { try { if (responsemessages.get(key).equals(Data)) { Report.updateTestLog(Action, \"Response message is : \" + Data, Status.PASSNS); } else { Report.updateTestLog(Action,\"Response message is : \" + responsemessages.get(key) + \" but should be \" + Data, Status.FAILNS); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error in validating response message :\" + \"\\n\" + ex.getMessage(),Status.DEBUG); } }","title":"assertResponseMessage"},{"location":"apiActions/webservice/#assertresponsebodycontains","text":"Description : This function is used to validate whether the response body of SOAP/REST request contains an expected text or not. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Webservice assertResponsebodycontains @value << Hardcoded Input Webservice assertResponsebodycontains Sheet:Column << Input from Datasheet Webservice assertResponsebodycontains %dynamicVar% << Input from variable Corresponding Code: responsemessages.put(key, httpConnections.get(key).getResponseMessage()); /***************************************************/ @Action(object = ObjectType.WEBSERVICE, desc = \"Assert Response Body contains \", input = InputType.YES) public void assertResponsebodycontains() { try { if (responsebodies.get(key).contains(Data)) { Report.updateTestLog(Action, \"Response body contains : \" + Data, Status.PASSNS); } else { Report.updateTestLog(Action, \"Response body does not contain : \" + Data, Status.FAILNS); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error in validating response body :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } }","title":"assertResponsebodycontains"},{"location":"apiActions/webservice/#assertjsonelementequals","text":"Description : This function is used to validate whether a certain JSON tag of the response body of REST request contains an expected text or not. Input Format : @Expected Text Condition Format : JSON Path of the tag Usage: ObjectName Action Input Condition Reference Webservice assertJSONelementEquals @value JSONPath << Hardcoded Input Webservice assertJSONelementEquals Sheet:Column JSONPath << Input from Datasheet Webservice assertJSONelementEquals %dynamicVar% JSONPath << Input from variable Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Assert JSON Element Equals \", input = InputType.YES, condition = InputType.YES) public void assertJSONelementEquals() { try { String response = responsebodies.get(key); String jsonpath = Condition; String value = JsonPath.read(response, jsonpath).toString(); if (value.equals(Data)) { Report.updateTestLog(Action, \"Element text [\" + value + \"] is as expected\", Status.PASSNS); } else { Report.updateTestLog(Action, \"Element text is [\" + value + \"] but is expected to be [\" + Data + \"]\",Status.FAILNS); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error in validating JSON element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } }","title":"assertJSONelementEquals"},{"location":"apiActions/webservice/#assertxmlelementequals","text":"Description : This function is used to validate whether a certain XML tag of the response body of SOAP request contains an expected text or not. Input Format : @Expected Text Condition Format : XPath of the tag Usage: ObjectName Action Input Condition Reference Webservice assertXMLelementEquals @value XPath << Hardcoded Input Webservice assertXMLelementEquals Sheet:Column XPath << Input from Datasheet Webservice assertXMLelementEquals %dynamicVar% XPath << Input from variable Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Assert XML Element Equals \", input = InputType.YES, condition = InputType.YES) public void assertXMLelementEquals() { try { DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder dBuilder; InputSource inputSource = new InputSource(); inputSource.setCharacterStream(new StringReader(responsebodies.get(key))); dBuilder = dbFactory.newDocumentBuilder(); Document doc = dBuilder.parse(inputSource); doc.getDocumentElement().normalize(); XPath xPath = XPathFactory.newInstance().newXPath(); String expression = Condition; NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET); Node nNode = nodeList.item(0); String value = nNode.getNodeValue(); if (value.equals(Data)) { Report.updateTestLog(Description, \"Element text [\" + value + \"] is as expected\", Status.PASSNS); } else { Report.updateTestLog(Description, \"Element text is [\" + value + \"] but is expected to be [\"+Data+\"]\", Status.FAILNS); } } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException | SAXException ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Description, \"Error validating XML element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } }","title":"assertXMLelementEquals"},{"location":"apiActions/webservice/#storejsonelementindatasheet","text":"Description : This function is used to store a certain JSON tag value inside the response body of REST request, into a respective column of a given datasheet. Input Format : @Expected datasheet name:column name Condition Format : JSONPath of the tag Usage: ObjectName Action Input Condition Reference Webservice storeJSONelementInDataSheet Sheet:Column JSONPath << Datasheet to where value is supposed br stored Note: Ensure that your data sheet doesn't contain column names with spaces. Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Store JSON Element In DataSheet \", input = InputType.YES, condition = InputType.YES) public void storeJSONelementInDataSheet() { try { String strObj = Input; if (strObj.matches(\".*:.*\")) { try { System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration()); String sheetName = strObj.split(\":\", 2)[0]; String columnName = strObj.split(\":\", 2)[1]; String response = responsebodies.get(key); String jsonpath = Condition; String value = JsonPath.read(response, jsonpath).toString(); userData.putData(sheetName, columnName, value); Report.updateTestLog(Action, \"Element text [\" + value + \"] is stored in \" + strObj, Status.DONE); } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex); Report.updateTestLog(Action, \"Error Storing JSON element in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG); } } else { Report.updateTestLog(Action,\"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName\",Status.DEBUG); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error Storing JSON element in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG); } }","title":"storeJSONelementInDataSheet"},{"location":"apiActions/webservice/#storexmlelementindatasheet","text":"Description : This function is used to store a certain XML tag value inside the response body of SOAP request, into a respective column of a given datasheet. Input Format : @Expected datasheet name:column name Condition Format : XPath of the tag Usage: ObjectName Action Input Condition Reference Webservice storeXMLelementInDataSheet Sheet:Column XPath << Datasheet to where value is supposed br stored Note: Ensure that your data sheet doesn't contain column names with spaces. Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Store XML Element In DataSheet \", input = InputType.YES, condition = InputType.YES) public void storeXMLelementInDataSheet() { try { String strObj = Input; if (strObj.matches(\".*:.*\")) { try { String expression = \"\"; System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration()); String sheetName = strObj.split(\":\", 2)[0]; String columnName = strObj.split(\":\", 2)[1]; String xmlText = responsebodies.get(key); DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder dBuilder; InputSource inputSource = new InputSource(); inputSource.setCharacterStream(new StringReader(xmlText)); dBuilder = dbFactory.newDocumentBuilder(); Document doc = dBuilder.parse(inputSource); doc.getDocumentElement().normalize(); XPath xPath = XPathFactory.newInstance().newXPath(); if (Condition.matches(\"%.*%\")) expression = getVar(Condition); else expression = Condition; NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET); Node nNode = nodeList.item(0); String value = nNode.getNodeValue(); userData.putData(sheetName, columnName, value); Report.updateTestLog(Action, \"Element text [\" + value + \"] is stored in \" + strObj, Status.DONE); } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException| SAXException ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex); Report.updateTestLog(Action, \"Error Storing XML element in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG); } } else { Report.updateTestLog(Action, \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",Status.DEBUG); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error Storing XML element in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG); } }","title":"storeXMLelementInDataSheet"},{"location":"apiActions/webservice/#storejsonelement","text":"Description : This function is used to store a certain JSON tag value from the response body of REST request, into a variable. Input Format : @ JSONPath of the tag Condition Format : %variable% Usage: ObjectName Action Input Condition Reference Webservice storeJSONelement @ JSONPath %var% << Hardcoded Input Webservice storeJSONelement Sheet:Column containing JSONPath %var% << Input from Datasheet Webservice storeJSONelement %Var% containing JSONPath %var% << Input from variable Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Store JSON Element\", input = InputType.YES, condition = InputType.YES) public void storeJSONelement() { try { String variableName = Condition; String jsonpath = Data; if (variableName.matches(\"%.*%\")) { addVar(variableName, JsonPath.read(responsebodies.get(key), jsonpath).toString()); Report.updateTestLog(Action, \"JSON element value stored\", Status.DONE); } else { Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error Storing JSON element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } }","title":"storeJSONelement"},{"location":"apiActions/webservice/#storexmlelement","text":"Description : This function is used to store a certain XML tag value inside the response body of SOAP request, into a variable. Input Format : @ XPath of the tag Condition Format : %variable% Usage: ObjectName Action Input Condition Reference Webservice storeXMLelement @ XPath %var% << Hardcoded Input Webservice storeXMLelement Sheet:Column containing XPath %var% << Input from Datasheet Webservice storeXMLelement %Var% containing XPath %var% << Input from variable Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Store XML Element\", input = InputType.YES, condition = InputType.YES) public void storeXMLelement() { try { String variableName = Condition; String expression = Data; if (variableName.matches(\"%.*%\")) { DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder dBuilder; InputSource inputSource = new InputSource(); inputSource.setCharacterStream(new StringReader(responsebodies.get(key))); dBuilder = dbFactory.newDocumentBuilder(); Document doc = dBuilder.parse(inputSource); doc.getDocumentElement().normalize(); XPath xPath = XPathFactory.newInstance().newXPath(); NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET); Node nNode = nodeList.item(0); String value = nNode.getNodeValue(); addVar(variableName, value); Report.updateTestLog(Action, \"XML element value stored\", Status.DONE); } else { Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG); } } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException | SAXException ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error Storing XML element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } }","title":"storeXMLelement"},{"location":"apiActions/webservice/#storeresponsebodyindatasheet","text":"Description : This function is used to store the response body of SOAP/REST request, into a respective column of a given datasheet. Input Format : @Expected DatasheetName:ColumnName Usage: ObjectName Action Input Condition Reference Webservice storeResponseBodyInDataSheet Sheet:Column << Datasheet to where value is supposed br stored Note: Ensure that your data sheet doesn't contain column names with spaces. Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Store Response Message In DataSheet \", input = InputType.YES) public void storeResponseBodyInDataSheet() { try { String strObj = Input; if (strObj.matches(\".*:.*\")) { try { System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration()); String sheetName = strObj.split(\":\", 2)[0]; String columnName = strObj.split(\":\", 2)[1]; userData.putData(sheetName, columnName, responsebodies.get(key)); Report.updateTestLog(Action, \"Response body is stored in \" + strObj, Status.DONE); } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex); Report.updateTestLog(Action, \"Error Storing text in datasheet :\" + ex.getMessage(), Status.DEBUG); } } else { Report.updateTestLog(Action, \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",Status.DEBUG); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error Storing response body in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG); } }","title":"storeResponseBodyInDataSheet"},{"location":"apiActions/webservice/#storeheaderelementbyname","text":"Description : This function is used to store a Header Value of the response of SOAP/REST request, into a variable. Input Format : @ HeaderName Condition Format : %variable% Usage: ObjectName Action Input Condition Reference Webservice storeHeaderElementByName @ HeaderName %var% << Hardcoded Input Webservice storeHeaderElementByName Sheet:Column containing HeaderName %var% << Input from Datasheet Webservice storeHeaderElementByName %Var% containing HeaderName %var% << Input from variable Corresponding Code: @Action(object = ObjectType.WEBSERVICE, desc = \"Store Header Element in Datasheet\", input = InputType.YES, condition = InputType.YES) public void storeHeaderElementByName() { try { String variableName = Condition; String headerName = Data; if (variableName.matches(\"%.*%\")) { addVar(variableName, httpConnections.get(key).getHeaderField(headerName)); Report.updateTestLog(Action, \"Header value stored\", Status.DONE); } else { Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error Storing Header Element element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG); } }","title":"storeHeaderElementByName"},{"location":"apiActions/webservice/#setendpoint","text":"Description : This function is used to set the End Point for a Rest/SOAP API. Input Format : @EndPoint Usage: ObjectName Action Input Condition Reference Webservice setEndPoint @Endpoint (from Editor) << Hardcoded Input Webservice setEndPoint Sheet:Column << Input from Datasheet Webservice setEndPoint %dynamicVar% << Input from variable Inputs in the Input column can be either hardcoded , passed inside the Endpoint editor which is capable of parameterising the Endpoint (Press ctrl+space to see the list of variables available ), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: Performs opening of URL Connection httpConnections.put(key, (HttpURLConnection) url.openConnection());","title":"setEndPoint"},{"location":"apiActions/webservice/#addheader","text":"Description : This function is used to add a header for a Rest/SOAP API request. Input Format : @ HeaderName = HeaderValue Usage: ObjectName Action Input Condition Reference Webservice addHeader @ HeaderName = HeaderValue << Hardcoded Input Webservice addHeader Sheet:Column containing HeaderName = HeaderValue << Input from Datasheet Webservice addHeader %dynamicVar% containing HeaderName = HeaderValue << Input from variable Corresponding Code: This function adds all the Headers into a HashMap headerlist . Then those are applied to the request as : if (headerlist.size() > 0) { headerlist.forEach((header) -> { httpConnections.get(key).setRequestProperty(header.split(\"=\")[0], header.split(\"=\")[1]); }); }","title":"addHeader"},{"location":"apiActions/webservice/#closeconnection","text":"Description : This function is used to close a connection for a Rest/SOAP API request. Usage: ObjectName Action Input Condition Reference Webservice closeConnection Corresponding Code: Performs disconnection of the URL connection httpConnection.disconnect();","title":"closeConnection"},{"location":"dbActions/dbActions/","text":"Database Testing Actions initDBConnection Description : This function will initialize the database connection Usage: ObjectName Action Input Condition Reference Database initDBConnection Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Initiate the DB transaction\") public void initDBConnection() { try { if (verifyDbConnection()) { DatabaseMetaData metaData = dbconnection.getMetaData(); Report.updateTestLog(Action, \" Connected with \" + metaData.getDriverName() + \"\\n\" + \"Driver version \" + metaData.getDriverVersion() + \" \\n\" + \"Database product name \" + metaData.getDatabaseProductName() + \"\\n\" + \"Database product version \" + metaData.getDatabaseProductVersion(), Status.PASSNS); } else { Report.updateTestLog(Action, \"Could not able to make DB connection \", Status.FAILNS); } } catch (ClassNotFoundException | SQLException ex) { Report.updateTestLog(Action, \"Error connecting Database: \" + ex.getMessage(), Status.FAILNS); } } Internally uses the following Java logic : Class.forName(getDriver()); DriverManager.getConnection(getDataBaseData(DB_CONN_STR), getDataBaseData(DB_USER),getDataBaseData(DB_PWD)); /**OR**/ DriverManager.getConnection(getDataBaseData(DB_CONN_STR)); closeDBConnection Description : This function will close the database connection Usage: ObjectName Action Input Condition Reference Database closeDBConnection Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Close the DB Connection\") public void closeDBConnection() { try { if (closeConnection()) { Report.updateTestLog(Action, \"DB Connection is closed\", Status.PASSNS); } else { Report.updateTestLog(Action, \"Error in closing the DB Connection \", Status.FAILNS); } } catch (SQLException ex) { Report.updateTestLog(Action, \"Error: \" + ex.getMessage(), Status.FAILNS); } } Internally uses the following Java logic : dbconnection.close(); statement.close(); result.close(); assertDBResult Description : This function will assert if the SQL result contains a particular data in a specific column after the execution of a SQL select statement. Input Format : @ExpectedValue Condition : Name of the column in which result is expected Usage: ObjectName Action Input Condition Reference Object assertDBResult @value nameOfDBColumn PageName << Hardcoded Input Object assertDBResult Sheet:Column nameOfDBColumn PageName << Input from Datasheet Object assertDBResult %dynamicVar% nameOfDBColumn PageName << Input from variable Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Assert the value [<Input>] exist in the column [<Condition>] \", input = InputType.YES, condition = InputType.YES) public void assertDBResult() { if (assertDB(Condition, Data)) { Report.updateTestLog(Action, \"Value \" + Data + \" exist in the Database\", Status.PASSNS); } else { Report.updateTestLog(Action, \"Value \" + Data + \" doesn't exist in the Database\", Status.FAILNS); } } public boolean assertDB(String columnName, String condition) { boolean isExist = false; try { result.beforeFirst(); if (getColumnIndex(columnName) != -1) { while (result.next()) { if (Objects.equal(result.getString(columnName), condition)) { isExist = true; break; } } } else { Report.updateTestLog(Action, \"Column \" + columnName + \" doesn't exist\", Status.FAIL); } } catch (SQLException ex) { Report.updateTestLog(Action, \"Error asserting the value in DB \" + ex.getMessage(), Status.FAIL); return false; } return isExist; } executeSelectQuery Description : This function will execute the given select query on the database Input Format : @ SQL Query Example: ObjectName Action Input Condition Database executeSelectQuery @select * from tableName Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Execute the Query in [<Input>]\", input = InputType.YES) public void executeSelectQuery() { try { executeSelect(); Report.updateTestLog(Action, \"Executed Select Query\", Status.DONE); } catch (SQLException ex) { Report.updateTestLog(Action, \"Error executing the SQL Query: \" + ex.getMessage(), Status.FAILNS); } } public void executeSelect() throws SQLException { initialize(); result = statement.executeQuery(Data); resultData = result.getMetaData(); populateColumnNames(); } executeDMLQuery Description : This query will execute an SQL DML statement on the database and will commit the results back to the database Input Format : @ SQL Query Example: ObjectName Action Input Condition Database executeDMLQuery @UPDATE public.\"Employee\" SET \"Age\"=27 WHERE id = 123456; Database executeDMLQuery Sheet:Column Database executeDMLQuery %dynamicVar% Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Execute the Query in [<Input>]\", input = InputType.YES) public void executeDMLQuery() { try { if (executeDML()) { Report.updateTestLog(Action, \" Table updated by using \" + Data, Status.PASSNS); } else { Report.updateTestLog(Action, \" Table not updated by using \" + Data, Status.FAILNS); } } catch (SQLException ex) { Report.updateTestLog(Action, \"Error executing the SQL Query: \" + ex.getMessage(), Status.FAILNS); } } storeDBValueinDataSheet Description : This action will store the value of a specific cell(from specific row and column) from the result of an SQL select statement in the data sheet Input Format : @SheetName:ColumnName , Condition : DatabaseColumnName, ResultSetRowNumber Example: ObjectName Action Input Condition Database storeDBValueinDataSheet Sheet:Column productName, 1 Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Save DB value in Test Data Sheet\", input = InputType.YES, condition = InputType.YES) public void storeDBValueinDataSheet() { try { if (Condition != null && Input != null) { int rowIndex = 1; result.first(); String[] sheetDetail = Input.split(\":\"); String sheetName = sheetDetail[0]; String columnName = sheetDetail[1]; String value; String[] split = Condition.split(\",\"); if (split.length > 1) { rowIndex = Integer.parseInt(split[1]); } if (!result.absolute(rowIndex)) { Report.updateTestLog(Action, \"Row : \" + rowIndex + \" doesn't exist \", Status.FAILNS); } else if (getColumnIndex(split[0]) != -1) { value = result.getString(split[0]); userData.putData(sheetName, columnName, value); Report.updateTestLog(Action, \"Value from DB \" + value + \" stored into \" + \"the data sheet\", Status.DONE); } else { Report.updateTestLog(Action, \"Column : \" + split[0] + \" doesn't exist\", Status.FAILNS); } } else { Report.updateTestLog(Action, \"Incorrect Input or Condition format\", Status.FAILNS); } } catch (SQLException ex) { Report.updateTestLog(Action, \"Error: \" + ex.getMessage(), Status.FAILNS); System.out.println(\"Invalid Data \" + Condition); } } storeValueInVariable Description : This action will store the value of a specific cell(from specific row and column) from the result of an SQL select statement in a user defined variable Input Format : %variableName% , Condition : DatabaseColumnName, ResultSetRowNumber Example: ObjectName Action Input Condition Database storeValueInVariable %var% productName, 1 Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Store it in the variable from the DB column [<Condition>] \", input = InputType.YES, condition = InputType.YES) public void storeValueInVariable() { storeValue(Input, Condition, false); if (getVar(Input) != null && !getVar(Input).equals(\"\")) { Report.updateTestLog(Action, \"Stored in the variable\", Status.PASSNS); } else { Report.updateTestLog(Action, \"Value doesn't stored in Global variable\", Status.FAILNS); } } storeValueInGlobalVariable Description : This action will store the value of a specific cell(from specific row and column) from the result of an SQL select statement in global variable Input Format : %variableName% , Condition : DatabaseColumnName, ResultSetRowNumber Example: ObjectName Action Input Condition Database storeValueInGlobalVariable %var% productName, 1 Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Store it in Global variable from the DB column [<Condition>] \", input = InputType.YES, condition = InputType.YES) public void storeValueInGlobalVariable() { storeValue(Input, Condition, true); if (getVar(Input) != null && !getVar(Input).equals(\"\")) { Report.updateTestLog(Action, \"Stored in Global variable\", Status.PASSNS); } else { Report.updateTestLog(Action, \"Value doesn't stored in Global variable\", Status.FAILNS); } } storeResultInDataSheet Description : This action will store the result of an SQL select statement in the test data sheet Input Format : @ SQL Query , Condition : DatasheetName Example: ObjectName Action Input Condition Database storeResultInDataSheet select * from public.\"Employee\" Sheet:Column Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Query and save the result in Datasheet \", input = InputType.YES, condition = InputType.YES) public void storeResultInDataSheet() { try { executeSelect(); result.last(); int totalRows = result.getRow(); result.beforeFirst(); int totalCols = resultData.getColumnCount(); for (int colIndex = 0; colIndex < totalCols; colIndex++) { result.beforeFirst(); for (int rowIndex = 1; rowIndex <= totalRows; rowIndex++) { if (result.absolute(rowIndex)) { userData.putData(Condition, colNames.get(colIndex), result.getString(colIndex + 1), userData.getIteration(), Integer.toString(rowIndex)); } else { Report.updateTestLog(Action, \"Row \" + rowIndex + \" doesn't exist\", Status.FAILNS); return; } } } Report.updateTestLog(Action, \" SQL Query Result has been saved in DataSheet: \", Status.PASSNS); } catch (SQLException ex) { Report.updateTestLog(Action, \"Error executing the SQL Query: \" + ex.getMessage(), Status.FAILNS); } } storeResultInVariable Description : This action will store the result of an SQL select statement in a user defined variable. The select query in this case should return a single column, the query may return multiple rows. In case the query returns a single value, the value will be stored in the variable name given (for eg:- var), In case if the select query returns multiple rows, multiple variables will be created by adding indexes to the variable name given and the value will be stored in these variables(for eg:- var1, var2, var3.....) Input Format : @ SQL Query , Condition : %VariableName% Example: ObjectName Action Input Condition Database storeResultInVariable select * from public.\"Employee\" %var% Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Query and save the result in variable(s) \", input = InputType.YES, condition = InputType.YES) public void storeResultInVariable() { String variableName = Condition; try { executeSelect(); result.last(); int totalRows = result.getRow(); result.beforeFirst(); for (int index = 1; index <= totalRows; index++) { if (result.absolute(index)) { if (index == 1) { addVar(variableName, result.getString(1)); } else { String temp = variableName.replaceAll(\"[%]$\", index + \"%\"); addVar(temp, result.getString(1)); } } else { Report.updateTestLog(Action, \"Row \" + index + \" doesn't exist\", Status.FAILNS); return; } } Report.updateTestLog(Action, \" SQL Query Result has been saved in the run time variable(s) \", Status.PASSNS); } catch (SQLException ex) { Report.updateTestLog(Action, \"Error executing the SQL Query: \" + ex.getMessage(), Status.FAILNS); } } verifyWithDataSheet Description : Verify Table values with the Test Data sheet Input Format : Example: ObjectName Action Input Condition Database verifyWithDataSheet select * from public.\"Employee\" %var% Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Verify Table values with the Test Data sheet \", input = InputType.YES) public void verifyWithDataSheet() { String sheetName = Data; TestDataView dataView; if (!sheetName.isEmpty() && (dataView = userData.getTestData(sheetName)) != null) { List<String> columns = dataView.columns(); boolean isFailed = false; StringBuilder desc = new StringBuilder(); for (String column : columns.subList(4, columns.size())) { if (assertDB(column, dataView.getField(column))) { desc.append(\"Value \").append(userData.getData(sheetName, column)).append(\" exist in the Database\").append(\"\\n\"); } else { isFailed = true; desc.append(\"Value \").append(userData.getData(sheetName, column)).append(\" doesn't exist in the Database\").append(\"\\n\"); } } Report.updateTestLog(Action, desc.toString(), isFailed ? Status.FAILNS : Status.PASSNS); } else { Report.updateTestLog(Action, \"Incorrect Sheet Name\", Status.FAILNS); } }","title":"Database Testing Actions"},{"location":"dbActions/dbActions/#database-testing-actions","text":"","title":"Database Testing Actions"},{"location":"dbActions/dbActions/#initdbconnection","text":"Description : This function will initialize the database connection Usage: ObjectName Action Input Condition Reference Database initDBConnection Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Initiate the DB transaction\") public void initDBConnection() { try { if (verifyDbConnection()) { DatabaseMetaData metaData = dbconnection.getMetaData(); Report.updateTestLog(Action, \" Connected with \" + metaData.getDriverName() + \"\\n\" + \"Driver version \" + metaData.getDriverVersion() + \" \\n\" + \"Database product name \" + metaData.getDatabaseProductName() + \"\\n\" + \"Database product version \" + metaData.getDatabaseProductVersion(), Status.PASSNS); } else { Report.updateTestLog(Action, \"Could not able to make DB connection \", Status.FAILNS); } } catch (ClassNotFoundException | SQLException ex) { Report.updateTestLog(Action, \"Error connecting Database: \" + ex.getMessage(), Status.FAILNS); } } Internally uses the following Java logic : Class.forName(getDriver()); DriverManager.getConnection(getDataBaseData(DB_CONN_STR), getDataBaseData(DB_USER),getDataBaseData(DB_PWD)); /**OR**/ DriverManager.getConnection(getDataBaseData(DB_CONN_STR));","title":"initDBConnection"},{"location":"dbActions/dbActions/#closedbconnection","text":"Description : This function will close the database connection Usage: ObjectName Action Input Condition Reference Database closeDBConnection Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Close the DB Connection\") public void closeDBConnection() { try { if (closeConnection()) { Report.updateTestLog(Action, \"DB Connection is closed\", Status.PASSNS); } else { Report.updateTestLog(Action, \"Error in closing the DB Connection \", Status.FAILNS); } } catch (SQLException ex) { Report.updateTestLog(Action, \"Error: \" + ex.getMessage(), Status.FAILNS); } } Internally uses the following Java logic : dbconnection.close(); statement.close(); result.close();","title":"closeDBConnection"},{"location":"dbActions/dbActions/#assertdbresult","text":"Description : This function will assert if the SQL result contains a particular data in a specific column after the execution of a SQL select statement. Input Format : @ExpectedValue Condition : Name of the column in which result is expected Usage: ObjectName Action Input Condition Reference Object assertDBResult @value nameOfDBColumn PageName << Hardcoded Input Object assertDBResult Sheet:Column nameOfDBColumn PageName << Input from Datasheet Object assertDBResult %dynamicVar% nameOfDBColumn PageName << Input from variable Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Assert the value [<Input>] exist in the column [<Condition>] \", input = InputType.YES, condition = InputType.YES) public void assertDBResult() { if (assertDB(Condition, Data)) { Report.updateTestLog(Action, \"Value \" + Data + \" exist in the Database\", Status.PASSNS); } else { Report.updateTestLog(Action, \"Value \" + Data + \" doesn't exist in the Database\", Status.FAILNS); } } public boolean assertDB(String columnName, String condition) { boolean isExist = false; try { result.beforeFirst(); if (getColumnIndex(columnName) != -1) { while (result.next()) { if (Objects.equal(result.getString(columnName), condition)) { isExist = true; break; } } } else { Report.updateTestLog(Action, \"Column \" + columnName + \" doesn't exist\", Status.FAIL); } } catch (SQLException ex) { Report.updateTestLog(Action, \"Error asserting the value in DB \" + ex.getMessage(), Status.FAIL); return false; } return isExist; }","title":"assertDBResult"},{"location":"dbActions/dbActions/#executeselectquery","text":"Description : This function will execute the given select query on the database Input Format : @ SQL Query Example: ObjectName Action Input Condition Database executeSelectQuery @select * from tableName Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Execute the Query in [<Input>]\", input = InputType.YES) public void executeSelectQuery() { try { executeSelect(); Report.updateTestLog(Action, \"Executed Select Query\", Status.DONE); } catch (SQLException ex) { Report.updateTestLog(Action, \"Error executing the SQL Query: \" + ex.getMessage(), Status.FAILNS); } } public void executeSelect() throws SQLException { initialize(); result = statement.executeQuery(Data); resultData = result.getMetaData(); populateColumnNames(); }","title":"executeSelectQuery"},{"location":"dbActions/dbActions/#executedmlquery","text":"Description : This query will execute an SQL DML statement on the database and will commit the results back to the database Input Format : @ SQL Query Example: ObjectName Action Input Condition Database executeDMLQuery @UPDATE public.\"Employee\" SET \"Age\"=27 WHERE id = 123456; Database executeDMLQuery Sheet:Column Database executeDMLQuery %dynamicVar% Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Execute the Query in [<Input>]\", input = InputType.YES) public void executeDMLQuery() { try { if (executeDML()) { Report.updateTestLog(Action, \" Table updated by using \" + Data, Status.PASSNS); } else { Report.updateTestLog(Action, \" Table not updated by using \" + Data, Status.FAILNS); } } catch (SQLException ex) { Report.updateTestLog(Action, \"Error executing the SQL Query: \" + ex.getMessage(), Status.FAILNS); } }","title":"executeDMLQuery"},{"location":"dbActions/dbActions/#storedbvalueindatasheet","text":"Description : This action will store the value of a specific cell(from specific row and column) from the result of an SQL select statement in the data sheet Input Format : @SheetName:ColumnName , Condition : DatabaseColumnName, ResultSetRowNumber Example: ObjectName Action Input Condition Database storeDBValueinDataSheet Sheet:Column productName, 1 Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Save DB value in Test Data Sheet\", input = InputType.YES, condition = InputType.YES) public void storeDBValueinDataSheet() { try { if (Condition != null && Input != null) { int rowIndex = 1; result.first(); String[] sheetDetail = Input.split(\":\"); String sheetName = sheetDetail[0]; String columnName = sheetDetail[1]; String value; String[] split = Condition.split(\",\"); if (split.length > 1) { rowIndex = Integer.parseInt(split[1]); } if (!result.absolute(rowIndex)) { Report.updateTestLog(Action, \"Row : \" + rowIndex + \" doesn't exist \", Status.FAILNS); } else if (getColumnIndex(split[0]) != -1) { value = result.getString(split[0]); userData.putData(sheetName, columnName, value); Report.updateTestLog(Action, \"Value from DB \" + value + \" stored into \" + \"the data sheet\", Status.DONE); } else { Report.updateTestLog(Action, \"Column : \" + split[0] + \" doesn't exist\", Status.FAILNS); } } else { Report.updateTestLog(Action, \"Incorrect Input or Condition format\", Status.FAILNS); } } catch (SQLException ex) { Report.updateTestLog(Action, \"Error: \" + ex.getMessage(), Status.FAILNS); System.out.println(\"Invalid Data \" + Condition); } }","title":"storeDBValueinDataSheet"},{"location":"dbActions/dbActions/#storevalueinvariable","text":"Description : This action will store the value of a specific cell(from specific row and column) from the result of an SQL select statement in a user defined variable Input Format : %variableName% , Condition : DatabaseColumnName, ResultSetRowNumber Example: ObjectName Action Input Condition Database storeValueInVariable %var% productName, 1 Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Store it in the variable from the DB column [<Condition>] \", input = InputType.YES, condition = InputType.YES) public void storeValueInVariable() { storeValue(Input, Condition, false); if (getVar(Input) != null && !getVar(Input).equals(\"\")) { Report.updateTestLog(Action, \"Stored in the variable\", Status.PASSNS); } else { Report.updateTestLog(Action, \"Value doesn't stored in Global variable\", Status.FAILNS); } }","title":"storeValueInVariable"},{"location":"dbActions/dbActions/#storevalueinglobalvariable","text":"Description : This action will store the value of a specific cell(from specific row and column) from the result of an SQL select statement in global variable Input Format : %variableName% , Condition : DatabaseColumnName, ResultSetRowNumber Example: ObjectName Action Input Condition Database storeValueInGlobalVariable %var% productName, 1 Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Store it in Global variable from the DB column [<Condition>] \", input = InputType.YES, condition = InputType.YES) public void storeValueInGlobalVariable() { storeValue(Input, Condition, true); if (getVar(Input) != null && !getVar(Input).equals(\"\")) { Report.updateTestLog(Action, \"Stored in Global variable\", Status.PASSNS); } else { Report.updateTestLog(Action, \"Value doesn't stored in Global variable\", Status.FAILNS); } }","title":"storeValueInGlobalVariable"},{"location":"dbActions/dbActions/#storeresultindatasheet","text":"Description : This action will store the result of an SQL select statement in the test data sheet Input Format : @ SQL Query , Condition : DatasheetName Example: ObjectName Action Input Condition Database storeResultInDataSheet select * from public.\"Employee\" Sheet:Column Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Query and save the result in Datasheet \", input = InputType.YES, condition = InputType.YES) public void storeResultInDataSheet() { try { executeSelect(); result.last(); int totalRows = result.getRow(); result.beforeFirst(); int totalCols = resultData.getColumnCount(); for (int colIndex = 0; colIndex < totalCols; colIndex++) { result.beforeFirst(); for (int rowIndex = 1; rowIndex <= totalRows; rowIndex++) { if (result.absolute(rowIndex)) { userData.putData(Condition, colNames.get(colIndex), result.getString(colIndex + 1), userData.getIteration(), Integer.toString(rowIndex)); } else { Report.updateTestLog(Action, \"Row \" + rowIndex + \" doesn't exist\", Status.FAILNS); return; } } } Report.updateTestLog(Action, \" SQL Query Result has been saved in DataSheet: \", Status.PASSNS); } catch (SQLException ex) { Report.updateTestLog(Action, \"Error executing the SQL Query: \" + ex.getMessage(), Status.FAILNS); } }","title":"storeResultInDataSheet"},{"location":"dbActions/dbActions/#storeresultinvariable","text":"Description : This action will store the result of an SQL select statement in a user defined variable. The select query in this case should return a single column, the query may return multiple rows. In case the query returns a single value, the value will be stored in the variable name given (for eg:- var), In case if the select query returns multiple rows, multiple variables will be created by adding indexes to the variable name given and the value will be stored in these variables(for eg:- var1, var2, var3.....) Input Format : @ SQL Query , Condition : %VariableName% Example: ObjectName Action Input Condition Database storeResultInVariable select * from public.\"Employee\" %var% Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Query and save the result in variable(s) \", input = InputType.YES, condition = InputType.YES) public void storeResultInVariable() { String variableName = Condition; try { executeSelect(); result.last(); int totalRows = result.getRow(); result.beforeFirst(); for (int index = 1; index <= totalRows; index++) { if (result.absolute(index)) { if (index == 1) { addVar(variableName, result.getString(1)); } else { String temp = variableName.replaceAll(\"[%]$\", index + \"%\"); addVar(temp, result.getString(1)); } } else { Report.updateTestLog(Action, \"Row \" + index + \" doesn't exist\", Status.FAILNS); return; } } Report.updateTestLog(Action, \" SQL Query Result has been saved in the run time variable(s) \", Status.PASSNS); } catch (SQLException ex) { Report.updateTestLog(Action, \"Error executing the SQL Query: \" + ex.getMessage(), Status.FAILNS); } }","title":"storeResultInVariable"},{"location":"dbActions/dbActions/#verifywithdatasheet","text":"Description : Verify Table values with the Test Data sheet Input Format : Example: ObjectName Action Input Condition Database verifyWithDataSheet select * from public.\"Employee\" %var% Corresponding Code: @Action(object = ObjectType.DATABASE, desc = \"Verify Table values with the Test Data sheet \", input = InputType.YES) public void verifyWithDataSheet() { String sheetName = Data; TestDataView dataView; if (!sheetName.isEmpty() && (dataView = userData.getTestData(sheetName)) != null) { List<String> columns = dataView.columns(); boolean isFailed = false; StringBuilder desc = new StringBuilder(); for (String column : columns.subList(4, columns.size())) { if (assertDB(column, dataView.getField(column))) { desc.append(\"Value \").append(userData.getData(sheetName, column)).append(\" exist in the Database\").append(\"\\n\"); } else { isFailed = true; desc.append(\"Value \").append(userData.getData(sheetName, column)).append(\" doesn't exist in the Database\").append(\"\\n\"); } } Report.updateTestLog(Action, desc.toString(), isFailed ? Status.FAILNS : Status.PASSNS); } else { Report.updateTestLog(Action, \"Incorrect Sheet Name\", Status.FAILNS); } }","title":"verifyWithDataSheet"},{"location":"webActions/additionalassertions/","text":"Additional Assertions assertPageSource Description : This function will check if the page source content of the current page is matching with the expected page source content provided by the user. Input Format : @Expected PageSource content Usage: ObjectName Action Input Condition Reference Object assertPageSource @value PageName << Hardcoded Input Object assertPageSource Sheet:Column PageName << Input from Datasheet Object assertPageSource %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if Page source of current page is: [<Data>]\", input = InputType.YES) public void assertPageSource() { if (Driver.getPageSource().equals(Data)) { Report.updateTestLog(Action, \"Current Page Source is matched with the expected Page Source\", Status.DONE); } else { throw new ForcedException(Action, \"Current Page Source doesn't match with the expected Page Source\"); } } Description : This function will check if the text of the input element adjacent to provided label element equals the given text(in the Input Column) Usage: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertVariable Description : This function will assert a stored variable's value with the value given by the user. Input Format : @%var_name%=Expected Value Usage: ObjectName Action Input Condition Reference Browser assertVariable @value PageName << Hardcoded Input Browser assertVariable Sheet:Column PageName << Input from Datasheet Browser assertVariable %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER,desc = \"Assert if Key:Value -> [<Data>] is valid\",input = InputType.YES) public void assertVariable() throws RuntimeException { try { String strObj = Data; String[] strTemp = strObj.split(\"=\", 2); String strAns = strTemp[0].matches(\"%.+%\") ? getVar(strTemp[0]) : strTemp[0]; if (strAns.equals(strTemp[1])) { System.out.println(\"Condition '\" + Input + \"' is true \"); Report.updateTestLog(\"assertVariable\",\"Variable matched with Provided data\", Status.PASS); } else { System.out.println(\"Condition '\" + Input + \"' is false \"); throw new Exception(\"Variable did not match with provided data\"); } } catch (Exception ex) { Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, ex); throw new ForcedException(\"assertVariable\", ex.getMessage()); } } assertCookiePresent Description : This function will assert the presence of a cookie by it's specified name and store the result in a variable. Input Format : @CookieName Usage: ObjectName Action Input Condition Reference Browser assertCookiePresent @value %variable% PageName << Hardcoded Input Browser assertCookiePresent Sheet:Column %variable% PageName << Input from Datasheet Browser assertCookiePresent %dynamicVar% %variable% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if cookie name: [<Data>] is present\", input = InputType.YES) public void assertCookiePresent() { try { String strCookieName = Data; if ((Driver.manage().getCookieNamed(strCookieName) != null)) { System.out.println(\"assertCookiePresent Passed\"); Report.updateTestLog(\"assertCookiePresent\",\"Cookie name matched with the data provided\",Status.PASS); } else { throw new Exception(\"Cookie name did not match with data provided\"); } } catch (Exception ex) { System.out.println(\"assertCookiePresent Failed\"); Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, ex); throw new ForcedException(\"assertCookiePresent\", ex.getMessage()); } } assertCookieByName Description : This function will assert the cookie's (the name of the cookie is given is specified in the input column) value with the one in the input column Input Format : @CookieName:CookieValue Usage: ObjectName Action Input Condition Reference Browser assertCookieByName @data PageName << Hardcoded Input Inputs in the Input column can be passed from hardcoded (in this case the data is preceded by a \" @ \"), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if cookie: [<Object>] has name: [<Data>]\", input = InputType.YES) public void assertCookieByName() { try { String strCookieName = Data.split(\":\", 2)[0]; String strCookieValue = Data.split(\":\", 2)[1]; if (Driver.manage().getCookieNamed(strCookieName) != null) { if ((Driver.manage().getCookieNamed(strCookieName).getValue().equals(strCookieValue))) { System.out.println(\"assertCookieByName Passed\"); Report.updateTestLog(\"assertCookieByName\",\"Cookie name matched with provided data\",Status.PASS); } else { throw new Exception(\"Cookie value did not match with provided data\"); } } else { throw new Exception(\"Cookie with the name '\" + strCookieName + \"' did not exist\"); } } catch (Exception ex) { System.out.println(\"assertCookieByName Failed\"); Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, ex); throw new ForcedException(\"assertCookieByName\", ex.getMessage()); } } assertAlertText Description : This function will assert the text present in alert with the given text. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Browser assertAlertText @value PageName << Hardcoded Input Browser assertAlertText Sheet:Column PageName << Input from Datasheet Browser assertAlertText %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if an alert with text: [<Data>] is present\", input = InputType.YES) public void assertAlertText() { try { String strExpAlertText = Data; if (isAlertPresent()) { if ((Driver.switchTo().alert().getText().equals(strExpAlertText))) { System.out.println(\"assertAlertText Passed\"); Report.updateTestLog(\"assertAlertText\",\"Alert text matched with provided data\",Status.PASSNS); } else { throw new Exception(\"Alert text did not match with the provided data\"); } } else { throw new Exception(\"Alert not present\"); } } catch (Exception ex) { System.out.println(\"assertAlertText Failed\"); Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, ex); throw new ForcedException(\"assertAlertText\", ex.getMessage()); } } assertAlertPresent Description : This function will assert the presence of an alert Usage: ObjectName Action Input Condition Reference Browser assertAlertPresent Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if an alert is present \") public void assertAlertPresent() { try { if ((isAlertPresent())) { System.out.println(\"assertAIertPresent Passed\"); Report.updateTestLog(\"assertAIertPresent\", \"Alert present\",Status.PASSNS); } else { throw new Exception(\"Alert not present\"); } } catch (Exception ex) { System.out.println(\"assertAIertPresent Failed\"); Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, ex); throw new ForcedException(\"assertAIertPresent\", ex.getMessage()); } } assertEval Description : This function will assert if the evaluated javascript expression equals the expected value provided. Input Format : @javascript:expectedvalue. Usage: ObjectName Action Input Condition Reference Browser assertEval @value PageName << Hardcoded Input Browser assertEval Sheet:Column PageName << Input from Datasheet Browser assertEval %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER,desc = \"Assert if the evaluated javascript expression equals [<Data>]\",input = InputType.YES) public void assertEval() { try { JavascriptExecutor js = (JavascriptExecutor) Driver; String strExpScript = Data.split(\":\", 2)[0]; String strExpValue = Data.split(\":\", 2)[1]; Object result = js.executeScript(strExpScript); if (result != null && result.toString().trim().equals(strExpValue)) { System.out.println(\"assertEval Passed\"); Report.updateTestLog(\"assertEval\",\"JS script return value matched with the expected result\",Status.DONE); } else { throw new Exception(\"JS script return value did not match with the expected result\"); } } catch (Exception ex) { System.out.println(\"assertEval Failed\"); Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, ex); throw new ForcedException(\"assertEval\", ex.getMessage()); } } assertVariableFromDataSheet Description : This function will check if the variable given in the condition column has a value equals to the value from the datasheet mentioned in the input column. Input Format : Datasheet name:Column name Condition Format : %Variable name% Usage: ObjectName Action Input Condition Reference Browser assertVariableFromDataSheet Sheet:Column %variable% PageName << Input from Datasheet Inputs in the Input column can be either passed from the data sheet ( datasheet name : column name ) as given in the above example. Corresponding Code: 8@Action(object = ObjectType.BROWSER, desc = \"Assert if the variable value matches with given value from datasheet(variable:datasheet-> [<Data>] )\", input = InputType.YES, condition = InputType.YES) public void assertVariableFromDataSheet() throws RuntimeException { try { String strAns = getVar(Condition); if (strAns.equals(Data)) { System.out.println(\"Variable \" + Condition + \" equals \" + Input); Report.updateTestLog(Action, \"Variable is matched with the expected result\", Status.DONE); } else { System.out.println(\"Variable \" + Condition + \" is not equal \" + Input); throw new ForcedException(Action, \"Variable did not match with provided data\"); } } catch (Exception e) { Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, e); throw new ForcedException(\"assertVariableFromDataSheet\", e.getMessage()); } }","title":"Additional Assertions"},{"location":"webActions/additionalassertions/#additional-assertions","text":"","title":"Additional Assertions"},{"location":"webActions/additionalassertions/#assertpagesource","text":"Description : This function will check if the page source content of the current page is matching with the expected page source content provided by the user. Input Format : @Expected PageSource content Usage: ObjectName Action Input Condition Reference Object assertPageSource @value PageName << Hardcoded Input Object assertPageSource Sheet:Column PageName << Input from Datasheet Object assertPageSource %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if Page source of current page is: [<Data>]\", input = InputType.YES) public void assertPageSource() { if (Driver.getPageSource().equals(Data)) { Report.updateTestLog(Action, \"Current Page Source is matched with the expected Page Source\", Status.DONE); } else { throw new ForcedException(Action, \"Current Page Source doesn't match with the expected Page Source\"); } } Description : This function will check if the text of the input element adjacent to provided label element equals the given text(in the Input Column) Usage: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertPageSource"},{"location":"webActions/additionalassertions/#assertvariable","text":"Description : This function will assert a stored variable's value with the value given by the user. Input Format : @%var_name%=Expected Value Usage: ObjectName Action Input Condition Reference Browser assertVariable @value PageName << Hardcoded Input Browser assertVariable Sheet:Column PageName << Input from Datasheet Browser assertVariable %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER,desc = \"Assert if Key:Value -> [<Data>] is valid\",input = InputType.YES) public void assertVariable() throws RuntimeException { try { String strObj = Data; String[] strTemp = strObj.split(\"=\", 2); String strAns = strTemp[0].matches(\"%.+%\") ? getVar(strTemp[0]) : strTemp[0]; if (strAns.equals(strTemp[1])) { System.out.println(\"Condition '\" + Input + \"' is true \"); Report.updateTestLog(\"assertVariable\",\"Variable matched with Provided data\", Status.PASS); } else { System.out.println(\"Condition '\" + Input + \"' is false \"); throw new Exception(\"Variable did not match with provided data\"); } } catch (Exception ex) { Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, ex); throw new ForcedException(\"assertVariable\", ex.getMessage()); } }","title":"assertVariable"},{"location":"webActions/additionalassertions/#assertcookiepresent","text":"Description : This function will assert the presence of a cookie by it's specified name and store the result in a variable. Input Format : @CookieName Usage: ObjectName Action Input Condition Reference Browser assertCookiePresent @value %variable% PageName << Hardcoded Input Browser assertCookiePresent Sheet:Column %variable% PageName << Input from Datasheet Browser assertCookiePresent %dynamicVar% %variable% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if cookie name: [<Data>] is present\", input = InputType.YES) public void assertCookiePresent() { try { String strCookieName = Data; if ((Driver.manage().getCookieNamed(strCookieName) != null)) { System.out.println(\"assertCookiePresent Passed\"); Report.updateTestLog(\"assertCookiePresent\",\"Cookie name matched with the data provided\",Status.PASS); } else { throw new Exception(\"Cookie name did not match with data provided\"); } } catch (Exception ex) { System.out.println(\"assertCookiePresent Failed\"); Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, ex); throw new ForcedException(\"assertCookiePresent\", ex.getMessage()); } }","title":"assertCookiePresent"},{"location":"webActions/additionalassertions/#assertcookiebyname","text":"Description : This function will assert the cookie's (the name of the cookie is given is specified in the input column) value with the one in the input column Input Format : @CookieName:CookieValue Usage: ObjectName Action Input Condition Reference Browser assertCookieByName @data PageName << Hardcoded Input Inputs in the Input column can be passed from hardcoded (in this case the data is preceded by a \" @ \"), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if cookie: [<Object>] has name: [<Data>]\", input = InputType.YES) public void assertCookieByName() { try { String strCookieName = Data.split(\":\", 2)[0]; String strCookieValue = Data.split(\":\", 2)[1]; if (Driver.manage().getCookieNamed(strCookieName) != null) { if ((Driver.manage().getCookieNamed(strCookieName).getValue().equals(strCookieValue))) { System.out.println(\"assertCookieByName Passed\"); Report.updateTestLog(\"assertCookieByName\",\"Cookie name matched with provided data\",Status.PASS); } else { throw new Exception(\"Cookie value did not match with provided data\"); } } else { throw new Exception(\"Cookie with the name '\" + strCookieName + \"' did not exist\"); } } catch (Exception ex) { System.out.println(\"assertCookieByName Failed\"); Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, ex); throw new ForcedException(\"assertCookieByName\", ex.getMessage()); } }","title":"assertCookieByName"},{"location":"webActions/additionalassertions/#assertalerttext","text":"Description : This function will assert the text present in alert with the given text. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Browser assertAlertText @value PageName << Hardcoded Input Browser assertAlertText Sheet:Column PageName << Input from Datasheet Browser assertAlertText %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if an alert with text: [<Data>] is present\", input = InputType.YES) public void assertAlertText() { try { String strExpAlertText = Data; if (isAlertPresent()) { if ((Driver.switchTo().alert().getText().equals(strExpAlertText))) { System.out.println(\"assertAlertText Passed\"); Report.updateTestLog(\"assertAlertText\",\"Alert text matched with provided data\",Status.PASSNS); } else { throw new Exception(\"Alert text did not match with the provided data\"); } } else { throw new Exception(\"Alert not present\"); } } catch (Exception ex) { System.out.println(\"assertAlertText Failed\"); Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, ex); throw new ForcedException(\"assertAlertText\", ex.getMessage()); } }","title":"assertAlertText"},{"location":"webActions/additionalassertions/#assertalertpresent","text":"Description : This function will assert the presence of an alert Usage: ObjectName Action Input Condition Reference Browser assertAlertPresent Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if an alert is present \") public void assertAlertPresent() { try { if ((isAlertPresent())) { System.out.println(\"assertAIertPresent Passed\"); Report.updateTestLog(\"assertAIertPresent\", \"Alert present\",Status.PASSNS); } else { throw new Exception(\"Alert not present\"); } } catch (Exception ex) { System.out.println(\"assertAIertPresent Failed\"); Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, ex); throw new ForcedException(\"assertAIertPresent\", ex.getMessage()); } }","title":"assertAlertPresent"},{"location":"webActions/additionalassertions/#asserteval","text":"Description : This function will assert if the evaluated javascript expression equals the expected value provided. Input Format : @javascript:expectedvalue. Usage: ObjectName Action Input Condition Reference Browser assertEval @value PageName << Hardcoded Input Browser assertEval Sheet:Column PageName << Input from Datasheet Browser assertEval %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER,desc = \"Assert if the evaluated javascript expression equals [<Data>]\",input = InputType.YES) public void assertEval() { try { JavascriptExecutor js = (JavascriptExecutor) Driver; String strExpScript = Data.split(\":\", 2)[0]; String strExpValue = Data.split(\":\", 2)[1]; Object result = js.executeScript(strExpScript); if (result != null && result.toString().trim().equals(strExpValue)) { System.out.println(\"assertEval Passed\"); Report.updateTestLog(\"assertEval\",\"JS script return value matched with the expected result\",Status.DONE); } else { throw new Exception(\"JS script return value did not match with the expected result\"); } } catch (Exception ex) { System.out.println(\"assertEval Failed\"); Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, ex); throw new ForcedException(\"assertEval\", ex.getMessage()); } }","title":"assertEval"},{"location":"webActions/additionalassertions/#assertvariablefromdatasheet","text":"Description : This function will check if the variable given in the condition column has a value equals to the value from the datasheet mentioned in the input column. Input Format : Datasheet name:Column name Condition Format : %Variable name% Usage: ObjectName Action Input Condition Reference Browser assertVariableFromDataSheet Sheet:Column %variable% PageName << Input from Datasheet Inputs in the Input column can be either passed from the data sheet ( datasheet name : column name ) as given in the above example. Corresponding Code: 8@Action(object = ObjectType.BROWSER, desc = \"Assert if the variable value matches with given value from datasheet(variable:datasheet-> [<Data>] )\", input = InputType.YES, condition = InputType.YES) public void assertVariableFromDataSheet() throws RuntimeException { try { String strAns = getVar(Condition); if (strAns.equals(Data)) { System.out.println(\"Variable \" + Condition + \" equals \" + Input); Report.updateTestLog(Action, \"Variable is matched with the expected result\", Status.DONE); } else { System.out.println(\"Variable \" + Condition + \" is not equal \" + Input); throw new ForcedException(Action, \"Variable did not match with provided data\"); } } catch (Exception e) { Logger.getLogger(Assertions.class.getName()).log(Level.SEVERE, null, e); throw new ForcedException(\"assertVariableFromDataSheet\", e.getMessage()); } }","title":"assertVariableFromDataSheet"},{"location":"webActions/browser/","text":"Browser/Driver Actions Open Description : This function will open the URL provided by the user in the selected browser Input Format : @URL Usage: ObjectName Action Input Condition Reference Browser Open @value optional page timeout in secs << Hardcoded Input Browser Open Sheet:Column optional page timeout in secs << Input from Datasheet Browser Open %dynamicVar% optional page timeout in secs << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER,desc = \"Open the Url [<Data>] in the Browser\",input = InputType.YES) public void Open() { Boolean pageTimeOut = false; try { if (Condition.matches(\"[0-9]+\")) { setPageTimeOut(Integer.valueOf(Condition)); pageTimeOut = true; } Driver.get(Data); Report.updateTestLog(\"Open\", \"Opened Url: \" + Data, Status.DONE); } catch (TimeoutException e) { Report.updateTestLog(\"Open\", \"Opened Url: \" + Data + \" and cancelled page load after \" + Condition + \"seconds\", Status.DONE); } catch (Exception e) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e); Report.updateTestLog(\"Open\", e.getMessage(), Status.FAIL); throw new ForcedException(\"Open\", e.getMessage()); } if (pageTimeOut) { setPageTimeOut(300); } } setBrowserSize Description : This function will set the size of the browser to dimensions provided Input Format : In pixels. Examples : @700x800 or @700,800 or @700 800 Usage: ObjectName Action Input Condition Reference Browser setBrowserSize @value << Hardcoded Input Browser setBrowserSize Sheet:Column << Input from Datasheet Browser setBrowserSize %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Changes the browser size into [<Data>]\", input = InputType.YES) public void setBrowserSize() { try { if (Data.matches(\"\\\\d*(x|,| )\\\\d*\")) { String size = Data.replaceFirst(\"(x|,| )\", \" \"); String[] sizes = size.split(\" \", 2); Driver.manage().window().setSize(new Dimension(Integer.parseInt(sizes[0]), Integer.parseInt(sizes[1]))); Report.updateTestLog(Action, \" Browser is resized to \" + Data, Status.DONE); } else { Report.updateTestLog(Action, \" Invalid Browser size [\" + Data + \"]\", Status.DEBUG); } } catch (Exception ex) { Report.updateTestLog(Action, \"Unable to resize the Window \", Status.FAIL); Logger.getLogger(Basic.class.getName()).log(Level.SEVERE, null, ex); } } StartBrowser Description : This function is used to start a specified browser. Input Format : @BrowserName. Example: Chrome , Chrome Headless , Firefox , Edge etc. Usage: ObjectName Action Input Condition Reference Browser StartBrowser @value << Hardcoded Input Browser StartBrowser Sheet:Column << Input from Datasheet Browser StartBrowser %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Start a specified browser\", input = InputType.YES) public void StartBrowser() { try { getDriverControl().StartBrowser(Data); Report.setDriver(getDriverControl()); Report.updateTestLog(\"StartBrowser\", \"Browser Started: \" + Data, Status.DONE); } catch (Exception e) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e); Report.updateTestLog(\"StartBrowser\", \"Error: \" + e.getMessage(), Status.FAIL); } } StopBrowser Description : This function is used to stop the current browser Usage: ObjectName Action Input Condition Reference Browser StopBrowser Browser StopBrowser Browser StopBrowser Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Stop the current browser\") public void StopBrowser() { getDriverControl().StopBrowser(); Report.updateTestLog(\"StopBrowser\", \"Browser Stopped: \", Status.DONE); } RestartBrowser Description : This function is used to restart current browser. Usage: ObjectName Action Input Condition Reference Browser RestartBrowser Browser RestartBrowser Browser RestartBrowser Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Restarts the Browser\") public void RestartBrowser() { try { getDriverControl().RestartBrowser(); Report.setDriver(getDriverControl()); Report.updateTestLog(\"RestartBrowser\", \"Restarted Browser\",Status.DONE); } catch (Exception ex) { Report.updateTestLog(\"RestartBrowser\", \"Unable Restart Browser\",Status.FAIL); Logger.getLogger(Basic.class.getName()).log(Level.SEVERE, null, ex); } } maximize Description :This function is used to maximize the browser window. Usage: ObjectName Action Input Condition Reference Browser maximize Browser maximize Browser maximize Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Maximize the browser.\") public void maximize() { try { Driver.manage().window().maximize(); Report.updateTestLog(\"maximize\", \" Window is maximized \", Status.DONE); } catch (Exception ex) { Report.updateTestLog(\"maximize\", \"Unable to maximize the Window \", Status.FAIL); Logger.getLogger(BrowserUtility.class.getName()).log(Level.SEVERE, null, ex); } } > Note : By default the driver launched by the tool is maximized. refreshDriver Description : This function will refresh the current web page. Usage: ObjectName Action Input Condition Reference Browser refreshDriver Browser refreshDriver Browser refreshDriver Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Refresh current page \") public void refreshDriver() { try { Driver.navigate().refresh(); Report.updateTestLog(\"refreshDriver\", \"Page is refreshed\",Status.DONE); } catch (WebDriverException e) { Report.updateTestLog(\"refreshDriver\", e.getMessage(), Status.FAIL); Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e); } } forward Description : This function is used for navigating forward to next page. Usage: ObjectName Action Input Condition Reference Browser forward Browser forward Browser forward Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"browser navigates to next page.\") public void forward() { try { Driver.navigate().forward(); Report.updateTestLog(\"forward\", \"Navigate page forward is success\",Status.DONE); } catch (WebDriverException e) { Report.updateTestLog(\"forward\", e.getMessage(), Status.FAIL); Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e); } } back Description : This function is used for navigating to the previous page. Usage: ObjectName Action Input Condition Reference Browser back Browser back Browser back Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Navigate to previous page\") public void back() { try { Driver.navigate().back(); Report.updateTestLog(\"back\", \"Navigate page back is success\",Status.DONE); } catch (WebDriverException e) { Report.updateTestLog(\"back\", e.getMessage(), Status.FAIL); Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e); } } addCookie Description : This function will add a cookie defined in the input column. Input Format : @ CookieName : CookieValue Usage: ObjectName Action Input Condition Reference Browser addCookie @value << Hardcoded Input Browser addCookie Sheet:Column << Input from Datasheet Browser addCookie %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Add the cookie name with value [<Data>].\", input = InputType.YES) public void addCookie() { try { String strCookieName = Data.split(\":\", 2)[0]; String strCookieValue = Data.split(\":\", 2)[1]; Cookie oCookie = new Cookie.Builder(strCookieName, strCookieValue).build(); Driver.manage().addCookie(oCookie); Report.updateTestLog(Action, \"Cookie Name- '\" + strCookieName+ \"' with value '\" + strCookieValue + \"' is added\",Status.DONE); } catch (Exception e) { Report.updateTestLog(Action, e.getMessage(), Status.FAIL); Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e); } } deleteCookie Description : This function will delete the cookie specified by the user. Input Format : @ CookieName Usage: ObjectName Action Input Condition Reference Browser deleteCookie @value << Hardcoded Input Browser deleteCookie Sheet:Column << Input from Datasheet Browser deleteCookie %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"delete the cookie having name [<Data>].\", input = InputType.YES) public void deleteCookie() { try { String strCookieName = Data; Cookie oCookie = Driver.manage().getCookieNamed(strCookieName); if (oCookie != null) { Driver.manage().deleteCookie(oCookie); Report.updateTestLog(Action, \"Cookie Name- '\"+ strCookieName + \"' is deleted\", Status.DONE); } else { Report.updateTestLog(Action, \"Cookie doesn't exist\",Status.FAIL); } } catch (Exception e) { Report.updateTestLog(Action, e.getMessage(), Status.FAIL); Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e); } } close Description : This function will close the selenium Web Driver. Usage: ObjectName Action Input Condition Reference Browser close Browser close Browser close Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Close the current browser session\") public void close() { try { Driver.close(); Report.updateTestLog(\"close\", \"Selenium Webdriver is closed\",Status.DONE); } catch (WebDriverException e) { Report.updateTestLog(\"close\", e.getMessage(), Status.FAIL); Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e); } }","title":"Browser/Driver Actions"},{"location":"webActions/browser/#browserdriver-actions","text":"","title":"Browser/Driver Actions"},{"location":"webActions/browser/#open","text":"Description : This function will open the URL provided by the user in the selected browser Input Format : @URL Usage: ObjectName Action Input Condition Reference Browser Open @value optional page timeout in secs << Hardcoded Input Browser Open Sheet:Column optional page timeout in secs << Input from Datasheet Browser Open %dynamicVar% optional page timeout in secs << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER,desc = \"Open the Url [<Data>] in the Browser\",input = InputType.YES) public void Open() { Boolean pageTimeOut = false; try { if (Condition.matches(\"[0-9]+\")) { setPageTimeOut(Integer.valueOf(Condition)); pageTimeOut = true; } Driver.get(Data); Report.updateTestLog(\"Open\", \"Opened Url: \" + Data, Status.DONE); } catch (TimeoutException e) { Report.updateTestLog(\"Open\", \"Opened Url: \" + Data + \" and cancelled page load after \" + Condition + \"seconds\", Status.DONE); } catch (Exception e) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e); Report.updateTestLog(\"Open\", e.getMessage(), Status.FAIL); throw new ForcedException(\"Open\", e.getMessage()); } if (pageTimeOut) { setPageTimeOut(300); } }","title":"Open"},{"location":"webActions/browser/#setbrowsersize","text":"Description : This function will set the size of the browser to dimensions provided Input Format : In pixels. Examples : @700x800 or @700,800 or @700 800 Usage: ObjectName Action Input Condition Reference Browser setBrowserSize @value << Hardcoded Input Browser setBrowserSize Sheet:Column << Input from Datasheet Browser setBrowserSize %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Changes the browser size into [<Data>]\", input = InputType.YES) public void setBrowserSize() { try { if (Data.matches(\"\\\\d*(x|,| )\\\\d*\")) { String size = Data.replaceFirst(\"(x|,| )\", \" \"); String[] sizes = size.split(\" \", 2); Driver.manage().window().setSize(new Dimension(Integer.parseInt(sizes[0]), Integer.parseInt(sizes[1]))); Report.updateTestLog(Action, \" Browser is resized to \" + Data, Status.DONE); } else { Report.updateTestLog(Action, \" Invalid Browser size [\" + Data + \"]\", Status.DEBUG); } } catch (Exception ex) { Report.updateTestLog(Action, \"Unable to resize the Window \", Status.FAIL); Logger.getLogger(Basic.class.getName()).log(Level.SEVERE, null, ex); } }","title":"setBrowserSize"},{"location":"webActions/browser/#startbrowser","text":"Description : This function is used to start a specified browser. Input Format : @BrowserName. Example: Chrome , Chrome Headless , Firefox , Edge etc. Usage: ObjectName Action Input Condition Reference Browser StartBrowser @value << Hardcoded Input Browser StartBrowser Sheet:Column << Input from Datasheet Browser StartBrowser %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Start a specified browser\", input = InputType.YES) public void StartBrowser() { try { getDriverControl().StartBrowser(Data); Report.setDriver(getDriverControl()); Report.updateTestLog(\"StartBrowser\", \"Browser Started: \" + Data, Status.DONE); } catch (Exception e) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e); Report.updateTestLog(\"StartBrowser\", \"Error: \" + e.getMessage(), Status.FAIL); } }","title":"StartBrowser"},{"location":"webActions/browser/#stopbrowser","text":"Description : This function is used to stop the current browser Usage: ObjectName Action Input Condition Reference Browser StopBrowser Browser StopBrowser Browser StopBrowser Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Stop the current browser\") public void StopBrowser() { getDriverControl().StopBrowser(); Report.updateTestLog(\"StopBrowser\", \"Browser Stopped: \", Status.DONE); }","title":"StopBrowser"},{"location":"webActions/browser/#restartbrowser","text":"Description : This function is used to restart current browser. Usage: ObjectName Action Input Condition Reference Browser RestartBrowser Browser RestartBrowser Browser RestartBrowser Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Restarts the Browser\") public void RestartBrowser() { try { getDriverControl().RestartBrowser(); Report.setDriver(getDriverControl()); Report.updateTestLog(\"RestartBrowser\", \"Restarted Browser\",Status.DONE); } catch (Exception ex) { Report.updateTestLog(\"RestartBrowser\", \"Unable Restart Browser\",Status.FAIL); Logger.getLogger(Basic.class.getName()).log(Level.SEVERE, null, ex); } }","title":"RestartBrowser"},{"location":"webActions/browser/#maximize","text":"Description :This function is used to maximize the browser window. Usage: ObjectName Action Input Condition Reference Browser maximize Browser maximize Browser maximize Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Maximize the browser.\") public void maximize() { try { Driver.manage().window().maximize(); Report.updateTestLog(\"maximize\", \" Window is maximized \", Status.DONE); } catch (Exception ex) { Report.updateTestLog(\"maximize\", \"Unable to maximize the Window \", Status.FAIL); Logger.getLogger(BrowserUtility.class.getName()).log(Level.SEVERE, null, ex); } }","title":"maximize"},{"location":"webActions/browser/#note-by-default-the-driver-launched-by-the-tool-is-maximized","text":"","title":"&gt; Note : By default the driver launched by the tool is maximized."},{"location":"webActions/browser/#refreshdriver","text":"Description : This function will refresh the current web page. Usage: ObjectName Action Input Condition Reference Browser refreshDriver Browser refreshDriver Browser refreshDriver Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Refresh current page \") public void refreshDriver() { try { Driver.navigate().refresh(); Report.updateTestLog(\"refreshDriver\", \"Page is refreshed\",Status.DONE); } catch (WebDriverException e) { Report.updateTestLog(\"refreshDriver\", e.getMessage(), Status.FAIL); Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e); } }","title":"refreshDriver"},{"location":"webActions/browser/#forward","text":"Description : This function is used for navigating forward to next page. Usage: ObjectName Action Input Condition Reference Browser forward Browser forward Browser forward Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"browser navigates to next page.\") public void forward() { try { Driver.navigate().forward(); Report.updateTestLog(\"forward\", \"Navigate page forward is success\",Status.DONE); } catch (WebDriverException e) { Report.updateTestLog(\"forward\", e.getMessage(), Status.FAIL); Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e); } }","title":"forward"},{"location":"webActions/browser/#back","text":"Description : This function is used for navigating to the previous page. Usage: ObjectName Action Input Condition Reference Browser back Browser back Browser back Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Navigate to previous page\") public void back() { try { Driver.navigate().back(); Report.updateTestLog(\"back\", \"Navigate page back is success\",Status.DONE); } catch (WebDriverException e) { Report.updateTestLog(\"back\", e.getMessage(), Status.FAIL); Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e); } }","title":"back"},{"location":"webActions/browser/#addcookie","text":"Description : This function will add a cookie defined in the input column. Input Format : @ CookieName : CookieValue Usage: ObjectName Action Input Condition Reference Browser addCookie @value << Hardcoded Input Browser addCookie Sheet:Column << Input from Datasheet Browser addCookie %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Add the cookie name with value [<Data>].\", input = InputType.YES) public void addCookie() { try { String strCookieName = Data.split(\":\", 2)[0]; String strCookieValue = Data.split(\":\", 2)[1]; Cookie oCookie = new Cookie.Builder(strCookieName, strCookieValue).build(); Driver.manage().addCookie(oCookie); Report.updateTestLog(Action, \"Cookie Name- '\" + strCookieName+ \"' with value '\" + strCookieValue + \"' is added\",Status.DONE); } catch (Exception e) { Report.updateTestLog(Action, e.getMessage(), Status.FAIL); Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e); } }","title":"addCookie"},{"location":"webActions/browser/#deletecookie","text":"Description : This function will delete the cookie specified by the user. Input Format : @ CookieName Usage: ObjectName Action Input Condition Reference Browser deleteCookie @value << Hardcoded Input Browser deleteCookie Sheet:Column << Input from Datasheet Browser deleteCookie %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"delete the cookie having name [<Data>].\", input = InputType.YES) public void deleteCookie() { try { String strCookieName = Data; Cookie oCookie = Driver.manage().getCookieNamed(strCookieName); if (oCookie != null) { Driver.manage().deleteCookie(oCookie); Report.updateTestLog(Action, \"Cookie Name- '\"+ strCookieName + \"' is deleted\", Status.DONE); } else { Report.updateTestLog(Action, \"Cookie doesn't exist\",Status.FAIL); } } catch (Exception e) { Report.updateTestLog(Action, e.getMessage(), Status.FAIL); Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e); } }","title":"deleteCookie"},{"location":"webActions/browser/#close","text":"Description : This function will close the selenium Web Driver. Usage: ObjectName Action Input Condition Reference Browser close Browser close Browser close Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Close the current browser session\") public void close() { try { Driver.close(); Report.updateTestLog(\"close\", \"Selenium Webdriver is closed\",Status.DONE); } catch (WebDriverException e) { Report.updateTestLog(\"close\", e.getMessage(), Status.FAIL); Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e); } }","title":"close"},{"location":"webActions/dropdown/","text":"Dropdowns selectByIndex Description : This function will select an option from a dropdown whose index matches the given index. Input Format : @ Index of item to be selected from dropdown. Example : 0 or 1 or 2 etc. Usage: ObjectName Action Input Condition Reference Object selectByIndex @value PageName << Hardcoded Input Object selectByIndex Sheet:Column PageName << Input from Datasheet Object selectByIndex %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select all options from a select Element [<Object>]\", input = InputType.YES) public void selectByIndex() { select(SelectType.Select, SelectRange.Single, SelectBy.Index); } Internally uses the following Selenium logic : select.selectByIndex(Integer.parseInt(Data)) selectByVisibleText Description : This function will select an option from a dropdown whose visible text matches the given text. Input Format : @ Text of item to be selected from dropdown. Usage: ObjectName Action Input Condition Reference Object selectByVisibleText @value PageName << Hardcoded Input Object selectByVisibleText Sheet:Column PageName << Input from Datasheet Object selectByVisibleText %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select item in [<Object>] which has text: [<Data>]\", input = InputType.YES) public void selectByVisibleText() { select(SelectType.Select, SelectRange.Single, SelectBy.Text); } Internally uses the following Selenium logic : select.selectByVisibleText(Data) selectByValue Description : This function will select an option from a dropdown whose value ( value attribute of option HTML tag) matches the given value. Input Format : @ value attribute of item to be selected from dropdown. Usage: ObjectName Action Input Condition Reference Object selectByValue @value PageName << Hardcoded Input Object selectByValue Sheet:Column PageName << Input from Datasheet Object selectByValue %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select item in [<Object>] which has the value: [<Data>]\", input = InputType.YES) public void selectByValue() { select(SelectType.Select, SelectRange.Single, SelectBy.Value); } Internally uses the following Selenium logic : select.selectByValue(Data) selectMultipleByIndex Description : This function will select all options that have index matching the given set of indices. Input Format : @Expected index1,Expected index2 Usage: ObjectName Action Input Condition Reference Object selectMultipleByIndex @value PageName << Hardcoded Input Object selectMultipleByIndex Sheet:Column PageName << Input from Datasheet Object selectMultipleByIndex %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select items [<Data>] of [<Object>] by index\", input = InputType.YES) public void selectMultipleByIndex() { select(SelectType.Select, SelectRange.Multiple, SelectBy.Index); } Internally uses the following Selenium logic : String[] values = Data.split(\",\"); for (String value : values) { select.selectByIndex(Integer.parseInt(value)); } selectMultipleByText Description : This function will select all options that display the text matching the given text. Input Format : @Expected Text1,Expected Text2 Usage: ObjectName Action Input Condition Reference Object selectMultipleByText @value PageName << Hardcoded Input Object selectMultipleByText Sheet:Column PageName << Input from Datasheet Object selectMultipleByText %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select items [<Data>] of [<Object>] by visible Text\", input = InputType.YES) public void selectMultipleByText() { select(SelectType.Select, SelectRange.Multiple, SelectBy.Text); } Internally uses the following Selenium logic : String[] values = Data.split(\",\"); for (String value : values) { select.selectByVisibleText(value); } selectMultipleByValue Description : This function will select all options that have value ( value attribute of option HTML tag) matching the given value. Input Format : @Expected value1,Expected value2 Usage: ObjectName Action Input Condition Reference Object selectMultipleByText @value PageName << Hardcoded Input Object selectMultipleByText Sheet:Column PageName << Input from Datasheet Object selectMultipleByText %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select items [<Data>] of [<Object>] by value\", input = InputType.YES) public void selectMultipleByValue() { select(SelectType.Select, SelectRange.Multiple, SelectBy.Value); } Internally uses the following Selenium logic : String[] values = Data.split(\",\"); for (String value : values) { select.selectByValue(value); } selectIndexFromUnorderedList Description : This function will select the value from an unordered list based on the index. Input Format :@ Index of item to be selected from dropdown. Example : 0 or 1 or 2 etc. Usage: ObjectName Action Input Condition Reference Object selectIndexFromUnorderedList @value PageName << Hardcoded Input Object selectIndexFromUnorderedList Sheet:Column PageName << Input from Datasheet Object selectIndexFromUnorderedList %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"selecting value by index [<Data>] from unordered list .\", input = InputType.YES) public void selectIndexFromUnorderedList() { selectFromUnorderedList(SelectBy.Index); } selectValueFromUnorderedList Description : This function will select the value based on the visible text from an unordered list. Input Format : @ Text of item to be selected from dropdown. Usage: ObjectName Action Input Condition Reference Object selectValueFromUnorderedList @value PageName << Hardcoded Input Object selectValueFromUnorderedList Sheet:Column PageName << Input from Datasheet Object selectValueFromUnorderedList %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"selecting value [<Data>] from unordered list .\", input = InputType.YES) public void selectValueFromUnorderedList() { selectFromUnorderedList(SelectBy.Text); } deSelectByIndex Description : This function will de-select an option that has index matching the given index. Input Format : @ Index of item to be de-selected from dropdown. Example : 0 or 1 or 2 etc. Usage: ObjectName Action Input Condition Reference Object deSelectByIndex @value PageName << Hardcoded Input Object deSelectByIndex Sheet:Column PageName << Input from Datasheet Object deSelectByIndex %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect item in [<Object>] which has index: [<Data>]\", input = InputType.YES) public void deSelectByIndex() { select(SelectType.DeSelect, SelectRange.Single, SelectBy.Index); } Internally uses the following Selenium logic : select.deselectByIndex(Integer.parseInt(Data)) deSelectByVisibleText Description : This function will de-select an option that displays text matching the given text. Input Format : @ Text of item to be de-selected from dropdown. Usage: ObjectName Action Input Condition Reference Object deSelectByVisibleText @value PageName << Hardcoded Input Object deSelectByVisibleText Sheet:Column PageName << Input from Datasheet Object deSelectByVisibleText %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect item in [<Object>] which has text: [<Data>]\", input = InputType.YES) public void deSelectByVisibleText() { select(SelectType.DeSelect, SelectRange.Single, SelectBy.Text); } Internally uses the following Selenium logic : select.deselectByVisibleText(Data) deSelectByValue Description : This function will de-select an option from a dropdown whose value ( value attribute of option HTML tag) matches the given value. Input Format : @ value attribute of item to be de-selected from dropdown. Usage: ObjectName Action Input Condition Reference Object deSelectByValue @value PageName << Hardcoded Input Object deSelectByValue Sheet:Column PageName << Input from Datasheet Object deSelectByValue %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect item in [<Object>] which has value: [<Data>]\", input = InputType.YES) public void deSelectByValue() { select(SelectType.DeSelect, SelectRange.Single, SelectBy.Value); } Internally uses the following Selenium logic : select.deselectByValue(Data) deSelectMultipleByIndex Description : This function will de-select all options that has index matching the given indices. This is done by examining the index attribute of an element, and not merely by counting.If there is no index attribute used then use the option index by count Input Format : @Expected index1,Expected index2 Usage: ObjectName Action Input Condition Reference Object deSelectMultipleByIndex @value PageName << Hardcoded Input Object deSelectMultipleByIndex Sheet:Column PageName << Input from Datasheet Object deSelectMultipleByIndex %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect items [<Data>] of [<Object>] by index\", input = InputType.YES) public void deSelectMultipleByIndex() { select(SelectType.DeSelect, SelectRange.Multiple, SelectBy.Index); } Internally uses the following Selenium logic : String[] values = Data.split(\",\"); for (String value : values) { select.deselectByIndex(Integer.parseInt(value)); } deSelectMultipleByText Description : This function will de-select all options that display text matching the given text. Input Format : @Expected Text1,Expected Text2 Usage: ObjectName Action Input Condition Reference Object deSelectMultipleByText @value PageName << Hardcoded Input Object deSelectMultipleByText Sheet:Column PageName << Input from Datasheet Object deSelectMultipleByText %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect items [<Data>] of [<Object>] by visible Text\", input = InputType.YES) public void deSelectMultipleByText() { select(SelectType.DeSelect, SelectRange.Multiple, SelectBy.Text); } Internally uses the following Selenium logic : String[] values = Data.split(\",\"); for (String value : values) { select.deselectByVisibleText(value); } deSelectMultipleByValue Description : This function will de-select all options that have value ( value attribute of option HTML tag) matching the given value. Input Format : @Expected value1,Expected value2 Usage: ObjectName Action Input Condition Reference Object deSelectMultipleByValue @value PageName << Hardcoded Input Object deSelectMultipleByValue Sheet:Column PageName << Input from Datasheet Object deSelectMultipleByValue %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect items [<Data>] of [<Object>] by value\", input = InputType.YES) public void deSelectMultipleByValue() { select(SelectType.DeSelect, SelectRange.Multiple, SelectBy.Value); } Internally uses the following Selenium logic : String[] values = Data.split(\",\"); for (String value : values) { select.deselectByValue(value); } selectAll Description : This function will select all options from a select element. Usage: ObjectName Action Input Condition Reference Object selectAll PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select all options from a select Element [<Object>]\") public void selectAll() { select(SelectType.Select, SelectRange.All, null); } Internally uses the following Selenium logic : Select select = new Select(Element); for (int i = 0; i < select.getOptions().size(); i++) { select.selectByIndex(i); } deSelectAll Description : This function will clear all the selected entries in a dropdown. This is only valid when there is support for multiple selections in the dropdown. Usage: ObjectName Action Input Condition Reference Object deSelectAll PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect all items in [<Object>]\") public void deSelectAll() { select(SelectType.DeSelect, SelectRange.All, null); } Internally uses the following Selenium logic : new Select(Element).deselectAll() assertSelectContains Description : This function will assert if the selected element from the dropdown matches the user-specified input. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertSelectContains @value PageName << Hardcoded Input Object assertSelectContains Sheet:Column PageName << Input from Datasheet Object assertSelectContains %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if the select list [<Object>] contains [<Data>]\", input = InputType.YES) public void assertSelectContains() { if (elementPresent()) { Boolean isPresent = false; Select select = new Select(Element); for (WebElement option : select.getOptions()) { if (option.getText().trim().equals(Data)) { isPresent = true; break; } } if (isPresent) { Report.updateTestLog(Action, ObjectName + \" Contains the Option \" + Data, Status.DONE); } else { Report.updateTestLog(Action, ObjectName + \" doesn't Contains the Option \" + Data, Status.DEBUG); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, ObjectName); } }","title":"Dropdowns"},{"location":"webActions/dropdown/#dropdowns","text":"","title":"Dropdowns"},{"location":"webActions/dropdown/#selectbyindex","text":"Description : This function will select an option from a dropdown whose index matches the given index. Input Format : @ Index of item to be selected from dropdown. Example : 0 or 1 or 2 etc. Usage: ObjectName Action Input Condition Reference Object selectByIndex @value PageName << Hardcoded Input Object selectByIndex Sheet:Column PageName << Input from Datasheet Object selectByIndex %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select all options from a select Element [<Object>]\", input = InputType.YES) public void selectByIndex() { select(SelectType.Select, SelectRange.Single, SelectBy.Index); } Internally uses the following Selenium logic : select.selectByIndex(Integer.parseInt(Data))","title":"selectByIndex"},{"location":"webActions/dropdown/#selectbyvisibletext","text":"Description : This function will select an option from a dropdown whose visible text matches the given text. Input Format : @ Text of item to be selected from dropdown. Usage: ObjectName Action Input Condition Reference Object selectByVisibleText @value PageName << Hardcoded Input Object selectByVisibleText Sheet:Column PageName << Input from Datasheet Object selectByVisibleText %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select item in [<Object>] which has text: [<Data>]\", input = InputType.YES) public void selectByVisibleText() { select(SelectType.Select, SelectRange.Single, SelectBy.Text); } Internally uses the following Selenium logic : select.selectByVisibleText(Data)","title":"selectByVisibleText"},{"location":"webActions/dropdown/#selectbyvalue","text":"Description : This function will select an option from a dropdown whose value ( value attribute of option HTML tag) matches the given value. Input Format : @ value attribute of item to be selected from dropdown. Usage: ObjectName Action Input Condition Reference Object selectByValue @value PageName << Hardcoded Input Object selectByValue Sheet:Column PageName << Input from Datasheet Object selectByValue %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select item in [<Object>] which has the value: [<Data>]\", input = InputType.YES) public void selectByValue() { select(SelectType.Select, SelectRange.Single, SelectBy.Value); } Internally uses the following Selenium logic : select.selectByValue(Data)","title":"selectByValue"},{"location":"webActions/dropdown/#selectmultiplebyindex","text":"Description : This function will select all options that have index matching the given set of indices. Input Format : @Expected index1,Expected index2 Usage: ObjectName Action Input Condition Reference Object selectMultipleByIndex @value PageName << Hardcoded Input Object selectMultipleByIndex Sheet:Column PageName << Input from Datasheet Object selectMultipleByIndex %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select items [<Data>] of [<Object>] by index\", input = InputType.YES) public void selectMultipleByIndex() { select(SelectType.Select, SelectRange.Multiple, SelectBy.Index); } Internally uses the following Selenium logic : String[] values = Data.split(\",\"); for (String value : values) { select.selectByIndex(Integer.parseInt(value)); }","title":"selectMultipleByIndex"},{"location":"webActions/dropdown/#selectmultiplebytext","text":"Description : This function will select all options that display the text matching the given text. Input Format : @Expected Text1,Expected Text2 Usage: ObjectName Action Input Condition Reference Object selectMultipleByText @value PageName << Hardcoded Input Object selectMultipleByText Sheet:Column PageName << Input from Datasheet Object selectMultipleByText %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select items [<Data>] of [<Object>] by visible Text\", input = InputType.YES) public void selectMultipleByText() { select(SelectType.Select, SelectRange.Multiple, SelectBy.Text); } Internally uses the following Selenium logic : String[] values = Data.split(\",\"); for (String value : values) { select.selectByVisibleText(value); }","title":"selectMultipleByText"},{"location":"webActions/dropdown/#selectmultiplebyvalue","text":"Description : This function will select all options that have value ( value attribute of option HTML tag) matching the given value. Input Format : @Expected value1,Expected value2 Usage: ObjectName Action Input Condition Reference Object selectMultipleByText @value PageName << Hardcoded Input Object selectMultipleByText Sheet:Column PageName << Input from Datasheet Object selectMultipleByText %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select items [<Data>] of [<Object>] by value\", input = InputType.YES) public void selectMultipleByValue() { select(SelectType.Select, SelectRange.Multiple, SelectBy.Value); } Internally uses the following Selenium logic : String[] values = Data.split(\",\"); for (String value : values) { select.selectByValue(value); }","title":"selectMultipleByValue"},{"location":"webActions/dropdown/#selectindexfromunorderedlist","text":"Description : This function will select the value from an unordered list based on the index. Input Format :@ Index of item to be selected from dropdown. Example : 0 or 1 or 2 etc. Usage: ObjectName Action Input Condition Reference Object selectIndexFromUnorderedList @value PageName << Hardcoded Input Object selectIndexFromUnorderedList Sheet:Column PageName << Input from Datasheet Object selectIndexFromUnorderedList %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"selecting value by index [<Data>] from unordered list .\", input = InputType.YES) public void selectIndexFromUnorderedList() { selectFromUnorderedList(SelectBy.Index); }","title":"selectIndexFromUnorderedList"},{"location":"webActions/dropdown/#selectvaluefromunorderedlist","text":"Description : This function will select the value based on the visible text from an unordered list. Input Format : @ Text of item to be selected from dropdown. Usage: ObjectName Action Input Condition Reference Object selectValueFromUnorderedList @value PageName << Hardcoded Input Object selectValueFromUnorderedList Sheet:Column PageName << Input from Datasheet Object selectValueFromUnorderedList %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"selecting value [<Data>] from unordered list .\", input = InputType.YES) public void selectValueFromUnorderedList() { selectFromUnorderedList(SelectBy.Text); }","title":"selectValueFromUnorderedList"},{"location":"webActions/dropdown/#deselectbyindex","text":"Description : This function will de-select an option that has index matching the given index. Input Format : @ Index of item to be de-selected from dropdown. Example : 0 or 1 or 2 etc. Usage: ObjectName Action Input Condition Reference Object deSelectByIndex @value PageName << Hardcoded Input Object deSelectByIndex Sheet:Column PageName << Input from Datasheet Object deSelectByIndex %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect item in [<Object>] which has index: [<Data>]\", input = InputType.YES) public void deSelectByIndex() { select(SelectType.DeSelect, SelectRange.Single, SelectBy.Index); } Internally uses the following Selenium logic : select.deselectByIndex(Integer.parseInt(Data))","title":"deSelectByIndex"},{"location":"webActions/dropdown/#deselectbyvisibletext","text":"Description : This function will de-select an option that displays text matching the given text. Input Format : @ Text of item to be de-selected from dropdown. Usage: ObjectName Action Input Condition Reference Object deSelectByVisibleText @value PageName << Hardcoded Input Object deSelectByVisibleText Sheet:Column PageName << Input from Datasheet Object deSelectByVisibleText %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect item in [<Object>] which has text: [<Data>]\", input = InputType.YES) public void deSelectByVisibleText() { select(SelectType.DeSelect, SelectRange.Single, SelectBy.Text); } Internally uses the following Selenium logic : select.deselectByVisibleText(Data)","title":"deSelectByVisibleText"},{"location":"webActions/dropdown/#deselectbyvalue","text":"Description : This function will de-select an option from a dropdown whose value ( value attribute of option HTML tag) matches the given value. Input Format : @ value attribute of item to be de-selected from dropdown. Usage: ObjectName Action Input Condition Reference Object deSelectByValue @value PageName << Hardcoded Input Object deSelectByValue Sheet:Column PageName << Input from Datasheet Object deSelectByValue %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect item in [<Object>] which has value: [<Data>]\", input = InputType.YES) public void deSelectByValue() { select(SelectType.DeSelect, SelectRange.Single, SelectBy.Value); } Internally uses the following Selenium logic : select.deselectByValue(Data)","title":"deSelectByValue"},{"location":"webActions/dropdown/#deselectmultiplebyindex","text":"Description : This function will de-select all options that has index matching the given indices. This is done by examining the index attribute of an element, and not merely by counting.If there is no index attribute used then use the option index by count Input Format : @Expected index1,Expected index2 Usage: ObjectName Action Input Condition Reference Object deSelectMultipleByIndex @value PageName << Hardcoded Input Object deSelectMultipleByIndex Sheet:Column PageName << Input from Datasheet Object deSelectMultipleByIndex %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect items [<Data>] of [<Object>] by index\", input = InputType.YES) public void deSelectMultipleByIndex() { select(SelectType.DeSelect, SelectRange.Multiple, SelectBy.Index); } Internally uses the following Selenium logic : String[] values = Data.split(\",\"); for (String value : values) { select.deselectByIndex(Integer.parseInt(value)); }","title":"deSelectMultipleByIndex"},{"location":"webActions/dropdown/#deselectmultiplebytext","text":"Description : This function will de-select all options that display text matching the given text. Input Format : @Expected Text1,Expected Text2 Usage: ObjectName Action Input Condition Reference Object deSelectMultipleByText @value PageName << Hardcoded Input Object deSelectMultipleByText Sheet:Column PageName << Input from Datasheet Object deSelectMultipleByText %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect items [<Data>] of [<Object>] by visible Text\", input = InputType.YES) public void deSelectMultipleByText() { select(SelectType.DeSelect, SelectRange.Multiple, SelectBy.Text); } Internally uses the following Selenium logic : String[] values = Data.split(\",\"); for (String value : values) { select.deselectByVisibleText(value); }","title":"deSelectMultipleByText"},{"location":"webActions/dropdown/#deselectmultiplebyvalue","text":"Description : This function will de-select all options that have value ( value attribute of option HTML tag) matching the given value. Input Format : @Expected value1,Expected value2 Usage: ObjectName Action Input Condition Reference Object deSelectMultipleByValue @value PageName << Hardcoded Input Object deSelectMultipleByValue Sheet:Column PageName << Input from Datasheet Object deSelectMultipleByValue %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect items [<Data>] of [<Object>] by value\", input = InputType.YES) public void deSelectMultipleByValue() { select(SelectType.DeSelect, SelectRange.Multiple, SelectBy.Value); } Internally uses the following Selenium logic : String[] values = Data.split(\",\"); for (String value : values) { select.deselectByValue(value); }","title":"deSelectMultipleByValue"},{"location":"webActions/dropdown/#selectall","text":"Description : This function will select all options from a select element. Usage: ObjectName Action Input Condition Reference Object selectAll PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select all options from a select Element [<Object>]\") public void selectAll() { select(SelectType.Select, SelectRange.All, null); } Internally uses the following Selenium logic : Select select = new Select(Element); for (int i = 0; i < select.getOptions().size(); i++) { select.selectByIndex(i); }","title":"selectAll"},{"location":"webActions/dropdown/#deselectall","text":"Description : This function will clear all the selected entries in a dropdown. This is only valid when there is support for multiple selections in the dropdown. Usage: ObjectName Action Input Condition Reference Object deSelectAll PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Deselect all items in [<Object>]\") public void deSelectAll() { select(SelectType.DeSelect, SelectRange.All, null); } Internally uses the following Selenium logic : new Select(Element).deselectAll()","title":"deSelectAll"},{"location":"webActions/dropdown/#assertselectcontains","text":"Description : This function will assert if the selected element from the dropdown matches the user-specified input. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertSelectContains @value PageName << Hardcoded Input Object assertSelectContains Sheet:Column PageName << Input from Datasheet Object assertSelectContains %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if the select list [<Object>] contains [<Data>]\", input = InputType.YES) public void assertSelectContains() { if (elementPresent()) { Boolean isPresent = false; Select select = new Select(Element); for (WebElement option : select.getOptions()) { if (option.getText().trim().equals(Data)) { isPresent = true; break; } } if (isPresent) { Report.updateTestLog(Action, ObjectName + \" Contains the Option \" + Data, Status.DONE); } else { Report.updateTestLog(Action, ObjectName + \" doesn't Contains the Option \" + Data, Status.DEBUG); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, ObjectName); } }","title":"assertSelectContains"},{"location":"webActions/dynamicObjects/","text":"Dynamic Object How To Change Object Properties At Run Time? Sometimes it is necessary to use a dynamic property for objects at runtime. Customizing the existing properties at runtime can be done by using setObjectProperty and setglobalObjectProperty functions. setObjectProperty function: will update property of the driving object. setglobalObjectProperty function: will update property for all the objects. setObjectProperty setObjectProperty action can be used by an object. To provide dynamic property value, use the Input column. To provide flag for replacing the property string, use the condition column. Description : This function is used to customize any object property based on the requirement during the runtime. User can give a desired value as an input which will replace the matching condition in the object property. Input Format : @User Defined Text Condition Column : #Variable name Usage: ObjectName Action Input Condition Reference Object setObjectProperty @value %var% PageName << Hardcoded Input Object setObjectProperty Sheet:Column %var% PageName << Input from Datasheet Object setObjectProperty %dynamicVar% %var% PageName << Input from variable Example : There is an object whose xpath is //div[text()='JohnDoe'] and another object whose xpath is //div[text()='JaneDoe'] Step 1 : We can define one object in the Object Repository whose xpath can be parameterised as //div[text()='#userName'] . Now the #userName is also used in the Condition column Step 2: We can parameterise the #userName part from a datasheet as shown in the image below : Internally uses the following Code: private void setProperty(String key, String value) { if (!AutomationObject.dynamicValue.containsKey(Reference)) { Map<String, Map<String, String>> Object = new HashMap<>(); Map<String, String> property = new HashMap<>(); property.put(key, value); Object.put(ObjectName, property); AutomationObject.dynamicValue.put(Reference, Object); } else if (!AutomationObject.dynamicValue.get(Reference).containsKey(ObjectName)) { Map<String, String> property = new HashMap<>(); property.put(key, value); AutomationObject.dynamicValue.get(Reference).put(ObjectName, property); } else { AutomationObject.dynamicValue.get(Reference).get(ObjectName).put(key, value); } } setglobalObjectProperty setglobalObjectProperty action can be used by Browser object. To provide dynamic property value, use the Input column. To provide flag for replacing the property string, use the condition column. Setting Global Object property is optional. To use object with global property when required, set GlobalObject in the Condition column. Description : This function is used to customize all objects\u2019 property based on the requirement at runtime.User can give his desired value as an input which will replace the matching condition in the object's property. Input Format :Input Column : @User Defined Text Condition Column : #Variable name Usage: ObjectName Action Input Condition Reference Object setglobalObjectProperty @value %var% PageName << Hardcoded Input Object setglobalObjectProperty Sheet:Column %var% PageName << Input from Datasheet Object setglobalObjectProperty %dynamicVar% %var% PageName << Input from variable Note: It is also possible to use **setObjectProperty**/**setglobalObjectProperty** for replacing multiple variables at the same time.","title":"Dynamic Object"},{"location":"webActions/dynamicObjects/#dynamic-object","text":"","title":"Dynamic Object"},{"location":"webActions/dynamicObjects/#how-to-change-object-properties-at-run-time","text":"Sometimes it is necessary to use a dynamic property for objects at runtime. Customizing the existing properties at runtime can be done by using setObjectProperty and setglobalObjectProperty functions. setObjectProperty function: will update property of the driving object. setglobalObjectProperty function: will update property for all the objects.","title":"How To Change Object Properties At Run Time?"},{"location":"webActions/dynamicObjects/#setobjectproperty","text":"setObjectProperty action can be used by an object. To provide dynamic property value, use the Input column. To provide flag for replacing the property string, use the condition column. Description : This function is used to customize any object property based on the requirement during the runtime. User can give a desired value as an input which will replace the matching condition in the object property. Input Format : @User Defined Text Condition Column : #Variable name Usage: ObjectName Action Input Condition Reference Object setObjectProperty @value %var% PageName << Hardcoded Input Object setObjectProperty Sheet:Column %var% PageName << Input from Datasheet Object setObjectProperty %dynamicVar% %var% PageName << Input from variable Example : There is an object whose xpath is //div[text()='JohnDoe'] and another object whose xpath is //div[text()='JaneDoe'] Step 1 : We can define one object in the Object Repository whose xpath can be parameterised as //div[text()='#userName'] . Now the #userName is also used in the Condition column Step 2: We can parameterise the #userName part from a datasheet as shown in the image below : Internally uses the following Code: private void setProperty(String key, String value) { if (!AutomationObject.dynamicValue.containsKey(Reference)) { Map<String, Map<String, String>> Object = new HashMap<>(); Map<String, String> property = new HashMap<>(); property.put(key, value); Object.put(ObjectName, property); AutomationObject.dynamicValue.put(Reference, Object); } else if (!AutomationObject.dynamicValue.get(Reference).containsKey(ObjectName)) { Map<String, String> property = new HashMap<>(); property.put(key, value); AutomationObject.dynamicValue.get(Reference).put(ObjectName, property); } else { AutomationObject.dynamicValue.get(Reference).get(ObjectName).put(key, value); } }","title":"setObjectProperty"},{"location":"webActions/dynamicObjects/#setglobalobjectproperty","text":"setglobalObjectProperty action can be used by Browser object. To provide dynamic property value, use the Input column. To provide flag for replacing the property string, use the condition column. Setting Global Object property is optional. To use object with global property when required, set GlobalObject in the Condition column. Description : This function is used to customize all objects\u2019 property based on the requirement at runtime.User can give his desired value as an input which will replace the matching condition in the object's property. Input Format :Input Column : @User Defined Text Condition Column : #Variable name Usage: ObjectName Action Input Condition Reference Object setglobalObjectProperty @value %var% PageName << Hardcoded Input Object setglobalObjectProperty Sheet:Column %var% PageName << Input from Datasheet Object setglobalObjectProperty %dynamicVar% %var% PageName << Input from variable Note: It is also possible to use **setObjectProperty**/**setglobalObjectProperty** for replacing multiple variables at the same time.","title":"setglobalObjectProperty"},{"location":"webActions/dynamicwaits/","text":"Dynamic Waits changeWaitTime Description : This function is used to change the override the default wait time (Default is 10 seconds) with the provided value. The default wait time for all the wait actions defined after changeWaitTime action will be the same as defined in the changeWaitTime action. Input Format : @Time in seconds as Integer . Example : 20,30 etc. Usage: ObjectName Action Input Condition Reference Browser changeWaitTime @value << Hardcoded Input Browser changeWaitTime Sheet:Column << Input from Datasheet Browser changeWaitTime %dynamicVar% << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"changing wait time by [<Data>] seconds\", input = InputType.YES) public void changeWaitTime() { try { int t = Integer.parseInt(Data); if (t > 0) { SystemDefaults.waitTime.set(t); Report.updateTestLog(\"changeWaitTime\", \"Wait time changed to \"+ t + \" second/s\", Status.DONE); } else { Report.updateTestLog(\"changeWaitTime\",\"Couldn't change Wait time (invalid input)\",Status.DEBUG); } } catch (NumberFormatException ex) { Report.updateTestLog(\"changeWaitTime\",\"Couldn't change Wait time \", Status.DEBUG); Logger.getLogger(Basic.class.getName()).log(Level.SEVERE, null, ex); } } setElementTimeOut Description : This function is used to override the default timeout for web element finding logic(Default is 10 seconds) with the provided value. Input Format : @Time in seconds as Integer . Example : 20,30 etc. Usage: ObjectName Action Input Condition Reference Browser setElementTimeOut @value << Hardcoded Input Browser setElementTimeOut Sheet:Column << Input from Datasheet Browser setElementTimeOut %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Change Default Element finding wait time by [<Data>] seconds\", input = InputType.YES) public void setElementTimeOut() { if (Data != null && Data.matches(\"[0-9]+\")) { SystemDefaults.elementWaitTime.set(Integer.valueOf(Data)); Report.updateTestLog(Action, \"Element Wait time changed to \" + Data + \" second/s\", Status.DONE); } else { Report.updateTestLog(Action,\"Couldn't change Element Wait time (invalid input) \" + Data,Status.DEBUG); } } Difference between the changeWaitTime and setElementTimeOut actions The changeWaitTime action is used to change the default wait time (10 seconds) for all the wait actions. Once the default wait time is changed using this action, all the wait actions used subsequently will have an explicit timeout for that set duration. The setElementTimeout action is used to change the default time (10 seconds) taken to find an object in your application during execution. Once the default time is changed using this action, for each step following that action will try to find the object within the specified time duration before performing the respective action on that object. If the object cannot be found within the specified time frame, an exception will be thrown. Note : The wait time(changeWaitTime) and the element wait time(setElementTimeOut) can also be set from the UI be navigating to Configurations-> Options . waitForElementToBeVisible Description : This function will wait till the element is visible on the screen . The default wait time for all elements is 10 seconds, which can be overriden using the changeWaitTime action Usage: ObjectName Action Input Condition Reference Object waitForElementToBeVisible PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] to be visible \", condition = InputType.OPTIONAL) public void waitForElementToBeVisible() { waitForElement(WaitType.VISIBLE, \"'\"+ this.ObjectName+ \"' Element becomes visible in stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.visibilityOf(Element)) waitForElementToBeInVisible Description : This function will wait till the element is no longer visible on the screen. Usage: ObjectName Action Input Condition Reference Object waitForElementToBeInVisible PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] to be invisible \", condition = InputType.OPTIONAL) public void waitForElementToBeInVisible() { waitForElement(WaitType.INVISIBLE, \"'\"+ this.ObjectName+ \"' Element becomes invisible in stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.not(ExpectedConditions.visibilityOf(Element))) waitForElementToBeClickable Description : This function will wait till the element becomes clickable. Usage: ObjectName Action Input Condition Reference Object waitForElementToBeClickable PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] to be clickable \", condition = InputType.OPTIONAL) public void waitForElementToBeClickable() { waitForElement(WaitType.CLICKABLE, \"'\"+ this.ObjectName+ \"' Element becomes Clickable in stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.elementToBeClickable(Element)) waitForElementToBeSelected Description : This function will wait till the specified element is selected Usage: ObjectName Action Input Condition Reference Object waitForElementToBeSelected PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] to be selected \", condition = InputType.OPTIONAL) public void waitForElementToBeSelected() { waitForElement(WaitType.SELECTED, \"'\"+ this.ObjectName+ \"' Element Selected in stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.elementToBeSelected(Element)) waitForElementToContainText Description : This function will wait till the element contains the given text Input Format : @ExpectedText Usage: ObjectName Action Input Condition Reference Object waitForElementToContainText @value PageName << Hardcoded Input Object waitForElementToContainText Sheet:Column PageName << Input from Datasheet Object waitForElementToContainText %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for element: [<Object>] to contain text [<Data>]\", condition = InputType.OPTIONAL, input = InputType.YES) public void waitForElementToContainText() { waitForElement(WaitType.TEXT_CONTAINS, \"'\"+ this.ObjectName + \"' Element contained the text: \"+ Data + \" in stipulated Time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.textToBePresentInElement(Element, Data)) waitForElementToContainValue Description : This function will wait till the element contains the given value Input Format : @ExpectedValue ObjectName Action Input Condition Reference Object waitForElementToContainValue @value PageName << Hardcoded Input Object waitForElementToContainValue Sheet:Column PageName << Input from Datasheet Object waitForElementToContainValue %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] element to contain value: [<Data>]\", condition = InputType.OPTIONAL, input = InputType.YES) public void waitForElementToContainValue() { waitForElement(WaitType.VALUE_CONTAINS, \"'\"+ this.ObjectName + \"' Element contained the value: \"+ Data + \" in stipulated Time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.textToBePresentInElementValue(Element, Data)) waitForElementToBePresent Description : This function will wait till the element loads in the DOM. Usage: ObjectName Action Input Condition Reference Object waitForElementToBePresent PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for the element [<Object>] to be present\", condition = InputType.OPTIONAL) public void waitForElementToBePresent() { AObject.setWaitTime(getWaitTime()); try { Element = AObject.findElement(ObjectName, Reference); AObject.resetWaitTime(); if (Element != null) { Report.updateTestLog(Action, \"'\" + this.ObjectName+ \"' Element Present in the stipulated time\", Status.PASS); } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, Condition); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); throw new ForcedException(Action,ex.getMessage()); } } waitForFrameAndSwitch Description : This function will wait for the frame to be available and switch to it. Input : @ id or name or index [This is only applicable when the ObjectName is set as Browser ] The input is optional if you choose to give the web element (the frame itself) under the ObjectName .This element can be added as an object under the Object repository. Usage: 1 ObjectName Action Input Condition Reference Browser waitForFrameAndSwitch frame id or name or index 2 ObjectName Action Input Condition Reference Frame Object waitForFrameAndSwitch PageName Corresponding Code: @Action(object = ObjectType.ANY, desc = \"Wait for Frame To Be Available and Switch to it\",input=InputType.OPTIONAL, condition = InputType.OPTIONAL) public void waitForFrameAndSwitch() { if (Element != null) { waitFor(WaitType.FRAME_EL, \"Switched to Frame By Object '\"+ ObjectName + \"' in stipulated Time\"); } else if (Data != null) { if (Data.matches(\"[0-9]+\")) { waitFor(WaitType.FRAME_IND, \"Switched to Frame By Index '\"+ Data + \"' in stipulated Time\"); } else { waitFor(WaitType.FRAME_STR, \"Switched to Frame By Value '\"+ Data + \"' in stipulated Time\"); } } } Internally uses the following Selenium logic for Frame Element : wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(Element)) Internally uses the following Selenium logic for Frame index : wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(Integer.valueOf(Data, 0))) Internally uses the following Selenium logic for Frame name : wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(Data)) waitForPageLoaded Description : This function will wait till the page is loaded. Note: This is not for Ajax calls Usage: ObjectName Action Input Condition Reference Browser waitForPageLoaded Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Wait for Page to be loaded\", condition = InputType.OPTIONAL) public void waitForPageLoaded() { waitFor(WaitType.CUSTOM_SCRIPT,\"Page load completed in stipulated time\", \"return document.readyState==='complete'\"); } Internally uses the following javascript logic to check for the page readiness: return document.readyState==='complete' waitForAlertPresent Description : This function will wait for alert to appear on the page. Usage: ObjectName Action Input Condition Reference Browser waitForAlertPresent Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Wait for alert to be present \", condition = InputType.OPTIONAL) public void waitForAlertPresent() { waitFor(WaitType.ALERT_PRESENT,\"Alert popped up in stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.alertIsPresent()) waitForTitleToBe Description : This function will wait till the title of the page matches with the given text. Input Format : @ExpectedPageTitle Usage: ObjectName Action Input Condition Reference Browser waitForTitleToBe @value << Hardcoded Input Browser waitForTitleToBe Sheet:Column << Input from Datasheet Browser waitForTitleToBe %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Wait for page's title to be [<Data>]\", input = InputType.YES, condition = InputType.OPTIONAL) public void waitForTitleToBe() { waitFor(WaitType.TITLE_IS,\"Title Equals '\"+ Data + \"' in stipulated Time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.titleIs(Data)); waitForTitleToContain Description : This function will wait till the title of the page has the given text. Input Format : @Full or Partial text of the Title Usage: ObjectName Action Input Condition Reference Browser waitForTitleToContain @value << Hardcoded Input Browser waitForTitleToContain Sheet:Column << Input from Datasheet Browser waitForTitleToContain %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Wait for page's title to contain [<Data>]\", condition = InputType.OPTIONAL, input = InputType.YES) public void waitForTitleToContain() { waitFor(WaitType.TITLE_CONTAINS,\"Title Contains the value '\"+ Data + \"' in stipulated Time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.titleContains(Data)) waitTillCustomScript Description : This function will wait till the given JavaScript returns true. It is applicable only for JavaScript functions that return a boolean value. Input Format : @ Javascript to evaluate Usage: ObjectName Action Input Condition Reference Browser waitTillCustomScript @value << Hardcoded Input Browser waitTillCustomScript Sheet:Column << Input from Datasheet Browser waitTillCustomScript %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Wait till the given javascript condition [<Data>] returns true\", input = InputType.YES, condition = InputType.OPTIONAL) public void waitTillCustomScript() { if (Data != null && !Data.trim().isEmpty()) { if (Data.contains(\"return\")) { waitFor(WaitType.CUSTOM_SCRIPT,\"Condition passed in stipulated time\",Data); } else { Report.updateTestLog(Action, \"Javascript condition should have atleast one return and the condtion should return Boolean value\", Status.DEBUG); } } else { Report.updateTestLog(Action, \"Include a proper javascript condition to check\", Status.DEBUG); } } Internally uses the following logic : private ExpectedCondition<?> getCustomCondition(final String javascript) { return new ExpectedCondition<Boolean>() { @Override public Boolean apply(WebDriver driver) { return (Boolean) ((JavascriptExecutor) driver).executeScript(javascript); } }; } waitForElementSelectionToBeTrue Description : This function will wait till the element selection becomes true Usage: ObjectName Action Input Condition Reference Object waitForElementSelectionToBeTrue PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] element to be selected: [<Data>]\", condition = InputType.OPTIONAL) public void waitForElementSelectionToBeTrue() { waitForElement(WaitType.EL_SELECT_TRUE, \"'\"+ this.ObjectName + \"' Element got Selected in the stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.elementSelectionStateToBe(Element, true)) waitForElementSelectionToBeFalse Description : This function will wait till the element selection becomes false. Usage: ObjectName Action Input Condition Reference Object waitForElementSelectionToBeFalse PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] element to be deselected\", condition = InputType.OPTIONAL) public void waitForElementSelectionToBeFalse() { waitForElement(WaitType.EL_SELECT_FALSE, \"'\"+ this.ObjectName+ \"' Element got Deselected in the stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.elementSelectionStateToBe(Element, false))","title":"Dynamic Waits"},{"location":"webActions/dynamicwaits/#dynamic-waits","text":"","title":"Dynamic Waits"},{"location":"webActions/dynamicwaits/#changewaittime","text":"Description : This function is used to change the override the default wait time (Default is 10 seconds) with the provided value. The default wait time for all the wait actions defined after changeWaitTime action will be the same as defined in the changeWaitTime action. Input Format : @Time in seconds as Integer . Example : 20,30 etc. Usage: ObjectName Action Input Condition Reference Browser changeWaitTime @value << Hardcoded Input Browser changeWaitTime Sheet:Column << Input from Datasheet Browser changeWaitTime %dynamicVar% << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"changing wait time by [<Data>] seconds\", input = InputType.YES) public void changeWaitTime() { try { int t = Integer.parseInt(Data); if (t > 0) { SystemDefaults.waitTime.set(t); Report.updateTestLog(\"changeWaitTime\", \"Wait time changed to \"+ t + \" second/s\", Status.DONE); } else { Report.updateTestLog(\"changeWaitTime\",\"Couldn't change Wait time (invalid input)\",Status.DEBUG); } } catch (NumberFormatException ex) { Report.updateTestLog(\"changeWaitTime\",\"Couldn't change Wait time \", Status.DEBUG); Logger.getLogger(Basic.class.getName()).log(Level.SEVERE, null, ex); } }","title":"changeWaitTime"},{"location":"webActions/dynamicwaits/#setelementtimeout","text":"Description : This function is used to override the default timeout for web element finding logic(Default is 10 seconds) with the provided value. Input Format : @Time in seconds as Integer . Example : 20,30 etc. Usage: ObjectName Action Input Condition Reference Browser setElementTimeOut @value << Hardcoded Input Browser setElementTimeOut Sheet:Column << Input from Datasheet Browser setElementTimeOut %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Change Default Element finding wait time by [<Data>] seconds\", input = InputType.YES) public void setElementTimeOut() { if (Data != null && Data.matches(\"[0-9]+\")) { SystemDefaults.elementWaitTime.set(Integer.valueOf(Data)); Report.updateTestLog(Action, \"Element Wait time changed to \" + Data + \" second/s\", Status.DONE); } else { Report.updateTestLog(Action,\"Couldn't change Element Wait time (invalid input) \" + Data,Status.DEBUG); } }","title":"setElementTimeOut"},{"location":"webActions/dynamicwaits/#difference-between-the-changewaittime-and-setelementtimeout-actions","text":"The changeWaitTime action is used to change the default wait time (10 seconds) for all the wait actions. Once the default wait time is changed using this action, all the wait actions used subsequently will have an explicit timeout for that set duration. The setElementTimeout action is used to change the default time (10 seconds) taken to find an object in your application during execution. Once the default time is changed using this action, for each step following that action will try to find the object within the specified time duration before performing the respective action on that object. If the object cannot be found within the specified time frame, an exception will be thrown. Note : The wait time(changeWaitTime) and the element wait time(setElementTimeOut) can also be set from the UI be navigating to Configurations-> Options .","title":"Difference between the changeWaitTime and setElementTimeOut actions"},{"location":"webActions/dynamicwaits/#waitforelementtobevisible","text":"Description : This function will wait till the element is visible on the screen . The default wait time for all elements is 10 seconds, which can be overriden using the changeWaitTime action Usage: ObjectName Action Input Condition Reference Object waitForElementToBeVisible PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] to be visible \", condition = InputType.OPTIONAL) public void waitForElementToBeVisible() { waitForElement(WaitType.VISIBLE, \"'\"+ this.ObjectName+ \"' Element becomes visible in stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.visibilityOf(Element))","title":"waitForElementToBeVisible"},{"location":"webActions/dynamicwaits/#waitforelementtobeinvisible","text":"Description : This function will wait till the element is no longer visible on the screen. Usage: ObjectName Action Input Condition Reference Object waitForElementToBeInVisible PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] to be invisible \", condition = InputType.OPTIONAL) public void waitForElementToBeInVisible() { waitForElement(WaitType.INVISIBLE, \"'\"+ this.ObjectName+ \"' Element becomes invisible in stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.not(ExpectedConditions.visibilityOf(Element)))","title":"waitForElementToBeInVisible"},{"location":"webActions/dynamicwaits/#waitforelementtobeclickable","text":"Description : This function will wait till the element becomes clickable. Usage: ObjectName Action Input Condition Reference Object waitForElementToBeClickable PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] to be clickable \", condition = InputType.OPTIONAL) public void waitForElementToBeClickable() { waitForElement(WaitType.CLICKABLE, \"'\"+ this.ObjectName+ \"' Element becomes Clickable in stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.elementToBeClickable(Element))","title":"waitForElementToBeClickable"},{"location":"webActions/dynamicwaits/#waitforelementtobeselected","text":"Description : This function will wait till the specified element is selected Usage: ObjectName Action Input Condition Reference Object waitForElementToBeSelected PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] to be selected \", condition = InputType.OPTIONAL) public void waitForElementToBeSelected() { waitForElement(WaitType.SELECTED, \"'\"+ this.ObjectName+ \"' Element Selected in stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.elementToBeSelected(Element))","title":"waitForElementToBeSelected"},{"location":"webActions/dynamicwaits/#waitforelementtocontaintext","text":"Description : This function will wait till the element contains the given text Input Format : @ExpectedText Usage: ObjectName Action Input Condition Reference Object waitForElementToContainText @value PageName << Hardcoded Input Object waitForElementToContainText Sheet:Column PageName << Input from Datasheet Object waitForElementToContainText %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for element: [<Object>] to contain text [<Data>]\", condition = InputType.OPTIONAL, input = InputType.YES) public void waitForElementToContainText() { waitForElement(WaitType.TEXT_CONTAINS, \"'\"+ this.ObjectName + \"' Element contained the text: \"+ Data + \" in stipulated Time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.textToBePresentInElement(Element, Data))","title":"waitForElementToContainText"},{"location":"webActions/dynamicwaits/#waitforelementtocontainvalue","text":"Description : This function will wait till the element contains the given value Input Format : @ExpectedValue ObjectName Action Input Condition Reference Object waitForElementToContainValue @value PageName << Hardcoded Input Object waitForElementToContainValue Sheet:Column PageName << Input from Datasheet Object waitForElementToContainValue %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] element to contain value: [<Data>]\", condition = InputType.OPTIONAL, input = InputType.YES) public void waitForElementToContainValue() { waitForElement(WaitType.VALUE_CONTAINS, \"'\"+ this.ObjectName + \"' Element contained the value: \"+ Data + \" in stipulated Time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.textToBePresentInElementValue(Element, Data))","title":"waitForElementToContainValue"},{"location":"webActions/dynamicwaits/#waitforelementtobepresent","text":"Description : This function will wait till the element loads in the DOM. Usage: ObjectName Action Input Condition Reference Object waitForElementToBePresent PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for the element [<Object>] to be present\", condition = InputType.OPTIONAL) public void waitForElementToBePresent() { AObject.setWaitTime(getWaitTime()); try { Element = AObject.findElement(ObjectName, Reference); AObject.resetWaitTime(); if (Element != null) { Report.updateTestLog(Action, \"'\" + this.ObjectName+ \"' Element Present in the stipulated time\", Status.PASS); } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, Condition); } } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); throw new ForcedException(Action,ex.getMessage()); } }","title":"waitForElementToBePresent"},{"location":"webActions/dynamicwaits/#waitforframeandswitch","text":"Description : This function will wait for the frame to be available and switch to it. Input : @ id or name or index [This is only applicable when the ObjectName is set as Browser ] The input is optional if you choose to give the web element (the frame itself) under the ObjectName .This element can be added as an object under the Object repository. Usage: 1 ObjectName Action Input Condition Reference Browser waitForFrameAndSwitch frame id or name or index 2 ObjectName Action Input Condition Reference Frame Object waitForFrameAndSwitch PageName Corresponding Code: @Action(object = ObjectType.ANY, desc = \"Wait for Frame To Be Available and Switch to it\",input=InputType.OPTIONAL, condition = InputType.OPTIONAL) public void waitForFrameAndSwitch() { if (Element != null) { waitFor(WaitType.FRAME_EL, \"Switched to Frame By Object '\"+ ObjectName + \"' in stipulated Time\"); } else if (Data != null) { if (Data.matches(\"[0-9]+\")) { waitFor(WaitType.FRAME_IND, \"Switched to Frame By Index '\"+ Data + \"' in stipulated Time\"); } else { waitFor(WaitType.FRAME_STR, \"Switched to Frame By Value '\"+ Data + \"' in stipulated Time\"); } } } Internally uses the following Selenium logic for Frame Element : wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(Element)) Internally uses the following Selenium logic for Frame index : wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(Integer.valueOf(Data, 0))) Internally uses the following Selenium logic for Frame name : wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(Data))","title":"waitForFrameAndSwitch"},{"location":"webActions/dynamicwaits/#waitforpageloaded","text":"Description : This function will wait till the page is loaded. Note: This is not for Ajax calls Usage: ObjectName Action Input Condition Reference Browser waitForPageLoaded Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Wait for Page to be loaded\", condition = InputType.OPTIONAL) public void waitForPageLoaded() { waitFor(WaitType.CUSTOM_SCRIPT,\"Page load completed in stipulated time\", \"return document.readyState==='complete'\"); } Internally uses the following javascript logic to check for the page readiness: return document.readyState==='complete'","title":"waitForPageLoaded"},{"location":"webActions/dynamicwaits/#waitforalertpresent","text":"Description : This function will wait for alert to appear on the page. Usage: ObjectName Action Input Condition Reference Browser waitForAlertPresent Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Wait for alert to be present \", condition = InputType.OPTIONAL) public void waitForAlertPresent() { waitFor(WaitType.ALERT_PRESENT,\"Alert popped up in stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.alertIsPresent())","title":"waitForAlertPresent"},{"location":"webActions/dynamicwaits/#waitfortitletobe","text":"Description : This function will wait till the title of the page matches with the given text. Input Format : @ExpectedPageTitle Usage: ObjectName Action Input Condition Reference Browser waitForTitleToBe @value << Hardcoded Input Browser waitForTitleToBe Sheet:Column << Input from Datasheet Browser waitForTitleToBe %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Wait for page's title to be [<Data>]\", input = InputType.YES, condition = InputType.OPTIONAL) public void waitForTitleToBe() { waitFor(WaitType.TITLE_IS,\"Title Equals '\"+ Data + \"' in stipulated Time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.titleIs(Data));","title":"waitForTitleToBe"},{"location":"webActions/dynamicwaits/#waitfortitletocontain","text":"Description : This function will wait till the title of the page has the given text. Input Format : @Full or Partial text of the Title Usage: ObjectName Action Input Condition Reference Browser waitForTitleToContain @value << Hardcoded Input Browser waitForTitleToContain Sheet:Column << Input from Datasheet Browser waitForTitleToContain %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Wait for page's title to contain [<Data>]\", condition = InputType.OPTIONAL, input = InputType.YES) public void waitForTitleToContain() { waitFor(WaitType.TITLE_CONTAINS,\"Title Contains the value '\"+ Data + \"' in stipulated Time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.titleContains(Data))","title":"waitForTitleToContain"},{"location":"webActions/dynamicwaits/#waittillcustomscript","text":"Description : This function will wait till the given JavaScript returns true. It is applicable only for JavaScript functions that return a boolean value. Input Format : @ Javascript to evaluate Usage: ObjectName Action Input Condition Reference Browser waitTillCustomScript @value << Hardcoded Input Browser waitTillCustomScript Sheet:Column << Input from Datasheet Browser waitTillCustomScript %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Wait till the given javascript condition [<Data>] returns true\", input = InputType.YES, condition = InputType.OPTIONAL) public void waitTillCustomScript() { if (Data != null && !Data.trim().isEmpty()) { if (Data.contains(\"return\")) { waitFor(WaitType.CUSTOM_SCRIPT,\"Condition passed in stipulated time\",Data); } else { Report.updateTestLog(Action, \"Javascript condition should have atleast one return and the condtion should return Boolean value\", Status.DEBUG); } } else { Report.updateTestLog(Action, \"Include a proper javascript condition to check\", Status.DEBUG); } } Internally uses the following logic : private ExpectedCondition<?> getCustomCondition(final String javascript) { return new ExpectedCondition<Boolean>() { @Override public Boolean apply(WebDriver driver) { return (Boolean) ((JavascriptExecutor) driver).executeScript(javascript); } }; }","title":"waitTillCustomScript"},{"location":"webActions/dynamicwaits/#waitforelementselectiontobetrue","text":"Description : This function will wait till the element selection becomes true Usage: ObjectName Action Input Condition Reference Object waitForElementSelectionToBeTrue PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] element to be selected: [<Data>]\", condition = InputType.OPTIONAL) public void waitForElementSelectionToBeTrue() { waitForElement(WaitType.EL_SELECT_TRUE, \"'\"+ this.ObjectName + \"' Element got Selected in the stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.elementSelectionStateToBe(Element, true))","title":"waitForElementSelectionToBeTrue"},{"location":"webActions/dynamicwaits/#waitforelementselectiontobefalse","text":"Description : This function will wait till the element selection becomes false. Usage: ObjectName Action Input Condition Reference Object waitForElementSelectionToBeFalse PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Wait for [<Object>] element to be deselected\", condition = InputType.OPTIONAL) public void waitForElementSelectionToBeFalse() { waitForElement(WaitType.EL_SELECT_FALSE, \"'\"+ this.ObjectName+ \"' Element got Deselected in the stipulated time\"); } Internally uses the following Selenium logic : wait.until(ExpectedConditions.elementSelectionStateToBe(Element, false))","title":"waitForElementSelectionToBeFalse"},{"location":"webActions/elementAssertions/","text":"Element Assertions assertElementPresent Description : This function will check if specified element is present in the web page ie. In the DOM of the page Usage: ObjectName Action Input Condition Reference Object assertElementPresent PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] is present\") public void assertElementPresent() { assertElement(elementPresent()); } Internally uses the following Selenium logic : Checks whether driver is alive and element is present ( see code below ),then using the derived Boolean result in the above method: checkIfDriverIsAlive() && Element != null assertElementNotPresent Description : This function will check if the specified element is not present in the web page ie. In the DOM itself. Usage: ObjectName Action Input Condition Reference Object assertElementNotPresent PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] is not present\") public void assertElementNotPresent() { assertNotElement(!elementPresent()); } Internally uses the following Selenium logic : Checks whether driver is alive and element is present ( see code below ),then negating the derived Boolean result in the above method: checkIfDriverIsAlive() && Element != null assertElementSelected Description : This function will check if the element is selected. Usage: ObjectName Action Input Condition Reference Object assertElementSelected PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] element is selected\") public void assertElementSelected() { assertElement(elementSelected()); } Internally uses the following Selenium logic : Checks whether the element is selected ( see code below ),then using the derived Boolean result in the above method: Element.isSelected() assertElementNotSelected Description : This function will check if the specified element is not selected Usage: ObjectName Action Input Condition Reference Object assertElementNotSelected PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] is not selected\") public void assertElementNotSelected() { assertNotElement(!elementSelected()); } Internally uses the following Selenium logic : Checks whether the element is selected ( see code below ),then negating the derived Boolean result in the above method: Element.isSelected() assertElementDisplayed Description : This function will check if the object is displayed on web page. Usage: ObjectName Action Input Condition Reference Object assertElementDisplayed PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] element is displayed\") public void assertElementDisplayed() { assertElement(elementDisplayed()); } Internally uses the following Selenium logic : Checks whether the element is enabled ( see code below ),then using the derived Boolean result in the above method: Element.isDisplayed() assertElementNotDisplayed Description : This function will check if the specified element is not displayed. Usage: ObjectName Action Input Condition Reference Object assertElementNotDisplayed PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] is not displayed\") public void assertElementNotDisplayed() { assertNotElement(!elementDisplayed()); } Internally uses the following Selenium logic : Checks whether the element is displayed ( see code below ),then negating the derived Boolean result in the above method: Element.isDisplayed() assertElementEnabled Description : This function will check if the element is enabled. Usage: ObjectName Action Input Condition Reference Object assertElementEnabled PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] is enabled on the current page\") public void assertElementEnabled() { assertElement(elementEnabled()); } Internally uses the following Selenium logic : Checks whether the element is enabled ( see code below ),then using the derived Boolean result in the above method: Element.isEnabled() assertElementNotEnabled Description : This function will check if the specified element is not enabled. Usage: ObjectName Action Input Condition Reference Object assertElementNotEnabled PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] is not enabled\") public void assertElementNotEnabled() { assertNotElement(!elementEnabled()); } Internally uses the following Selenium logic : Checks whether the element is enabled ( see code below ),then negating the derived Boolean result in the above method: Element.isEnabled()","title":"Element Assertions"},{"location":"webActions/elementAssertions/#element-assertions","text":"","title":"Element Assertions"},{"location":"webActions/elementAssertions/#assertelementpresent","text":"Description : This function will check if specified element is present in the web page ie. In the DOM of the page Usage: ObjectName Action Input Condition Reference Object assertElementPresent PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] is present\") public void assertElementPresent() { assertElement(elementPresent()); } Internally uses the following Selenium logic : Checks whether driver is alive and element is present ( see code below ),then using the derived Boolean result in the above method: checkIfDriverIsAlive() && Element != null","title":"assertElementPresent"},{"location":"webActions/elementAssertions/#assertelementnotpresent","text":"Description : This function will check if the specified element is not present in the web page ie. In the DOM itself. Usage: ObjectName Action Input Condition Reference Object assertElementNotPresent PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] is not present\") public void assertElementNotPresent() { assertNotElement(!elementPresent()); } Internally uses the following Selenium logic : Checks whether driver is alive and element is present ( see code below ),then negating the derived Boolean result in the above method: checkIfDriverIsAlive() && Element != null","title":"assertElementNotPresent"},{"location":"webActions/elementAssertions/#assertelementselected","text":"Description : This function will check if the element is selected. Usage: ObjectName Action Input Condition Reference Object assertElementSelected PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] element is selected\") public void assertElementSelected() { assertElement(elementSelected()); } Internally uses the following Selenium logic : Checks whether the element is selected ( see code below ),then using the derived Boolean result in the above method: Element.isSelected()","title":"assertElementSelected"},{"location":"webActions/elementAssertions/#assertelementnotselected","text":"Description : This function will check if the specified element is not selected Usage: ObjectName Action Input Condition Reference Object assertElementNotSelected PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] is not selected\") public void assertElementNotSelected() { assertNotElement(!elementSelected()); } Internally uses the following Selenium logic : Checks whether the element is selected ( see code below ),then negating the derived Boolean result in the above method: Element.isSelected()","title":"assertElementNotSelected"},{"location":"webActions/elementAssertions/#assertelementdisplayed","text":"Description : This function will check if the object is displayed on web page. Usage: ObjectName Action Input Condition Reference Object assertElementDisplayed PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] element is displayed\") public void assertElementDisplayed() { assertElement(elementDisplayed()); } Internally uses the following Selenium logic : Checks whether the element is enabled ( see code below ),then using the derived Boolean result in the above method: Element.isDisplayed()","title":"assertElementDisplayed"},{"location":"webActions/elementAssertions/#assertelementnotdisplayed","text":"Description : This function will check if the specified element is not displayed. Usage: ObjectName Action Input Condition Reference Object assertElementNotDisplayed PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] is not displayed\") public void assertElementNotDisplayed() { assertNotElement(!elementDisplayed()); } Internally uses the following Selenium logic : Checks whether the element is displayed ( see code below ),then negating the derived Boolean result in the above method: Element.isDisplayed()","title":"assertElementNotDisplayed"},{"location":"webActions/elementAssertions/#assertelementenabled","text":"Description : This function will check if the element is enabled. Usage: ObjectName Action Input Condition Reference Object assertElementEnabled PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] is enabled on the current page\") public void assertElementEnabled() { assertElement(elementEnabled()); } Internally uses the following Selenium logic : Checks whether the element is enabled ( see code below ),then using the derived Boolean result in the above method: Element.isEnabled()","title":"assertElementEnabled"},{"location":"webActions/elementAssertions/#assertelementnotenabled","text":"Description : This function will check if the specified element is not enabled. Usage: ObjectName Action Input Condition Reference Object assertElementNotEnabled PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>] is not enabled\") public void assertElementNotEnabled() { assertNotElement(!elementEnabled()); } Internally uses the following Selenium logic : Checks whether the element is enabled ( see code below ),then negating the derived Boolean result in the above method: Element.isEnabled()","title":"assertElementNotEnabled"},{"location":"webActions/elementAttributeAssertions/","text":"Element Attribute Assertions assertElementAttrEquals Description : This function will validate if specified attribute for an element is equal to the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrEquals @value PageName << Hardcoded Input Object assertElementAttrEquals Sheet:Column PageName << Input from Datasheet Object assertElementAttrEquals %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute Equals [<Data>]\", input =InputType.YES) public void assertElementAttrEquals() { assertElementAttr(SpecText.Type.IS); } Internally uses Galen Specs Language to check that URL text is Equal or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertElementAttrContains Description : This function will validate if the specified attribute for an element contains the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrContains @value PageName << Hardcoded Input Object assertElementAttrContains Sheet:Column PageName << Input from Datasheet Object assertElementAttrContains %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute Contains [<Data>]\", input =InputType.YES) public void assertElementAttrContains() { assertElementAttr(SpecText.Type.CONTAINS); } Internally uses Galen Specs Language to check that URL text Contains or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text contains - checks element contains expected text assertElementAttrStartsWith Description : This function will validate if specified attribute for an element begins with the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrStartsWith @value PageName << Hardcoded Input Object assertElementAttrStartsWith Sheet:Column PageName << Input from Datasheet Object assertElementAttrStartsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute StartsWith [<Data>]\", input =InputType.YES) public void assertElementAttrStartsWith() { assertElementAttr(SpecText.Type.STARTS); } Internally uses Galen Specs Language to check that URL text StartsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text starts - element should start with expected text assertElementAttrEndsWith Description : This function will validate if specified attribute for an element ends with user provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrEndsWith @value PageName << Hardcoded Input Object assertElementAttrEndsWith Sheet:Column PageName << Input from Datasheet Object assertElementAttrEndsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute EndsWith [<Data>]\", input =InputType.YES) public void assertElementAttrEndsWith() { assertElementAttr(SpecText.Type.ENDS); } Internally uses Galen Specs Language to check that URL text EndsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text ends - element should end with expected text assertElementAttrMatches Description : This function will validate if specified attribute for an element matches with the user-provided data. You can also use regular expression in the Input field. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrMatches @value PageName << Hardcoded Input Object assertElementAttrMatches Sheet:Column PageName << Input from Datasheet Object assertElementAttrMatches %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute Matches [<Data>]\", input =InputType.YES) public void assertElementAttrMatches() { assertElementAttr(SpecText.Type.MATCHES); } Internally uses Galen Specs Language to check that URL text Matches or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text matches - verifies that text matches Java Regular Expression assertElementAttrIEquals Description : This function will validate if specified attribute for an element is equals the user-provided data.This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrIEquals @value PageName << Hardcoded Input Object assertElementAttrIEquals Sheet:Column PageName << Input from Datasheet Object assertElementAttrIEquals %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute Equals [Ignorecase] [<Data>]\", input =InputType.YES) public void assertElementAttrIEquals() { assertElementAttrI(SpecText.Type.IS); } Internally uses Galen Specs Language to check that URL text is Equal or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertElementAttrIContains Description : This function will validate if specified attribute contains user-provided data.This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrIContains @value PageName << Hardcoded Input Object assertElementAttrIContains Sheet:Column PageName << Input from Datasheet Object assertElementAttrIContains %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute Contains [Ignorecase] [<Data>]\", input =InputType.YES) public void assertElementAttrIContains() { assertElementAttrI(SpecText.Type.CONTAINS); } Internally uses Galen Specs Language to check that URL text Contains or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text contains - checks element contains expected text assertElementAttrIStartsWith Description : This function will validate if specified attribute for an element begins with the user-provided data. This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrIStartsWith @value PageName << Hardcoded Input Object assertElementAttrIStartsWith Sheet:Column PageName << Input from Datasheet Object assertElementAttrIStartsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute StartsWith [Ignorecase] [<Data>]\", input =InputType.YES) public void assertElementAttrIStartsWith() { assertElementAttrI(SpecText.Type.STARTS); } Internally uses Galen Specs Language to check that URL text StartsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text starts - element should start with expected text assertElementAttrIEndsWith Description : This function will validate if specified attribute for an element ends with the user-provided data. This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrIEndsWith @value PageName << Hardcoded Input Object assertElementAttrIEndsWith Sheet:Column PageName << Input from Datasheet Object assertElementAttrIEndsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute EndsWith [Ignorecase] [<Data>]\", input =InputType.YES) public void assertElementAttrIEndsWith() { assertElementAttrI(SpecText.Type.ENDS); } Internally uses Galen Specs Language to check that URL text EndsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text ends - element should end with expected text","title":"Element Attribute Assertions"},{"location":"webActions/elementAttributeAssertions/#element-attribute-assertions","text":"","title":"Element Attribute Assertions"},{"location":"webActions/elementAttributeAssertions/#assertelementattrequals","text":"Description : This function will validate if specified attribute for an element is equal to the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrEquals @value PageName << Hardcoded Input Object assertElementAttrEquals Sheet:Column PageName << Input from Datasheet Object assertElementAttrEquals %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute Equals [<Data>]\", input =InputType.YES) public void assertElementAttrEquals() { assertElementAttr(SpecText.Type.IS); } Internally uses Galen Specs Language to check that URL text is Equal or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertElementAttrEquals"},{"location":"webActions/elementAttributeAssertions/#assertelementattrcontains","text":"Description : This function will validate if the specified attribute for an element contains the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrContains @value PageName << Hardcoded Input Object assertElementAttrContains Sheet:Column PageName << Input from Datasheet Object assertElementAttrContains %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute Contains [<Data>]\", input =InputType.YES) public void assertElementAttrContains() { assertElementAttr(SpecText.Type.CONTAINS); } Internally uses Galen Specs Language to check that URL text Contains or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text contains - checks element contains expected text","title":"assertElementAttrContains"},{"location":"webActions/elementAttributeAssertions/#assertelementattrstartswith","text":"Description : This function will validate if specified attribute for an element begins with the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrStartsWith @value PageName << Hardcoded Input Object assertElementAttrStartsWith Sheet:Column PageName << Input from Datasheet Object assertElementAttrStartsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute StartsWith [<Data>]\", input =InputType.YES) public void assertElementAttrStartsWith() { assertElementAttr(SpecText.Type.STARTS); } Internally uses Galen Specs Language to check that URL text StartsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text starts - element should start with expected text","title":"assertElementAttrStartsWith"},{"location":"webActions/elementAttributeAssertions/#assertelementattrendswith","text":"Description : This function will validate if specified attribute for an element ends with user provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrEndsWith @value PageName << Hardcoded Input Object assertElementAttrEndsWith Sheet:Column PageName << Input from Datasheet Object assertElementAttrEndsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute EndsWith [<Data>]\", input =InputType.YES) public void assertElementAttrEndsWith() { assertElementAttr(SpecText.Type.ENDS); } Internally uses Galen Specs Language to check that URL text EndsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text ends - element should end with expected text","title":"assertElementAttrEndsWith"},{"location":"webActions/elementAttributeAssertions/#assertelementattrmatches","text":"Description : This function will validate if specified attribute for an element matches with the user-provided data. You can also use regular expression in the Input field. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrMatches @value PageName << Hardcoded Input Object assertElementAttrMatches Sheet:Column PageName << Input from Datasheet Object assertElementAttrMatches %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute Matches [<Data>]\", input =InputType.YES) public void assertElementAttrMatches() { assertElementAttr(SpecText.Type.MATCHES); } Internally uses Galen Specs Language to check that URL text Matches or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text matches - verifies that text matches Java Regular Expression","title":"assertElementAttrMatches"},{"location":"webActions/elementAttributeAssertions/#assertelementattriequals","text":"Description : This function will validate if specified attribute for an element is equals the user-provided data.This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrIEquals @value PageName << Hardcoded Input Object assertElementAttrIEquals Sheet:Column PageName << Input from Datasheet Object assertElementAttrIEquals %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute Equals [Ignorecase] [<Data>]\", input =InputType.YES) public void assertElementAttrIEquals() { assertElementAttrI(SpecText.Type.IS); } Internally uses Galen Specs Language to check that URL text is Equal or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertElementAttrIEquals"},{"location":"webActions/elementAttributeAssertions/#assertelementattricontains","text":"Description : This function will validate if specified attribute contains user-provided data.This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrIContains @value PageName << Hardcoded Input Object assertElementAttrIContains Sheet:Column PageName << Input from Datasheet Object assertElementAttrIContains %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute Contains [Ignorecase] [<Data>]\", input =InputType.YES) public void assertElementAttrIContains() { assertElementAttrI(SpecText.Type.CONTAINS); } Internally uses Galen Specs Language to check that URL text Contains or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text contains - checks element contains expected text","title":"assertElementAttrIContains"},{"location":"webActions/elementAttributeAssertions/#assertelementattristartswith","text":"Description : This function will validate if specified attribute for an element begins with the user-provided data. This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrIStartsWith @value PageName << Hardcoded Input Object assertElementAttrIStartsWith Sheet:Column PageName << Input from Datasheet Object assertElementAttrIStartsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute StartsWith [Ignorecase] [<Data>]\", input =InputType.YES) public void assertElementAttrIStartsWith() { assertElementAttrI(SpecText.Type.STARTS); } Internally uses Galen Specs Language to check that URL text StartsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text starts - element should start with expected text","title":"assertElementAttrIStartsWith"},{"location":"webActions/elementAttributeAssertions/#assertelementattriendswith","text":"Description : This function will validate if specified attribute for an element ends with the user-provided data. This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Usage: ObjectName Action Input Condition Reference Object assertElementAttrIEndsWith @value PageName << Hardcoded Input Object assertElementAttrIEndsWith Sheet:Column PageName << Input from Datasheet Object assertElementAttrIEndsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Attribute EndsWith [Ignorecase] [<Data>]\", input =InputType.YES) public void assertElementAttrIEndsWith() { assertElementAttrI(SpecText.Type.ENDS); } Internally uses Galen Specs Language to check that URL text EndsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text ends - element should end with expected text","title":"assertElementAttrIEndsWith"},{"location":"webActions/elementTextAssertions/","text":"Element Text Assertions assertTextPresentInPage Description : This function will search for the expected text within the html tag of the page and assert the same Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Browser assertTextPresentInPage @value PageName << Hardcoded Input Browser assertTextPresentInPage Sheet:Column PageName << Input from Datasheet Browser assertTextPresentInPage %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if text: [<Data>] is present on the page\", input = InputType.YES) public void assertTextPresentInPage() throws RuntimeException { try { String strObj = Data; if (Driver.findElement(By.tagName(\"html\")).getText().contains(strObj)) { System.out.println(\"assertTextPresent passed\"); Report.updateTestLog(\"assertTextPresentInPage\", \"Expected text '\" + strObj + \"' is present in the page\", Status.PASS); } else { System.out.println(\"assertTextPresentInPage failed\"); throw new Exception(\"Expected text '\" + strObj + \"' is not present in the page\"); } } catch (Exception e) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e); throw new ForcedException(\"assertTextPresentInPage\", e.getMessage()); } } assertElementTextEquals Description : This function will validate if a specified element text is equal to the user-provided text. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextEquals @value PageName << Hardcoded Input Object assertElementTextEquals Sheet:Column PageName << Input from Datasheet Object assertElementTextEquals %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text Equals [<Data>]\",input = InputType.YES) public void assertElementTextEquals() { assertElementText(Type.IS); } Internally uses Galen Specs Language to check that element text is Equal or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertElementTextContains Description : This function will check if an element text contains the expected text. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextContains @value PageName << Hardcoded Input Object assertElementTextContains Sheet:Column PageName << Input from Datasheet Object assertElementTextContains %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>]'s Text Contains [<Data>]\",input = InputType.YES) public void assertElementTextContains() { assertElementText(Type.CONTAINS); } Internally uses Galen Specs Language to check that element text is Contains or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertElementTextStartsWith Description : This function will validate if specified element text starts with user provided data. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextStartsWith @value PageName << Hardcoded Input Object assertElementTextStartsWith Sheet:Column PageName << Input from Datasheet Object assertElementTextStartsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text StartsWith [<Data>]\",input = InputType.YES) public void assertElementTextStartsWith() { assertElementText(Type.STARTS); } Internally uses Galen Specs Language to check that element text is Start With or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertElementTextEndsWith Description : This function will validate if the specified element text ends with user-provided data. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextEndsWith @value PageName << Hardcoded Input Object assertElementTextEndsWith Sheet:Column PageName << Input from Datasheet Object assertElementTextEndsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text EndsWith [<Data>]\",input = InputType.YES) public void assertElementTextEndsWith() { assertElementText(Type.ENDS); } Internally uses Galen Specs Language to check that element text is Ends With or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertElementTextMatches Description : This function will validate if a specified element text matches with the user-provided data. You can also use regular expression in the Input field . Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextMatches @value PageName << Hardcoded Input Object assertElementTextMatches Sheet:Column PageName << Input from Datasheet Object assertElementTextMatches %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text Matches [<Data>]\",input = InputType.YES) public void assertElementTextMatches() { assertElementText(Type.MATCHES); } Internally uses Galen Specs Language to check that element text is Matches or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertElementTextIEquals Description : This function will validate if a specified element text is equal to the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextIEquals @value PageName << Hardcoded Input Object assertElementTextIEquals Sheet:Column PageName << Input from Datasheet Object assertElementTextIEquals %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text Equals [Ignorecase] [<Data>]\",input = InputType.YES) public void assertElementTextIEquals() { assertElementTextI(Type.IS); } Internally uses Galen Specs Language to check that element text is Equals or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertElementTextIContains Description : This function will validate if a specified element text contains the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextIContains @value PageName << Hardcoded Input Object assertElementTextIContains Sheet:Column PageName << Input from Datasheet Object assertElementTextIContains %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text Contains [Ignorecase] [<Data>]\",input = InputType.YES) public void assertElementTextIContains() { assertElementTextI(Type.CONTAINS); } Internally uses Galen Specs Language to check that element text is Contains or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertElementTextIStartsWith Description : This function will validate if a specified element text begins with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextIStartsWith @value PageName << Hardcoded Input Object assertElementTextIStartsWith Sheet:Column PageName << Input from Datasheet Object assertElementTextIStartsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text StartsWith [Ignorecase] [<Data>]\",input = InputType.YES) public void assertElementTextIStartsWith() { assertElementTextI(Type.STARTS); } Internally uses Galen Specs Language to check that element text is Starts With or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertElementTextIEndsWith Description : This function will validate if a specified element text ends with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextIEndsWith @value PageName << Hardcoded Input Object assertElementTextIEndsWith Sheet:Column PageName << Input from Datasheet Object assertElementTextIEndsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text EndsWith [Ignorecase] [<Data>]\",input = InputType.YES) public void assertElementTextIEndsWith() { assertElementTextI(Type.ENDS); } Internally uses Galen Specs Language to check that element text is Ends With or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertElementTextContainsByLabel Description : This function will check if the text of the input element adjacent to provided label element contains the given text(in the Input Column) Input Format : @Expected Text. Usage: ObjectName Action Input Condition Reference Object assertElementTextContainsByLabel @value PageName << Hardcoded Input Object assertElementTextContainsByLabel Sheet:Column PageName << Input from Datasheet Object assertElementTextContainsByLabel %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Text adjacent to provided label element Contains [<Data>]\", input =InputType.YES) public void assertElementTextContainsByLabel() { cc.Element = findInputElementByLabelTextByXpath(); new Text(cc).assertElementTextContains(); } Internally uses Galen Specs Language to check that element text is Adjacent to provided label or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertElementTextByLabel Description : This function will check if the text of the input element adjacent to provided label element equals the given text(in the Input Column) Usage: ObjectName Action Input Condition Reference Object assertElementTextByLabel @value PageName << Hardcoded Input Object assertElementTextByLabel Sheet:Column PageName << Input from Datasheet Object assertElementTextByLabel %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Text adjacent to provided label element Equals [<Data>]\", input =InputType.YES) public void assertElementTextByLabel() { cc.Element = findInputElementByLabelTextByXpath(); new Text(cc).assertElementTextEquals(); } Internally uses Galen Specs Language to check that element text is Adjacent to provided label or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"Element Text Assertions"},{"location":"webActions/elementTextAssertions/#element-text-assertions","text":"","title":"Element Text Assertions"},{"location":"webActions/elementTextAssertions/#asserttextpresentinpage","text":"Description : This function will search for the expected text within the html tag of the page and assert the same Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Browser assertTextPresentInPage @value PageName << Hardcoded Input Browser assertTextPresentInPage Sheet:Column PageName << Input from Datasheet Browser assertTextPresentInPage %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if text: [<Data>] is present on the page\", input = InputType.YES) public void assertTextPresentInPage() throws RuntimeException { try { String strObj = Data; if (Driver.findElement(By.tagName(\"html\")).getText().contains(strObj)) { System.out.println(\"assertTextPresent passed\"); Report.updateTestLog(\"assertTextPresentInPage\", \"Expected text '\" + strObj + \"' is present in the page\", Status.PASS); } else { System.out.println(\"assertTextPresentInPage failed\"); throw new Exception(\"Expected text '\" + strObj + \"' is not present in the page\"); } } catch (Exception e) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e); throw new ForcedException(\"assertTextPresentInPage\", e.getMessage()); } }","title":"assertTextPresentInPage"},{"location":"webActions/elementTextAssertions/#assertelementtextequals","text":"Description : This function will validate if a specified element text is equal to the user-provided text. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextEquals @value PageName << Hardcoded Input Object assertElementTextEquals Sheet:Column PageName << Input from Datasheet Object assertElementTextEquals %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text Equals [<Data>]\",input = InputType.YES) public void assertElementTextEquals() { assertElementText(Type.IS); } Internally uses Galen Specs Language to check that element text is Equal or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertElementTextEquals"},{"location":"webActions/elementTextAssertions/#assertelementtextcontains","text":"Description : This function will check if an element text contains the expected text. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextContains @value PageName << Hardcoded Input Object assertElementTextContains Sheet:Column PageName << Input from Datasheet Object assertElementTextContains %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Assert if [<Object>]'s Text Contains [<Data>]\",input = InputType.YES) public void assertElementTextContains() { assertElementText(Type.CONTAINS); } Internally uses Galen Specs Language to check that element text is Contains or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertElementTextContains"},{"location":"webActions/elementTextAssertions/#assertelementtextstartswith","text":"Description : This function will validate if specified element text starts with user provided data. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextStartsWith @value PageName << Hardcoded Input Object assertElementTextStartsWith Sheet:Column PageName << Input from Datasheet Object assertElementTextStartsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text StartsWith [<Data>]\",input = InputType.YES) public void assertElementTextStartsWith() { assertElementText(Type.STARTS); } Internally uses Galen Specs Language to check that element text is Start With or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertElementTextStartsWith"},{"location":"webActions/elementTextAssertions/#assertelementtextendswith","text":"Description : This function will validate if the specified element text ends with user-provided data. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextEndsWith @value PageName << Hardcoded Input Object assertElementTextEndsWith Sheet:Column PageName << Input from Datasheet Object assertElementTextEndsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text EndsWith [<Data>]\",input = InputType.YES) public void assertElementTextEndsWith() { assertElementText(Type.ENDS); } Internally uses Galen Specs Language to check that element text is Ends With or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertElementTextEndsWith"},{"location":"webActions/elementTextAssertions/#assertelementtextmatches","text":"Description : This function will validate if a specified element text matches with the user-provided data. You can also use regular expression in the Input field . Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextMatches @value PageName << Hardcoded Input Object assertElementTextMatches Sheet:Column PageName << Input from Datasheet Object assertElementTextMatches %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text Matches [<Data>]\",input = InputType.YES) public void assertElementTextMatches() { assertElementText(Type.MATCHES); } Internally uses Galen Specs Language to check that element text is Matches or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertElementTextMatches"},{"location":"webActions/elementTextAssertions/#assertelementtextiequals","text":"Description : This function will validate if a specified element text is equal to the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextIEquals @value PageName << Hardcoded Input Object assertElementTextIEquals Sheet:Column PageName << Input from Datasheet Object assertElementTextIEquals %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text Equals [Ignorecase] [<Data>]\",input = InputType.YES) public void assertElementTextIEquals() { assertElementTextI(Type.IS); } Internally uses Galen Specs Language to check that element text is Equals or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertElementTextIEquals"},{"location":"webActions/elementTextAssertions/#assertelementtexticontains","text":"Description : This function will validate if a specified element text contains the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextIContains @value PageName << Hardcoded Input Object assertElementTextIContains Sheet:Column PageName << Input from Datasheet Object assertElementTextIContains %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text Contains [Ignorecase] [<Data>]\",input = InputType.YES) public void assertElementTextIContains() { assertElementTextI(Type.CONTAINS); } Internally uses Galen Specs Language to check that element text is Contains or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertElementTextIContains"},{"location":"webActions/elementTextAssertions/#assertelementtextistartswith","text":"Description : This function will validate if a specified element text begins with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextIStartsWith @value PageName << Hardcoded Input Object assertElementTextIStartsWith Sheet:Column PageName << Input from Datasheet Object assertElementTextIStartsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text StartsWith [Ignorecase] [<Data>]\",input = InputType.YES) public void assertElementTextIStartsWith() { assertElementTextI(Type.STARTS); } Internally uses Galen Specs Language to check that element text is Starts With or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertElementTextIStartsWith"},{"location":"webActions/elementTextAssertions/#assertelementtextiendswith","text":"Description : This function will validate if a specified element text ends with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object assertElementTextIEndsWith @value PageName << Hardcoded Input Object assertElementTextIEndsWith Sheet:Column PageName << Input from Datasheet Object assertElementTextIEndsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM,desc = \"Assert if [<Object>]'s Text EndsWith [Ignorecase] [<Data>]\",input = InputType.YES) public void assertElementTextIEndsWith() { assertElementTextI(Type.ENDS); } Internally uses Galen Specs Language to check that element text is Ends With or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertElementTextIEndsWith"},{"location":"webActions/elementTextAssertions/#assertelementtextcontainsbylabel","text":"Description : This function will check if the text of the input element adjacent to provided label element contains the given text(in the Input Column) Input Format : @Expected Text. Usage: ObjectName Action Input Condition Reference Object assertElementTextContainsByLabel @value PageName << Hardcoded Input Object assertElementTextContainsByLabel Sheet:Column PageName << Input from Datasheet Object assertElementTextContainsByLabel %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Text adjacent to provided label element Contains [<Data>]\", input =InputType.YES) public void assertElementTextContainsByLabel() { cc.Element = findInputElementByLabelTextByXpath(); new Text(cc).assertElementTextContains(); } Internally uses Galen Specs Language to check that element text is Adjacent to provided label or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertElementTextContainsByLabel"},{"location":"webActions/elementTextAssertions/#assertelementtextbylabel","text":"Description : This function will check if the text of the input element adjacent to provided label element equals the given text(in the Input Column) Usage: ObjectName Action Input Condition Reference Object assertElementTextByLabel @value PageName << Hardcoded Input Object assertElementTextByLabel Sheet:Column PageName << Input from Datasheet Object assertElementTextByLabel %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Assert if [<Object>]'s Text adjacent to provided label element Equals [<Data>]\", input =InputType.YES) public void assertElementTextByLabel() { cc.Element = findInputElementByLabelTextByXpath(); new Text(cc).assertElementTextEquals(); } Internally uses Galen Specs Language to check that element text is Adjacent to provided label or not to the given text. As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertElementTextByLabel"},{"location":"webActions/frames_windows/","text":"Frames and Browser Windows waitForFrameAndSwitch Description : This function will wait for the frame to be available and switch to it. Details : See here switchToFrameByIndex Description : This function is used for switching control to a frame by the frame index . Input Format : @Frame index . Typically, in an HTML, frame indices start with 0. Usage: ObjectName Action Input Condition Reference Browser switchToFrameByIndex @value << Hardcoded Input Browser switchToFrameByIndex Sheet:Column << Input from Datasheet Browser switchToFrameByIndex %dynamicVar% << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Internally uses the following Selenium logic for Frame Element : Driver.switchTo().frame(frameIndex) switchToFrame Description : This function is used for switching control to a frame by the frame name or id . Input Format : @Frame name or id Usage: ObjectName Action Input Condition Reference Browser switchToFrame @value << Hardcoded Input Browser switchToFrame Sheet:Column << Input from Datasheet Browser switchToFrame %dynamicVar% << Input from variable Internally uses the following Selenium logic for Frame Element : Driver.switchTo().frame(strTargetFrame); //strTargetFrame is the `name` or `id` switchToWindowByIndex Description : This function is used for switching control to a window by given index. Input Format : @WindowIndex Usage: ObjectName Action Input Condition Reference Browser switchToWindowByIndex @value << Hardcoded Input Browser switchToWindowByIndex Sheet:Column << Input from Datasheet Browser switchToWindowByIndex %dynamicVar% << Input from variable Internally uses the following Selenium logic for Frame Element : int wndIndex = Integer.parseInt(Data); Set<String> handles = Driver.getWindowHandles(); if (handles.size() > wndIndex) { String handle = handles.toArray()[wndIndex].toString(); Driver.switchTo().window(handle); } switchToWindowByTitle Description : This function is used for switching control to a Browser Window/Tab by given title. Input Format : @WindowTitle Usage: ObjectName Action Input Condition Reference Browser switchToWindowByTitle @value << Hardcoded Input Browser switchToWindowByTitle Sheet:Column << Input from Datasheet Browser switchToWindowByTitle %dynamicVar% << Input from variable Internally uses the following Selenium logic : Loops through all open Windows and switches to the one where : Driver.getTitle().trim().equals(Data); switchToWindowByTitleStartsWith Description : This function is used for switching control to another window whose title begins with the provided data. Input Format : @Starting part of the title Usage: ObjectName Action Input Condition Reference Browser switchToWindowByTitleStartsWith @value << Hardcoded Input Browser switchToWindowByTitleStartsWith Sheet:Column << Input from Datasheet Browser switchToWindowByTitleStartsWith %dynamicVar% << Input from variable Internally uses the following Selenium logic : Loops through all open Windows and switches to the one where : Driver.getTitle().trim().startsWith(Data); switchToWindowByTitleContains Description : This function is used for switching control to another window whose title contains the provided data. Input Format : @Partial Text in the Title Usage: ObjectName Action Input Condition Reference Browser switchToWindowByTitleContains @value << Hardcoded Input Browser switchToWindowByTitleContains Sheet:Column << Input from Datasheet Browser switchToWindowByTitleContains %dynamicVar% << Input from variable Internally uses the following Selenium logic : Loops through all open Windows and switches to the one where : Driver.getTitle().trim().contains(Data); switchToWindowByTitleEndsWith Description : This function is used for switching control to another window whose title ends with the provided data Input Format : @Ending part of the title Usage: ObjectName Action Input Condition Reference Browser switchToWindowByTitleEndsWith @value << Hardcoded Input Browser switchToWindowByTitleEndsWith Sheet:Column << Input from Datasheet Browser switchToWindowByTitleEndsWith %dynamicVar% << Input from variable Internally uses the following Selenium logic : Loops through all open Windows and switches to the one where : Driver.getTitle().trim().endsWith(Data); switchToWindowByTitleMatches Description : This function is used for switching control to another window whose title matches with the provided data (can use regex also). Input Format : @Expected text ObjectName Action Input Condition Reference Browser switchToWindowByTitleEndsWith @value << Hardcoded Input Browser switchToWindowByTitleEndsWith Sheet:Column << Input from Datasheet Browser switchToWindowByTitleEndsWith %dynamicVar% << Input from variable Internally uses the following Selenium logic : Loops through all open Windows and switches to the one where : Driver.getTitle().trim().matches(Data); switchToDefaultContent Description : This function is used for switching control to the default window. Usage: ObjectName Action Input Condition Reference Browser switchToDefaultContent Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"Switching control to the default window\") public void switchToDefaultContent() { try { Driver.switchTo().defaultContent(); Report.updateTestLog(Action,\"Webdriver switched to default content\", Status.DONE); } catch (Exception e) { Report.updateTestLog(Action, e.getMessage(),Status.DEBUG); Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e); } } createAndSwitchToWindow Description : This function is used to create a new window and then for switching control to the newly created window. Input Format : @ Url to open after creating a new window. If this input column is empty then empty url will be loaded Usage: 1 ObjectName Action Input Condition Reference Browser createAndSwitchToWindow 2 ObjectName Action Input Condition Reference Browser createAndSwitchToWindow @value << Hardcoded Input Browser createAndSwitchToWindow Sheet:Column << Input from Datasheet Browser createAndSwitchToWindow %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"Open a new Browser window\", input =InputType.OPTIONAL) public void createAndSwitchToWindow() { try { JavascriptExecutor js = (JavascriptExecutor) Driver; js.executeScript(\"window.open(arguments[0])\", Data); Set<String> Handles = Driver.getWindowHandles(); Driver.switchTo().window((String) Handles.toArray()[Handles.size() - 1]); Report.updateTestLog(Action, \"New Window Created and Switched to that \", Status.DONE); } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error in Switching Window -\" + ex.getMessage(), Status.DEBUG); } } closeAndSwitchToWindow Description : This function will close the current window and switch back to the default window. Usage: ObjectName Action Input Condition Reference Browser closeAndSwitchToWindow Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"Close the current window and switch to default window\") public void closeAndSwitchToWindow() { try { Driver.close(); Driver.switchTo().window((String) Driver.getWindowHandles().toArray()[0]); Report.updateTestLog(Action, \"Current Window Closed and Switched to Default window \", Status.DONE); } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error in Switching Window -\" + ex.getMessage(), Status.FAIL); } }","title":"Frames and Browser Windows"},{"location":"webActions/frames_windows/#frames-and-browser-windows","text":"","title":"Frames and Browser Windows"},{"location":"webActions/frames_windows/#waitforframeandswitch","text":"Description : This function will wait for the frame to be available and switch to it. Details : See here","title":"waitForFrameAndSwitch"},{"location":"webActions/frames_windows/#switchtoframebyindex","text":"Description : This function is used for switching control to a frame by the frame index . Input Format : @Frame index . Typically, in an HTML, frame indices start with 0. Usage: ObjectName Action Input Condition Reference Browser switchToFrameByIndex @value << Hardcoded Input Browser switchToFrameByIndex Sheet:Column << Input from Datasheet Browser switchToFrameByIndex %dynamicVar% << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Internally uses the following Selenium logic for Frame Element : Driver.switchTo().frame(frameIndex)","title":"switchToFrameByIndex"},{"location":"webActions/frames_windows/#switchtoframe","text":"Description : This function is used for switching control to a frame by the frame name or id . Input Format : @Frame name or id Usage: ObjectName Action Input Condition Reference Browser switchToFrame @value << Hardcoded Input Browser switchToFrame Sheet:Column << Input from Datasheet Browser switchToFrame %dynamicVar% << Input from variable Internally uses the following Selenium logic for Frame Element : Driver.switchTo().frame(strTargetFrame); //strTargetFrame is the `name` or `id`","title":"switchToFrame"},{"location":"webActions/frames_windows/#switchtowindowbyindex","text":"Description : This function is used for switching control to a window by given index. Input Format : @WindowIndex Usage: ObjectName Action Input Condition Reference Browser switchToWindowByIndex @value << Hardcoded Input Browser switchToWindowByIndex Sheet:Column << Input from Datasheet Browser switchToWindowByIndex %dynamicVar% << Input from variable Internally uses the following Selenium logic for Frame Element : int wndIndex = Integer.parseInt(Data); Set<String> handles = Driver.getWindowHandles(); if (handles.size() > wndIndex) { String handle = handles.toArray()[wndIndex].toString(); Driver.switchTo().window(handle); }","title":"switchToWindowByIndex"},{"location":"webActions/frames_windows/#switchtowindowbytitle","text":"Description : This function is used for switching control to a Browser Window/Tab by given title. Input Format : @WindowTitle Usage: ObjectName Action Input Condition Reference Browser switchToWindowByTitle @value << Hardcoded Input Browser switchToWindowByTitle Sheet:Column << Input from Datasheet Browser switchToWindowByTitle %dynamicVar% << Input from variable Internally uses the following Selenium logic : Loops through all open Windows and switches to the one where : Driver.getTitle().trim().equals(Data);","title":"switchToWindowByTitle"},{"location":"webActions/frames_windows/#switchtowindowbytitlestartswith","text":"Description : This function is used for switching control to another window whose title begins with the provided data. Input Format : @Starting part of the title Usage: ObjectName Action Input Condition Reference Browser switchToWindowByTitleStartsWith @value << Hardcoded Input Browser switchToWindowByTitleStartsWith Sheet:Column << Input from Datasheet Browser switchToWindowByTitleStartsWith %dynamicVar% << Input from variable Internally uses the following Selenium logic : Loops through all open Windows and switches to the one where : Driver.getTitle().trim().startsWith(Data);","title":"switchToWindowByTitleStartsWith"},{"location":"webActions/frames_windows/#switchtowindowbytitlecontains","text":"Description : This function is used for switching control to another window whose title contains the provided data. Input Format : @Partial Text in the Title Usage: ObjectName Action Input Condition Reference Browser switchToWindowByTitleContains @value << Hardcoded Input Browser switchToWindowByTitleContains Sheet:Column << Input from Datasheet Browser switchToWindowByTitleContains %dynamicVar% << Input from variable Internally uses the following Selenium logic : Loops through all open Windows and switches to the one where : Driver.getTitle().trim().contains(Data);","title":"switchToWindowByTitleContains"},{"location":"webActions/frames_windows/#switchtowindowbytitleendswith","text":"Description : This function is used for switching control to another window whose title ends with the provided data Input Format : @Ending part of the title Usage: ObjectName Action Input Condition Reference Browser switchToWindowByTitleEndsWith @value << Hardcoded Input Browser switchToWindowByTitleEndsWith Sheet:Column << Input from Datasheet Browser switchToWindowByTitleEndsWith %dynamicVar% << Input from variable Internally uses the following Selenium logic : Loops through all open Windows and switches to the one where : Driver.getTitle().trim().endsWith(Data);","title":"switchToWindowByTitleEndsWith"},{"location":"webActions/frames_windows/#switchtowindowbytitlematches","text":"Description : This function is used for switching control to another window whose title matches with the provided data (can use regex also). Input Format : @Expected text ObjectName Action Input Condition Reference Browser switchToWindowByTitleEndsWith @value << Hardcoded Input Browser switchToWindowByTitleEndsWith Sheet:Column << Input from Datasheet Browser switchToWindowByTitleEndsWith %dynamicVar% << Input from variable Internally uses the following Selenium logic : Loops through all open Windows and switches to the one where : Driver.getTitle().trim().matches(Data);","title":"switchToWindowByTitleMatches"},{"location":"webActions/frames_windows/#switchtodefaultcontent","text":"Description : This function is used for switching control to the default window. Usage: ObjectName Action Input Condition Reference Browser switchToDefaultContent Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"Switching control to the default window\") public void switchToDefaultContent() { try { Driver.switchTo().defaultContent(); Report.updateTestLog(Action,\"Webdriver switched to default content\", Status.DONE); } catch (Exception e) { Report.updateTestLog(Action, e.getMessage(),Status.DEBUG); Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e); } }","title":"switchToDefaultContent"},{"location":"webActions/frames_windows/#createandswitchtowindow","text":"Description : This function is used to create a new window and then for switching control to the newly created window. Input Format : @ Url to open after creating a new window. If this input column is empty then empty url will be loaded Usage: 1 ObjectName Action Input Condition Reference Browser createAndSwitchToWindow 2 ObjectName Action Input Condition Reference Browser createAndSwitchToWindow @value << Hardcoded Input Browser createAndSwitchToWindow Sheet:Column << Input from Datasheet Browser createAndSwitchToWindow %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"Open a new Browser window\", input =InputType.OPTIONAL) public void createAndSwitchToWindow() { try { JavascriptExecutor js = (JavascriptExecutor) Driver; js.executeScript(\"window.open(arguments[0])\", Data); Set<String> Handles = Driver.getWindowHandles(); Driver.switchTo().window((String) Handles.toArray()[Handles.size() - 1]); Report.updateTestLog(Action, \"New Window Created and Switched to that \", Status.DONE); } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error in Switching Window -\" + ex.getMessage(), Status.DEBUG); } }","title":"createAndSwitchToWindow"},{"location":"webActions/frames_windows/#closeandswitchtowindow","text":"Description : This function will close the current window and switch back to the default window. Usage: ObjectName Action Input Condition Reference Browser closeAndSwitchToWindow Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"Close the current window and switch to default window\") public void closeAndSwitchToWindow() { try { Driver.close(); Driver.switchTo().window((String) Driver.getWindowHandles().toArray()[0]); Report.updateTestLog(Action, \"Current Window Closed and Switched to Default window \", Status.DONE); } catch (Exception ex) { Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex); Report.updateTestLog(Action, \"Error in Switching Window -\" + ex.getMessage(), Status.FAIL); } }","title":"closeAndSwitchToWindow"},{"location":"webActions/jscommands/","text":"JS Commands setByJS Check here more details clickByJS Check here more details clearByJS Description : This function will use JavaScript to clear an objects text content (useful when selenium functions do not work). Usage: ObjectName Action Input Condition Reference Object clearByJS PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Clear the element [<Object>]\") public void clearByJS() { if (elementPresent()) { try { JavascriptExecutor js = (JavascriptExecutor) Driver; js.executeScript(\"arguments[0].value=''\", Element); Report.updateTestLog(Action, \"Cleared value from '\" + ObjectName + \"'\", Status.DONE); } catch (Exception ex) { Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex); Report.updateTestLog(Action,\"Couldn't clear value on \" + ObjectName + \" - Exception \" + ex.getMessage(), Status.FAIL); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, ObjectName); } } selectByJS Description : This function is used to select a given option from a drop down and is useful when selenium functions do not work. Usage: ObjectName Action Input Condition Reference Object selectByJS @value PageName << Hardcoded Input Object selectByJS Sheet:Column PageName << Input from Datasheet Object selectByJS %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select element [<Object>] \", input = InputType.YES) public void selectByJS() { if (elementPresent()) { try { JavascriptExecutor js = (JavascriptExecutor) Driver; Object value = js.executeScript( \"var options=arguments[0].getElementsByTagName('option');\" + \"for(var i=0;i<options.length;i++)\" + \"{\" + \"var value=options[i].textContent?options[i].textContent:options[i].innerText;\" + \"if(value.trim()==='\" + Data.trim() + \"')\" + \"{\" + \"options[i].setAttribute('selected','selected');\" + \"return true;\" + \"}\" + \"}\" + \"return false;\", Element); if (value != null && value.toString().trim().toLowerCase().equals(\"true\")) { Report.updateTestLog(Action, \"Item \" + Data + \" is selected from\" + ObjectName, Status.DONE); } else { Report.updateTestLog(Action, \"Item \" + Data + \" is not available in the\" + ObjectName, Status.FAIL); } } catch (Exception ex) { Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex); Report.updateTestLog(Action,\"Couldn't select value from \" + ObjectName + \" - Exception \" + ex.getMessage(), Status.FAIL); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, ObjectName); } } assertInsideBounds Description : To function uses Javascript to check if the given object is inside the boundary. Usage: ObjectName Action Input Condition Reference Object assertInsideBounds PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"To check if [<Object>] is inside the boundary \") public void assertInsideBounds() { if (elementPresent()) { JavascriptExecutor js = (JavascriptExecutor) Driver; Object value = js.executeScript(\"\" + \"return isOutside(arguments[0]);\" + \"function isOutside(x){\" + \" return x.scrollWidth <= x.offsetWidth;\" + \"}\", Element); if (value != null && Boolean.valueOf(value.toString())) { Report.updateTestLog(Action, \"Element \" + ObjectName + \" is inside bounds\", Status.PASS); } else { Report.updateTestLog(Action, \"Element \" + ObjectName + \" is outside bounds\", Status.FAIL); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, ObjectName); } } executeEval Description : This function is used to execute the JavaScript commands Input Format : @ Javascript Usage: ObjectName Action Input Condition Reference Object executeEval @value << Hardcoded Input Object executeEval Sheet:Column << Input from Datasheet Object executeEval %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.ANY, desc = \"To execute the JavaScript commands\", input = InputType.YES) public void executeEval() { try { JavascriptExecutor js = (JavascriptExecutor) Driver; if (Element != null) { js.executeScript(Data, Element); } else { js.executeScript(Data); } Report.updateTestLog(Action, \"Javascript executed\", Status.DONE); } catch (Exception ex) { Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex); Report.updateTestLog(Action, \"Javascript execution failed\", Status.DEBUG); } } storeEval Description : Function to store a return value of a Javascript command, in a variable. For example if you have a variable as 'a' and 'b' and want to add them and store the sum in a variable, you can follow the following syntax. ObjectName Action Input Condition Reference Object storeEval @ var a=20;var b=30;return c=a+b; Now the value 50 (a+b), will be stored in var. Input Format : @ Javascript Usage: ObjectName Action Input Condition Reference Object storeEval @value %var% << Hardcoded Input Object storeEval Sheet:Column %var% << Input from Datasheet Object storeEval %dynamicVar% %var% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Store the result of Javascript expression value in a variable\", input = InputType.YES, condition = InputType.YES) public void storeEval() { String javaScript = Data; String variableName = Condition; if (variableName.matches(\"%.*%\")) { JavascriptExecutor js = (JavascriptExecutor) Driver; addVar(variableName, js.executeScript(javaScript).toString()); Report.updateTestLog(Action, \"Eval Stored\", Status.DONE); } else { Report.updateTestLog(Action, \"Variable format is not correct\", Status.FAIL); } }","title":"JS Commands"},{"location":"webActions/jscommands/#js-commands","text":"","title":"JS Commands"},{"location":"webActions/jscommands/#setbyjs","text":"Check here more details","title":"setByJS"},{"location":"webActions/jscommands/#clickbyjs","text":"Check here more details","title":"clickByJS"},{"location":"webActions/jscommands/#clearbyjs","text":"Description : This function will use JavaScript to clear an objects text content (useful when selenium functions do not work). Usage: ObjectName Action Input Condition Reference Object clearByJS PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Clear the element [<Object>]\") public void clearByJS() { if (elementPresent()) { try { JavascriptExecutor js = (JavascriptExecutor) Driver; js.executeScript(\"arguments[0].value=''\", Element); Report.updateTestLog(Action, \"Cleared value from '\" + ObjectName + \"'\", Status.DONE); } catch (Exception ex) { Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex); Report.updateTestLog(Action,\"Couldn't clear value on \" + ObjectName + \" - Exception \" + ex.getMessage(), Status.FAIL); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, ObjectName); } }","title":"clearByJS"},{"location":"webActions/jscommands/#selectbyjs","text":"Description : This function is used to select a given option from a drop down and is useful when selenium functions do not work. Usage: ObjectName Action Input Condition Reference Object selectByJS @value PageName << Hardcoded Input Object selectByJS Sheet:Column PageName << Input from Datasheet Object selectByJS %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Select element [<Object>] \", input = InputType.YES) public void selectByJS() { if (elementPresent()) { try { JavascriptExecutor js = (JavascriptExecutor) Driver; Object value = js.executeScript( \"var options=arguments[0].getElementsByTagName('option');\" + \"for(var i=0;i<options.length;i++)\" + \"{\" + \"var value=options[i].textContent?options[i].textContent:options[i].innerText;\" + \"if(value.trim()==='\" + Data.trim() + \"')\" + \"{\" + \"options[i].setAttribute('selected','selected');\" + \"return true;\" + \"}\" + \"}\" + \"return false;\", Element); if (value != null && value.toString().trim().toLowerCase().equals(\"true\")) { Report.updateTestLog(Action, \"Item \" + Data + \" is selected from\" + ObjectName, Status.DONE); } else { Report.updateTestLog(Action, \"Item \" + Data + \" is not available in the\" + ObjectName, Status.FAIL); } } catch (Exception ex) { Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex); Report.updateTestLog(Action,\"Couldn't select value from \" + ObjectName + \" - Exception \" + ex.getMessage(), Status.FAIL); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, ObjectName); } }","title":"selectByJS"},{"location":"webActions/jscommands/#assertinsidebounds","text":"Description : To function uses Javascript to check if the given object is inside the boundary. Usage: ObjectName Action Input Condition Reference Object assertInsideBounds PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"To check if [<Object>] is inside the boundary \") public void assertInsideBounds() { if (elementPresent()) { JavascriptExecutor js = (JavascriptExecutor) Driver; Object value = js.executeScript(\"\" + \"return isOutside(arguments[0]);\" + \"function isOutside(x){\" + \" return x.scrollWidth <= x.offsetWidth;\" + \"}\", Element); if (value != null && Boolean.valueOf(value.toString())) { Report.updateTestLog(Action, \"Element \" + ObjectName + \" is inside bounds\", Status.PASS); } else { Report.updateTestLog(Action, \"Element \" + ObjectName + \" is outside bounds\", Status.FAIL); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, ObjectName); } }","title":"assertInsideBounds"},{"location":"webActions/jscommands/#executeeval","text":"Description : This function is used to execute the JavaScript commands Input Format : @ Javascript Usage: ObjectName Action Input Condition Reference Object executeEval @value << Hardcoded Input Object executeEval Sheet:Column << Input from Datasheet Object executeEval %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.ANY, desc = \"To execute the JavaScript commands\", input = InputType.YES) public void executeEval() { try { JavascriptExecutor js = (JavascriptExecutor) Driver; if (Element != null) { js.executeScript(Data, Element); } else { js.executeScript(Data); } Report.updateTestLog(Action, \"Javascript executed\", Status.DONE); } catch (Exception ex) { Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex); Report.updateTestLog(Action, \"Javascript execution failed\", Status.DEBUG); } }","title":"executeEval"},{"location":"webActions/jscommands/#storeeval","text":"Description : Function to store a return value of a Javascript command, in a variable. For example if you have a variable as 'a' and 'b' and want to add them and store the sum in a variable, you can follow the following syntax. ObjectName Action Input Condition Reference Object storeEval @ var a=20;var b=30;return c=a+b; Now the value 50 (a+b), will be stored in var. Input Format : @ Javascript Usage: ObjectName Action Input Condition Reference Object storeEval @value %var% << Hardcoded Input Object storeEval Sheet:Column %var% << Input from Datasheet Object storeEval %dynamicVar% %var% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Store the result of Javascript expression value in a variable\", input = InputType.YES, condition = InputType.YES) public void storeEval() { String javaScript = Data; String variableName = Condition; if (variableName.matches(\"%.*%\")) { JavascriptExecutor js = (JavascriptExecutor) Driver; addVar(variableName, js.executeScript(javaScript).toString()); Report.updateTestLog(Action, \"Eval Stored\", Status.DONE); } else { Report.updateTestLog(Action, \"Variable format is not correct\", Status.FAIL); } }","title":"storeEval"},{"location":"webActions/scrollassertions/","text":"Scroll Assertions assertHScrollBarPresent Description : This function will check if horizontal scrollbar is present. Usage: ObjectName Action Input Condition Reference Object assertHScrollBarPresent PageName Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if the Horizontal Scrollbar is present\") public void assertHScrollBarPresent() { assertHScorllBar(isHScrollBarPresent()); } Internally uses the following Javascript logic : Checks whether the scroll bar is present ( see code below ),then using the derived Boolean result in the above method: document.documentElement.scrollWidth>document.documentElement.clientWidth assertHScrollBarNotPresent Description : This function will check if horizontal scrollbar is not present. Usage: ObjectName Action Input Condition Reference Object assertHScrollBarNotPresent PageName Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if the Horizontal Scrollbar is not present\") public void assertHScrollBarNotPresent() { assertHScorllBar(isHScrollBarPresent()); } Internally uses the following Javascript logic : Checks whether the scroll bar is present ( see code below ),then uses the derived Boolean result in the above method: document.documentElement.scrollWidth>document.documentElement.clientWidth assertVScrollBarPresent Description : This function will check if vertical scrollbar is present. Usage: ObjectName Action Input Condition Reference Object assertVScrollBarPresent PageName Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if the Vertical Scrollbar is present\") public void assertVScrollBarPresent() { assertVScorllBar(isvScrollBarPresent()); } Internally uses the following Javascript logic : Checks whether the scroll bar is present ( see code below ),then uses the derived Boolean result in the above method: document.documentElement.scrollHeight>document.documentElement.clientHeight assertVScrollBarNotPresent Description : This function will check if vertical scrollbar is not present. Usage: ObjectName Action Input Condition Reference Object assertVScrollBarNotPresent PageName Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if the Vertical Scrollbar is not present\") public void assertVScrollBarNotPresent() { assertVScorllBar(isvScrollBarPresent()); } Internally uses the following Javascript logic : Checks whether the scroll bar is present ( see code below ),then negates the derived Boolean result in the above method: document.documentElement.scrollHeight>document.documentElement.clientHeight","title":"Scroll Assertions"},{"location":"webActions/scrollassertions/#scroll-assertions","text":"","title":"Scroll Assertions"},{"location":"webActions/scrollassertions/#asserthscrollbarpresent","text":"Description : This function will check if horizontal scrollbar is present. Usage: ObjectName Action Input Condition Reference Object assertHScrollBarPresent PageName Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if the Horizontal Scrollbar is present\") public void assertHScrollBarPresent() { assertHScorllBar(isHScrollBarPresent()); } Internally uses the following Javascript logic : Checks whether the scroll bar is present ( see code below ),then using the derived Boolean result in the above method: document.documentElement.scrollWidth>document.documentElement.clientWidth","title":"assertHScrollBarPresent"},{"location":"webActions/scrollassertions/#asserthscrollbarnotpresent","text":"Description : This function will check if horizontal scrollbar is not present. Usage: ObjectName Action Input Condition Reference Object assertHScrollBarNotPresent PageName Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if the Horizontal Scrollbar is not present\") public void assertHScrollBarNotPresent() { assertHScorllBar(isHScrollBarPresent()); } Internally uses the following Javascript logic : Checks whether the scroll bar is present ( see code below ),then uses the derived Boolean result in the above method: document.documentElement.scrollWidth>document.documentElement.clientWidth","title":"assertHScrollBarNotPresent"},{"location":"webActions/scrollassertions/#assertvscrollbarpresent","text":"Description : This function will check if vertical scrollbar is present. Usage: ObjectName Action Input Condition Reference Object assertVScrollBarPresent PageName Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if the Vertical Scrollbar is present\") public void assertVScrollBarPresent() { assertVScorllBar(isvScrollBarPresent()); } Internally uses the following Javascript logic : Checks whether the scroll bar is present ( see code below ),then uses the derived Boolean result in the above method: document.documentElement.scrollHeight>document.documentElement.clientHeight","title":"assertVScrollBarPresent"},{"location":"webActions/scrollassertions/#assertvscrollbarnotpresent","text":"Description : This function will check if vertical scrollbar is not present. Usage: ObjectName Action Input Condition Reference Object assertVScrollBarNotPresent PageName Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Assert if the Vertical Scrollbar is not present\") public void assertVScrollBarNotPresent() { assertVScorllBar(isvScrollBarPresent()); } Internally uses the following Javascript logic : Checks whether the scroll bar is present ( see code below ),then negates the derived Boolean result in the above method: document.documentElement.scrollHeight>document.documentElement.clientHeight","title":"assertVScrollBarNotPresent"},{"location":"webActions/table/","text":"Table getCellValue Description : This function is used to get data from the desired cell of the web table and store it in a user-defined variable . Input Format : @RowNo;ColNo,%variableName% Usage: ObjectName Action Input Condition Reference Object getCellValue @value PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Get data from the desired cell of the web table and store it in a variable\", input = InputType.YES) public void getCellValue() { if (Element != null) { String strValue = Data; String[] userInput = strValue.split(\",\"); String tableDetails = userInput[0]; String variable = userInput[1]; String[] splitVal = tableDetails.split(\";\"); int RowNo = Integer.parseInt(splitVal[0]); int ColNo = Integer.parseInt(splitVal[1]); String vCellValue = null; List < WebElement > allRows = Element.findElements(By.tagName(\"tr\")); if (!allRows.isEmpty()) { List < WebElement > Cells = allRows.get(RowNo).findElements(By.tagName(\"td\")); List < WebElement > cellHdrs = allRows.get(RowNo).findElements(By.tagName(\"th\")); if (!Cells.isEmpty()) { vCellValue = Cells.get(ColNo).getText(); addVar(variable, vCellValue); Report.updateTestLog(\"getCellValue\",\"Table cell value \" + vCellValue + \" has been stored into \" + variable,Status.PASS); } else if (!cellHdrs.isEmpty()) { vCellValue = Cells.get(ColNo).getText(); Report.updateTestLog(\"getCellValue\",\"Table cell value \" + vCellValue +\" has been stored into \" + variable,Status.PASS); } else { Report.updateTestLog(\"getCellValue\",\"Table Column size is zero\", Status.FAIL); vCellValue = null; } } else { Report.updateTestLog(\"getCellValue\",\"Table Row size is zero\", Status.FAIL); vCellValue = null; } } else { Report.updateTestLog(\"getCellValue\", \"Object [\" + ObjectName + \"] not found\",Status.FAIL); } } getColCount Description : This function is used to count the number of columns in a desired row in a web table and store it in a user-defined variable. Input Format : @RowNo,%variableName% Usage: ObjectName Action Input Condition Reference Object getColCount @value PageName Corresponding Code: @Action(object = ObjectType.SELENIUM,desc =\"Count the number of columns in a row in a web table and store it in a variable\", input =InputType.YES) public void getColCount() { if (Element != null) { String inputData = Data; String[] userInput = inputData.split(\",\"); String vRowNo = userInput[0]; String variable = userInput[1]; int RowNo = Integer.parseInt(vRowNo); int intColCount = 0; List<WebElement> allRows = Element.findElements(By.tagName(\"tr\")); if (!allRows.isEmpty()) { List<WebElement> Cells = allRows.get(RowNo).findElements( By.tagName(\"td\")); List<WebElement> cellHdrs = allRows.get(RowNo).findElements(By.tagName(\"th\")); if (!Cells.isEmpty()) { intColCount = Cells.size(); addVar(variable, String.valueOf(intColCount)); Report.updateTestLog(\"getColCount\", \"Table row has '\"+ intColCount + \"' columns, stored in \" + variable,Status.PASS); } else if (!cellHdrs.isEmpty()) { intColCount = cellHdrs.size(); addVar(variable, String.valueOf(intColCount)); Report.updateTestLog(\"getColCount\", \"Table row has '\"+ intColCount + \"' columns, stored in \" + variable,Status.PASS); } else { intColCount = 0; Report.updateTestLog(\"getColCount\",\"Table Column size is zero\", Status.FAIL); } } else { Report.updateTestLog(\"getColCount\",\"Table column size is zero\", Status.FAIL); intColCount = 0; } } else { Report.updateTestLog(\"getColCount\", \"Object [\" + ObjectName + \"] not found\",Status.FAIL); } } getRowNumber Description : This function is used to get the row number of the desired data in a web table and store it in a user-defined variable. Input Format : @Expected Data,%variableName% Usage: ObjectName Action Input Condition Reference Object getRowNumber @value PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Get the number of the row having the desired data [<Data>] in a web table and store it in a variable\", input =InputType.YES) public void getRowNumber() { if (Element != null) { String userInput = Data; String[] input = userInput.split(\",\"); String CellValue = input[0]; String variable = input[1]; int rowCount = 0; int rtnValue = 0; List<WebElement> allRows = Element.findElements(By.tagName(\"tr\")); for (WebElement row : allRows) { List<WebElement> cells = row.findElements(By.tagName(\"td\")); List<WebElement> cellHdrs = row.findElements(By.tagName(\"th\")); if (!cells.isEmpty()) { for (WebElement col : cells) { if (col.getText().equals(CellValue.trim())) { rtnValue = rowCount; addVar(variable, String.valueOf(rtnValue)); Report.updateTestLog(\"getRowNumber\",\"Desired data is in'\" + rtnValue+ \"' row, stored in variable \"+ variable, Status.PASS); break; } } } else if (!cellHdrs.isEmpty()) { for (WebElement col : cellHdrs) { if (col.getText().equals(CellValue.trim())) { rtnValue = rowCount; addVar(variable, String.valueOf(rtnValue)); Report.updateTestLog(\"getRowNumber\",\"Desired data is in'\" + rtnValue+ \"' row, stored in variable \"+ variable, Status.PASS); break; } } } else { Report.updateTestLog(\"getRowNumber\", \"Table doesn't have the desired data \", Status.FAIL); } if (!(rtnValue == 0)) { break; } else { rowCount++; } } } else { Report.updateTestLog(\"getRowNumber\", \"Object [\" + ObjectName + \"] not found\",Status.FAIL); } } getColNumber Description : This function is used to get the column number of the desired data in a web table and store it in a user-defined variable. Input Format : @Expected Data,%variableName% Usage: ObjectName Action Input Condition Reference Object getColNumber @value PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Get the column number of the column having the [<Data>] in a web table and store it in a variable\", input =InputType.YES) public void getColNumber() { if (Element != null) { String userInput = Data; String[] input = userInput.split(\",\"); String CellValue = input[0]; String variable = input[1]; int colCount = 0; int rtnValue = 0; List<WebElement> allRows = Element.findElements(By.tagName(\"tr\")); for (WebElement row : allRows) { colCount = 0; List<WebElement> cells = row.findElements(By.tagName(\"td\")); List<WebElement> cellHdrs = row.findElements(By.tagName(\"th\")); if (!cells.isEmpty()) { for (WebElement col : cells) { if (col.getText().equals(CellValue.trim())) { rtnValue = colCount; addVar(variable, String.valueOf(rtnValue)); Report.updateTestLog(\"getColNumber\",\"Desired data is in'\" + rtnValue+ \"' column, stored in variable \"+ variable, Status.PASS); break; } colCount++; } } else if (!cellHdrs.isEmpty()) { for (WebElement col : cells) { if (col.getText().equals(CellValue.trim())) { rtnValue = colCount; addVar(variable, String.valueOf(rtnValue)); Report.updateTestLog(\"getColNumber\",\"Desired data is in'\" + rtnValue+ \"' column, stored in variable \" + variable, Status.PASS); break; } colCount++; } } else { Report.updateTestLog(\"getColNumber\",\"Table doesn't have the desired data \", Status.FAIL); } if (!(rtnValue == 0)) { break; } } } else { Report.updateTestLog(\"getColNumber\", \"Object [\" + ObjectName + \"] not found\",Status.FAIL); } } getRowCount Description : This function is used to count the number of rows in a web table and store it in a user-defined variable. Input Format : %variableName% Usage: ObjectName Action Input Condition Reference Object getRowCount @value PageName << Hardcoded Input Object getRowCount Sheet:Column PageName << Input from Datasheet Object getRowCount %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Count the number of rows in a web table and store it in variable\", input =InputType.YES) public void getRowCount() { if (Element != null) { int intRowCount = 0; String variable = Data; List<WebElement> allRows = Element.findElements(By.tagName(\"tr\")); if (!allRows.isEmpty()) { intRowCount = allRows.size(); addVar(variable, String.valueOf(intRowCount)); Report.updateTestLog(\"getRowCount\", \"Table has '\" + intRowCount+ \"' rows, stored in variable \" + variable, Status.PASS); } else { Report.updateTestLog(\"getRowCount\", \"Table Row size is zero\",Status.FAIL); } } else { Report.updateTestLog(\"getRowCount\", \"Object [\" + ObjectName + \"] not found\",Status.FAIL); } }","title":"Table"},{"location":"webActions/table/#table","text":"","title":"Table"},{"location":"webActions/table/#getcellvalue","text":"Description : This function is used to get data from the desired cell of the web table and store it in a user-defined variable . Input Format : @RowNo;ColNo,%variableName% Usage: ObjectName Action Input Condition Reference Object getCellValue @value PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Get data from the desired cell of the web table and store it in a variable\", input = InputType.YES) public void getCellValue() { if (Element != null) { String strValue = Data; String[] userInput = strValue.split(\",\"); String tableDetails = userInput[0]; String variable = userInput[1]; String[] splitVal = tableDetails.split(\";\"); int RowNo = Integer.parseInt(splitVal[0]); int ColNo = Integer.parseInt(splitVal[1]); String vCellValue = null; List < WebElement > allRows = Element.findElements(By.tagName(\"tr\")); if (!allRows.isEmpty()) { List < WebElement > Cells = allRows.get(RowNo).findElements(By.tagName(\"td\")); List < WebElement > cellHdrs = allRows.get(RowNo).findElements(By.tagName(\"th\")); if (!Cells.isEmpty()) { vCellValue = Cells.get(ColNo).getText(); addVar(variable, vCellValue); Report.updateTestLog(\"getCellValue\",\"Table cell value \" + vCellValue + \" has been stored into \" + variable,Status.PASS); } else if (!cellHdrs.isEmpty()) { vCellValue = Cells.get(ColNo).getText(); Report.updateTestLog(\"getCellValue\",\"Table cell value \" + vCellValue +\" has been stored into \" + variable,Status.PASS); } else { Report.updateTestLog(\"getCellValue\",\"Table Column size is zero\", Status.FAIL); vCellValue = null; } } else { Report.updateTestLog(\"getCellValue\",\"Table Row size is zero\", Status.FAIL); vCellValue = null; } } else { Report.updateTestLog(\"getCellValue\", \"Object [\" + ObjectName + \"] not found\",Status.FAIL); } }","title":"getCellValue"},{"location":"webActions/table/#getcolcount","text":"Description : This function is used to count the number of columns in a desired row in a web table and store it in a user-defined variable. Input Format : @RowNo,%variableName% Usage: ObjectName Action Input Condition Reference Object getColCount @value PageName Corresponding Code: @Action(object = ObjectType.SELENIUM,desc =\"Count the number of columns in a row in a web table and store it in a variable\", input =InputType.YES) public void getColCount() { if (Element != null) { String inputData = Data; String[] userInput = inputData.split(\",\"); String vRowNo = userInput[0]; String variable = userInput[1]; int RowNo = Integer.parseInt(vRowNo); int intColCount = 0; List<WebElement> allRows = Element.findElements(By.tagName(\"tr\")); if (!allRows.isEmpty()) { List<WebElement> Cells = allRows.get(RowNo).findElements( By.tagName(\"td\")); List<WebElement> cellHdrs = allRows.get(RowNo).findElements(By.tagName(\"th\")); if (!Cells.isEmpty()) { intColCount = Cells.size(); addVar(variable, String.valueOf(intColCount)); Report.updateTestLog(\"getColCount\", \"Table row has '\"+ intColCount + \"' columns, stored in \" + variable,Status.PASS); } else if (!cellHdrs.isEmpty()) { intColCount = cellHdrs.size(); addVar(variable, String.valueOf(intColCount)); Report.updateTestLog(\"getColCount\", \"Table row has '\"+ intColCount + \"' columns, stored in \" + variable,Status.PASS); } else { intColCount = 0; Report.updateTestLog(\"getColCount\",\"Table Column size is zero\", Status.FAIL); } } else { Report.updateTestLog(\"getColCount\",\"Table column size is zero\", Status.FAIL); intColCount = 0; } } else { Report.updateTestLog(\"getColCount\", \"Object [\" + ObjectName + \"] not found\",Status.FAIL); } }","title":"getColCount"},{"location":"webActions/table/#getrownumber","text":"Description : This function is used to get the row number of the desired data in a web table and store it in a user-defined variable. Input Format : @Expected Data,%variableName% Usage: ObjectName Action Input Condition Reference Object getRowNumber @value PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Get the number of the row having the desired data [<Data>] in a web table and store it in a variable\", input =InputType.YES) public void getRowNumber() { if (Element != null) { String userInput = Data; String[] input = userInput.split(\",\"); String CellValue = input[0]; String variable = input[1]; int rowCount = 0; int rtnValue = 0; List<WebElement> allRows = Element.findElements(By.tagName(\"tr\")); for (WebElement row : allRows) { List<WebElement> cells = row.findElements(By.tagName(\"td\")); List<WebElement> cellHdrs = row.findElements(By.tagName(\"th\")); if (!cells.isEmpty()) { for (WebElement col : cells) { if (col.getText().equals(CellValue.trim())) { rtnValue = rowCount; addVar(variable, String.valueOf(rtnValue)); Report.updateTestLog(\"getRowNumber\",\"Desired data is in'\" + rtnValue+ \"' row, stored in variable \"+ variable, Status.PASS); break; } } } else if (!cellHdrs.isEmpty()) { for (WebElement col : cellHdrs) { if (col.getText().equals(CellValue.trim())) { rtnValue = rowCount; addVar(variable, String.valueOf(rtnValue)); Report.updateTestLog(\"getRowNumber\",\"Desired data is in'\" + rtnValue+ \"' row, stored in variable \"+ variable, Status.PASS); break; } } } else { Report.updateTestLog(\"getRowNumber\", \"Table doesn't have the desired data \", Status.FAIL); } if (!(rtnValue == 0)) { break; } else { rowCount++; } } } else { Report.updateTestLog(\"getRowNumber\", \"Object [\" + ObjectName + \"] not found\",Status.FAIL); } }","title":"getRowNumber"},{"location":"webActions/table/#getcolnumber","text":"Description : This function is used to get the column number of the desired data in a web table and store it in a user-defined variable. Input Format : @Expected Data,%variableName% Usage: ObjectName Action Input Condition Reference Object getColNumber @value PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Get the column number of the column having the [<Data>] in a web table and store it in a variable\", input =InputType.YES) public void getColNumber() { if (Element != null) { String userInput = Data; String[] input = userInput.split(\",\"); String CellValue = input[0]; String variable = input[1]; int colCount = 0; int rtnValue = 0; List<WebElement> allRows = Element.findElements(By.tagName(\"tr\")); for (WebElement row : allRows) { colCount = 0; List<WebElement> cells = row.findElements(By.tagName(\"td\")); List<WebElement> cellHdrs = row.findElements(By.tagName(\"th\")); if (!cells.isEmpty()) { for (WebElement col : cells) { if (col.getText().equals(CellValue.trim())) { rtnValue = colCount; addVar(variable, String.valueOf(rtnValue)); Report.updateTestLog(\"getColNumber\",\"Desired data is in'\" + rtnValue+ \"' column, stored in variable \"+ variable, Status.PASS); break; } colCount++; } } else if (!cellHdrs.isEmpty()) { for (WebElement col : cells) { if (col.getText().equals(CellValue.trim())) { rtnValue = colCount; addVar(variable, String.valueOf(rtnValue)); Report.updateTestLog(\"getColNumber\",\"Desired data is in'\" + rtnValue+ \"' column, stored in variable \" + variable, Status.PASS); break; } colCount++; } } else { Report.updateTestLog(\"getColNumber\",\"Table doesn't have the desired data \", Status.FAIL); } if (!(rtnValue == 0)) { break; } } } else { Report.updateTestLog(\"getColNumber\", \"Object [\" + ObjectName + \"] not found\",Status.FAIL); } }","title":"getColNumber"},{"location":"webActions/table/#getrowcount","text":"Description : This function is used to count the number of rows in a web table and store it in a user-defined variable. Input Format : %variableName% Usage: ObjectName Action Input Condition Reference Object getRowCount @value PageName << Hardcoded Input Object getRowCount Sheet:Column PageName << Input from Datasheet Object getRowCount %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Count the number of rows in a web table and store it in variable\", input =InputType.YES) public void getRowCount() { if (Element != null) { int intRowCount = 0; String variable = Data; List<WebElement> allRows = Element.findElements(By.tagName(\"tr\")); if (!allRows.isEmpty()) { intRowCount = allRows.size(); addVar(variable, String.valueOf(intRowCount)); Report.updateTestLog(\"getRowCount\", \"Table has '\" + intRowCount+ \"' rows, stored in variable \" + variable, Status.PASS); } else { Report.updateTestLog(\"getRowCount\", \"Table Row size is zero\",Status.FAIL); } } else { Report.updateTestLog(\"getRowCount\", \"Object [\" + ObjectName + \"] not found\",Status.FAIL); } }","title":"getRowCount"},{"location":"webActions/titleassertions/","text":"Browser Title Assertions assertTitleEquals Description : This function will validate if the title of the current page is equals the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleEquals @value PageName << Hardcoded Input Object assertTitleEquals Sheet:Column PageName << Input from Datasheet Object assertTitleEquals %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title Equals [<Data>]\", input =InputType.YES) public void assertTitleEquals() { assertTitle(SpecText.Type.IS); } Internally uses Galen Specs Language to check that URL text is Equal or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertTitleContains Description : This function will validate if the title of the current page has the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleContains @value PageName << Hardcoded Input Object assertTitleContains Sheet:Column PageName << Input from Datasheet Object assertTitleContains %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title Contains [<Data>]\", input =InputType.YES) public void assertTitleContains() { assertTitle(SpecText.Type.CONTAINS); } Internally uses Galen Specs Language to check that URL text Contains or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text contains - checks element contains expected text assertTitleStartsWith Description : This function will validate if the title of the current page begins with the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleStartsWith @value PageName << Hardcoded Input Object assertTitleStartsWith Sheet:Column PageName << Input from Datasheet Object assertTitleStartsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title StartsWith [<Data>]\", input =InputType.YES) public void assertTitleStartsWith() { assertTitle(SpecText.Type.STARTS); } Internally uses Galen Specs Language to check that URL text StartsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text starts - element should start with expected text assertTitleEndsWith Description : This function will validate if the title of the current page ends with the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleEndsWith @value PageName << Hardcoded Input Object assertTitleEndsWith Sheet:Column PageName << Input from Datasheet Object assertTitleEndsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title EndsWith [<Data>]\", input =InputType.YES) public void assertTitleEndsWith() { assertTitle(SpecText.Type.ENDS); } Internally uses Galen Specs Language to check that URL text EndsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text ends - element should end with expected text assertTitleMatches Description : This function will validate if the title current page matches the user-provided data. You can also use regular expression in the Input field. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleMatches @value PageName << Hardcoded Input Object assertTitleMatches Sheet:Column PageName << Input from Datasheet Object assertTitleMatches %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title Matches [<Data>]\", input =InputType.YES) public void assertTitleMatches() { assertTitle(SpecText.Type.MATCHES); } Internally uses Galen Specs Language to check that URL text Matches or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text matches - verifies that text matches Java Regular Expression assertTitleIEquals Description : This function will validate if the title of the current page is equals the user-provided data. This function will ignore case of user provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleIEquals @value PageName << Hardcoded Input Object assertTitleIEquals Sheet:Column PageName << Input from Datasheet Object assertTitleIEquals %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title Equals [Ignorecase] [<Data>]\", input =InputType.YES) public void assertTitleIEquals() { assertTitleI(SpecText.Type.IS); } Internally uses Galen Specs Language to check that URL text is Equal or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected assertTitleIContains Description : This function will validate if the title of the current page contains the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleIContains @value PageName << Hardcoded Input Object assertTitleIContains Sheet:Column PageName << Input from Datasheet Object assertTitleIContains %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title Contains [Ignorecase] [<Data>]\", input =InputType.YES) public void assertTitleIContains() { assertTitleI(SpecText.Type.CONTAINS); } Internally uses Galen Specs Language to check that URL text Contains or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text contains - checks element contains expected text assertTitleIStartsWith Description : This function will validate if the current page title begins with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleIStartsWith @value PageName << Hardcoded Input Object assertTitleIStartsWith Sheet:Column PageName << Input from Datasheet Object assertTitleIStartsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title StartsWith [Ignorecase] [<Data>]\", input =InputType.YES) public void assertTitleIStartsWith() { assertTitleI(SpecText.Type.STARTS); } Internally uses Galen Specs Language to check that URL text StartsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text starts - element should start with expected text assertTitleIEndsWith Description : This function will validate if the title of the current page ends with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleIEndsWith @value PageName << Hardcoded Input Object assertTitleIEndsWith Sheet:Column PageName << Input from Datasheet Object assertTitleIEndsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title EndsWith [Ignorecase] [<Data>]\", input =InputType.YES) public void assertTitleIEndsWith() { assertTitleI(SpecText.Type.ENDS); } Internally uses Galen Specs Language to check that URL text EndsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text ends - element should end with expected text","title":"Browser Title Assertions"},{"location":"webActions/titleassertions/#browser-title-assertions","text":"","title":"Browser Title Assertions"},{"location":"webActions/titleassertions/#asserttitleequals","text":"Description : This function will validate if the title of the current page is equals the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleEquals @value PageName << Hardcoded Input Object assertTitleEquals Sheet:Column PageName << Input from Datasheet Object assertTitleEquals %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title Equals [<Data>]\", input =InputType.YES) public void assertTitleEquals() { assertTitle(SpecText.Type.IS); } Internally uses Galen Specs Language to check that URL text is Equal or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertTitleEquals"},{"location":"webActions/titleassertions/#asserttitlecontains","text":"Description : This function will validate if the title of the current page has the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleContains @value PageName << Hardcoded Input Object assertTitleContains Sheet:Column PageName << Input from Datasheet Object assertTitleContains %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title Contains [<Data>]\", input =InputType.YES) public void assertTitleContains() { assertTitle(SpecText.Type.CONTAINS); } Internally uses Galen Specs Language to check that URL text Contains or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text contains - checks element contains expected text","title":"assertTitleContains"},{"location":"webActions/titleassertions/#asserttitlestartswith","text":"Description : This function will validate if the title of the current page begins with the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleStartsWith @value PageName << Hardcoded Input Object assertTitleStartsWith Sheet:Column PageName << Input from Datasheet Object assertTitleStartsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title StartsWith [<Data>]\", input =InputType.YES) public void assertTitleStartsWith() { assertTitle(SpecText.Type.STARTS); } Internally uses Galen Specs Language to check that URL text StartsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text starts - element should start with expected text","title":"assertTitleStartsWith"},{"location":"webActions/titleassertions/#asserttitleendswith","text":"Description : This function will validate if the title of the current page ends with the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleEndsWith @value PageName << Hardcoded Input Object assertTitleEndsWith Sheet:Column PageName << Input from Datasheet Object assertTitleEndsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title EndsWith [<Data>]\", input =InputType.YES) public void assertTitleEndsWith() { assertTitle(SpecText.Type.ENDS); } Internally uses Galen Specs Language to check that URL text EndsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text ends - element should end with expected text","title":"assertTitleEndsWith"},{"location":"webActions/titleassertions/#asserttitlematches","text":"Description : This function will validate if the title current page matches the user-provided data. You can also use regular expression in the Input field. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleMatches @value PageName << Hardcoded Input Object assertTitleMatches Sheet:Column PageName << Input from Datasheet Object assertTitleMatches %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title Matches [<Data>]\", input =InputType.YES) public void assertTitleMatches() { assertTitle(SpecText.Type.MATCHES); } Internally uses Galen Specs Language to check that URL text Matches or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text matches - verifies that text matches Java Regular Expression","title":"assertTitleMatches"},{"location":"webActions/titleassertions/#asserttitleiequals","text":"Description : This function will validate if the title of the current page is equals the user-provided data. This function will ignore case of user provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleIEquals @value PageName << Hardcoded Input Object assertTitleIEquals Sheet:Column PageName << Input from Datasheet Object assertTitleIEquals %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title Equals [Ignorecase] [<Data>]\", input =InputType.YES) public void assertTitleIEquals() { assertTitleI(SpecText.Type.IS); } Internally uses Galen Specs Language to check that URL text is Equal or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text is - checks that text is exactly as expected","title":"assertTitleIEquals"},{"location":"webActions/titleassertions/#asserttitleicontains","text":"Description : This function will validate if the title of the current page contains the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleIContains @value PageName << Hardcoded Input Object assertTitleIContains Sheet:Column PageName << Input from Datasheet Object assertTitleIContains %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title Contains [Ignorecase] [<Data>]\", input =InputType.YES) public void assertTitleIContains() { assertTitleI(SpecText.Type.CONTAINS); } Internally uses Galen Specs Language to check that URL text Contains or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text contains - checks element contains expected text","title":"assertTitleIContains"},{"location":"webActions/titleassertions/#asserttitleistartswith","text":"Description : This function will validate if the current page title begins with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleIStartsWith @value PageName << Hardcoded Input Object assertTitleIStartsWith Sheet:Column PageName << Input from Datasheet Object assertTitleIStartsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title StartsWith [Ignorecase] [<Data>]\", input =InputType.YES) public void assertTitleIStartsWith() { assertTitleI(SpecText.Type.STARTS); } Internally uses Galen Specs Language to check that URL text StartsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text starts - element should start with expected text","title":"assertTitleIStartsWith"},{"location":"webActions/titleassertions/#asserttitleiendswith","text":"Description : This function will validate if the title of the current page ends with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected text Usage: ObjectName Action Input Condition Reference Object assertTitleIEndsWith @value PageName << Hardcoded Input Object assertTitleIEndsWith Sheet:Column PageName << Input from Datasheet Object assertTitleIEndsWith %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. @Action(object = ObjectType.BROWSER, desc =\"Assert if Browser's Title EndsWith [Ignorecase] [<Data>]\", input =InputType.YES) public void assertTitleIEndsWith() { assertTitleI(SpecText.Type.ENDS); } Internally uses Galen Specs Language to check that URL text EndsWith or not to the given URL.As Galen relies on Selenium \u2013 the text will be returned the same way it appears in a real browser (e.g. white space is ignored). text ends - element should end with expected text","title":"assertTitleIEndsWith"},{"location":"webActions/webelement/","text":"Web Element Actions Set Description : This function is used to enter data in an input type object. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object Set @value PageName << Hardcoded Input Object Set Sheet:Column PageName << Input from Datasheet Object Set %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Enter the value [<Data>] in the Field [<Object>]\", input = InputType.YES) public void Set() { if (elementEnabled()) { Element.clear(); Element.sendKeys(Data); Report.updateTestLog(Action, \"Entered Text '\" + Data + \"' on '\" + ObjectName + \"'\", Status.DONE); } else { throw new ElementException(ExceptionType.Element_Not_Enabled, ObjectName); } } SetIfExists Description : This function will check if an element exists . If the element exists, data will be set for that element else that step will be ignored. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object SetIfExists @value PageName << Hardcoded Input Object SetIfExists Sheet:Column PageName << Input from Datasheet Object SetIfExists %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Enter the value [<Data>] in the [<Object>] if it exists\", input = InputType.YES) public void SetIfExists() { if (Element != null) { Set(); } else { Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] not Exists\", Status.DONE); } } setAndCheck Description : This function is used to enter data in object and check if the element's value matches with the entered value. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object SetAndCheck @value PageName << Hardcoded Input Object SetAndCheck Sheet:Column PageName << Input from Datasheet Object SetAndCheck %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Enter the value [<Data>] in the Field [<Object>] and check [<Data>] matches with [<Object>] value\", input = InputType.YES) public void SetAndCheck() { if (elementEnabled()) { Element.clear(); Element.sendKeys(Data); if (Element.getAttribute(\"value\").equals(Data)) { Report.updateTestLog(\"Set\", \"Entered Text '\" + Data + \"' on '\" + ObjectName + \"'\", Status.DONE); } else { Report.updateTestLog(\"Set\", \"Unable Enter Text '\" + Data + \"' on '\" + ObjectName + \"'\", Status.FAIL); } } else { throw new ElementException(ExceptionType.Element_Not_Enabled, ObjectName); } } setEncrypted Description : This function is used to enter encrypted data to an object Input Format : @Encrypted text Usage: ObjectName Action Input Condition Reference Object setEncrypted @value PageName << Hardcoded Input Object setEncrypted Sheet:Column PageName << Input from Datasheet Note : If the data is passed from a data sheet, the data in the datasheet should be encrypted . To manually encrypt a data, select the data cell, right click and select Encrypt Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Enter the Decrypted value [<Data>] in the Field [<Object>]\", input = InputType.YES) public void setEncrypted() { if (Data != null && Data.matches(\".* Enc\")) { if (elementEnabled()) { try { Element.clear(); Data = Data.substring(0, Data.lastIndexOf(\" Enc\")); byte[] valueDecoded = Encryption.getInstance().decrypt(Data).getBytes(); Element.sendKeys(new String(valueDecoded)); Report.updateTestLog(Action, \"Entered Encrypted Text \" + Data + \" on \" + ObjectName, Status.DONE); } catch (Exception ex) { Report.updateTestLog(\"setEncrypted\", ex.getMessage(), Status.FAIL); Logger.getLogger(Basic.class.getName()).log(Level.SEVERE, null, ex); } } else { throw new ElementException(ExceptionType.Element_Not_Enabled, ObjectName); } } else { Report.updateTestLog(Action, \"Data not encrypted '\" + Data + \"'\", Status.DEBUG); } } setInputByLabel Description : This function is used to enter data in an input type object which is adjacent to the provided label type element. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference label object setInputByLabel @value PageName << Hardcoded Input label object setInputByLabel Sheet:Column PageName << Input from Datasheet label object setInputByLabel %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Set the data [<Data>] to an input element that is adjacent to the provided label element [<Object>]\", input =InputType.YES) public void setInputByLabel() { cc.Element = findInputElementByLabelTextByXpath(); new Basic(cc).Set(); } setByJS Description : This function is used to enter data in an input type object using JavaScript . This is useful when selenium functions do not work. Input Format : @Expected data Usage: ObjectName Action Input Condition Reference Object setByJS @value PageName << Hardcoded Input Object setByJS Sheet:Column PageName << Input from Datasheet Object setByJS %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Set [<Data>] on [<Object>]\", input = InputType.YES) public void setByJS() { if (elementPresent()) { try { JavascriptExecutor js = (JavascriptExecutor) Driver; js.executeScript(\"arguments[0].value='\" + Data + \"'\", Element); Report.updateTestLog(Action, \"Entered Text '\" + Data + \"' on '\" + ObjectName + \"'\", Status.DONE); } catch (Exception ex) { Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex); Report.updateTestLog(Action, \"Couldn't set value on \" + ObjectName + \" - Exception \" + ex.getMessage(), Status.FAIL); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, ObjectName); } } setEncryptedByJS Description : This function is used to enter encrypted data to an object using JavaScript . This is useful when selenium functions do not work. Input Format : @Expected encrypted data Usage: ObjectName Action Input Condition Reference Object setEncryptedByJS @value PageName << Hardcoded Input Object setEncryptedByJS Sheet:Column PageName << Input from Datasheet Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Set encrypted data on [<Object>]\", input=InputType.YES) public void setEncryptedByJS() { if (Data != null && Data.matches(\".* Enc\")) { if (elementEnabled()) { try { Data = Data.substring(0, Data.lastIndexOf(\" Enc\")); byte[] valueDecoded = Encryption.getInstance().decrypt(Data).getBytes(); JavascriptExecutor js = (JavascriptExecutor) Driver; js.executeScript(\"arguments[0].value='\" + new String(valueDecoded) + \"'\", Element); Report.updateTestLog(Action, \"Entered Text '\" + Data + \"' on '\" + ObjectName + \"'\", Status.DONE); } catch (Exception ex) { Report.updateTestLog(Action, ex.getMessage(), Status.FAIL); Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Enabled, ObjectName); } } else { Report.updateTestLog(Action, \"Data not encrypted '\" + Data + \"'\", Status.DEBUG); } } Click Description : This function is used to perform click operation on a Web Element. Usage: ObjectName Action Input Condition Reference Object Click PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Click the [<Object>] \") public void Click() { if (elementEnabled()) { Element.click(); Report.updateTestLog(Action, \"Clicking on \" + ObjectName, Status.DONE); } else { throw new ElementException(ExceptionType.Element_Not_Enabled, ObjectName); } } clickIfExists Description : This function is used to perform click operation on a Web Element if the element exists in the DOM. If it does not exist, the step will be ignored. Usage: ObjectName Action Input Condition Reference Object clickIfExists PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Click the [<Object>] if it exists\") public void ClickIfExists() { if (Element != null) { Click(); } else { Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] not Exists\", Status.DONE); } } ClickIfVisible Description : This function is used to perform click operation on a Web Element if the element is visible on the page. If it is not visible, the step will be ignored. Usage: ObjectName Action Input Condition Reference Object ClickIfVisible PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Click the [<Object>] if it is displayed\") public void ClickIfVisible() { if (Element != null) { if (Element.isDisplayed()) { Click(); } else { Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] not Visible\", Status.DONE); } } else { Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] not Exists\", Status.DONE); } } clickInputByLabel Description : This function will click an input type element that is adjacent to the provided label type element. Usage: ObjectName Action Input Condition Reference label object clickInputByLabel PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Click on an element whose label is provided in the [<Object>]\" ) public void clickInputByLabel() { cc.Element = findInputElementByLabelTextByXpath(); new Basic(cc).Click(); } clickInputByText Description : This function will click an input element that is adjacent to the provided text Input Format : @Label of the element ObjectName Action Input Condition Reference Browser clickInputByText @value << Hardcoded Input Browser clickInputByText Sheet:Column << Input from Datasheet Browser clickInputByText %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"click on the element whose label is provided in the [<Input>]\", input =InputType.YES) public void clickInputByText() { cc.Element = findInputElementByLabelTextByXpath(Data); new Basic(cc).Click(); } clickAndWait Description : This function is used to click and wait for the page to be loaded. Usage: ObjectName Action Input Condition Reference Object clickAndWait PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Click the [<Object>] and Wait for Page to be loaded\", condition = InputType.OPTIONAL) public void clickAndWait() { if (Element != null) { Element.click(); waitForPageLoaded(); Report.updateTestLog(Action, \"Click and wait for page load is done\", Status.DONE); } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, Condition); } } clickByJS Description : This function will use JavaScript to click an object. This is useful when selenium functions do not work. Usage: ObjectName Action Input Condition Reference Object clickByJS PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Click on [<Object>]\") public void clickByJS() { if (elementPresent()) { try { JavascriptExecutor js = (JavascriptExecutor) Driver; js.executeScript(\"arguments[0].click();\", Element); Report.updateTestLog(Action, \"Clicked on \" + ObjectName, Status.DONE); } catch (Exception ex) { Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex); Report.updateTestLog(Action, \"Couldn't click on \" + ObjectName + \" - Exception \" + ex.getMessage(), Status.FAIL); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, ObjectName); } } clickAndHoldElement Description : This function is used to click and hold an object. Usage: ObjectName Action Input Condition Reference Object clickAndHoldElement PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Click and hold the [<Object>] element \") public void clickAndHoldElement() { if (elementEnabled()) { new Actions(Driver).clickAndHold(Element).build().perform(); Report.updateTestLog(Action, \"Click and hold done\", Status.DONE); } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Enabled, ObjectName); } } releaseElement Description : This function is used to release the element held by clickAndHoldElement Usage: ObjectName Action Input Condition Reference Object releaseElement PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Release the dragged element over the [<Object>] element \") public void releaseElement() { if (elementEnabled()) { new Actions(Driver).release(Element).build().perform(); Report.updateTestLog(Action, \"releaseElement action is done\", Status.DONE); } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Enabled, ObjectName); } } rightClick Description : This function is used to perform right click operation on an object or in the browser. Usage: ObjectName Action Input Condition Reference Object rightClick PageName Corresponding Code: @Action(desc = \"To Perform Right Click action on WebPage/Element\") public void rightClick() { String desc = \"Right click action performed on \"; Actions action = new Actions(Driver); if (Element != null) { action.contextClick(Element).build().perform(); desc += \"Element - \" + ObjectName; } else { action.contextClick().build().perform(); desc += \"Webpage\"; } Report.updateTestLog(Action, desc, Status.DONE); } doubleClickElement Description : This function will perform double-click on an object. Usage: ObjectName Action Input Condition Reference Object doubleClickElement PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Double click [<Object>] element\") public void doubleClickElement() { if (elementEnabled()) { new Actions(Driver).doubleClick(Element).build().perform(); Report.updateTestLog(\"doubleClickElement\", \"'\" + Element + \"' is doubleClicked\", Status.DONE); } else { throw new ElementException(ExceptionType.Element_Not_Enabled, ObjectName); } } submit Description : This function will perform submit action on an element. Usage: ObjectName Action Input Condition Reference Object submit PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Submit action on the browser\") public void Submit() { if (elementEnabled()) { Element.submit(); Report.updateTestLog(Action, \"[\" + ObjectName + \"] Submitted successfully \", Status.DONE); } else { throw new ElementException(ExceptionType.Element_Not_Enabled, ObjectName); } } SubmitIfExists Description : This function will perform submit action on an element only if it exists in the DOM, else the step will be ignored. Usage: ObjectName Action Input Condition Reference Object SubmitIfExists PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Submit the [<Object>] if it exists\") public void SubmitIfExists() { if (Element != null) { Submit(); } else { Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] not Exists\", Status.DONE); } } submitInputByLabel Description : This function will perform submit action on an input element adjacent to the provided label element. Usage: ObjectName Action Input Condition Reference label object submitInputByLabel PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Submit input element adjacent to the provided label element [<Object>]\") public void submitInputByLabel() { cc.Element = findInputElementByLabelTextByXpath(); new Basic(cc).Submit(); } check Description : This function will check the specified Checkbox element. Usage: ObjectName Action Input Condition Reference Object check PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Check the [<Object>] element\") public void check() { if (Element != null) { if (Element.isEnabled()) { if (!Element.isSelected()) { Element.click(); } if (Element.isSelected()) { Report.updateTestLog(\"check\", \"Checkbox '\" + Element+ \"' has been selected/checked successfully\",Status.DONE); } else { Report.updateTestLog(\"check\", \"Checkbox '\" + Element+ \"' couldn't be selected/checked\", Status.FAIL); } } else { Report.updateTestLog(\"check\", \"Checkbox '\" + Element+ \"' is not enabled\", Status.FAIL); } } else { Report.updateTestLog(Action, \"Object [\" + ObjectName + \"] not found\", Status.FAIL); } } checkAllCheckBoxes Description : This function will check all the checkboxes on a page. Usage: ObjectName Action Input Condition Reference Browser checkAllCheckBoxes Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Check all the check boxes in the context\") public void checkAllCheckBoxes() { try { List<WebElement> checkboxes = Driver.findElements(By.cssSelector(\"input[type=checkbox]\")); if (checkboxes.isEmpty()) { Report.updateTestLog(Action, \"No Checkbox present in the page\", Status.WARNING); } else { for (WebElement checkbox : checkboxes) { if (checkbox.isDisplayed() && !checkbox.isSelected()) { checkbox.click(); } } Report.updateTestLog(Action, \"All checkboxes are checked\", Status.PASS); } } catch (Exception ex) { Report.updateTestLog(Action, \"Error while checking checkboxes - \" + ex, Status.FAIL); Logger.getLogger(CheckBox.class.getName()).log(Level.SEVERE, null, ex); } } uncheck Description : This function will uncheck the specified Checkbox . Usage: ObjectName Action Input Condition Reference Object uncheck PageName Corresponding Code: @Action(object = ObjectType.WEB, desc = \"Uncheck the [<Object>] element\") public void uncheck() { if (Element != null) { if (Element.isEnabled()) { if (Element.isSelected()) { Element.click(); } if (!Element.isSelected()) { Report.updateTestLog(\"uncheck\", \"Checkbox '\" + Element+ \"' has been un-checked successfully\",Status.DONE); } else { Report.updateTestLog(\"uncheck\", \"Checkbox '\" + Element+ \"' couldn't be un-checked\", Status.FAIL); } } else { Report.updateTestLog(\"uncheck\", \"Checkbox '\" + Element+ \"' is not enabled\", Status.FAIL); } } else { Report.updateTestLog(Action, \"Object[\" + ObjectName + \"] not found\", Status.FAIL); } }","title":"Web Element Actions"},{"location":"webActions/webelement/#web-element-actions","text":"","title":"Web Element Actions"},{"location":"webActions/webelement/#set","text":"Description : This function is used to enter data in an input type object. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object Set @value PageName << Hardcoded Input Object Set Sheet:Column PageName << Input from Datasheet Object Set %dynamicVar% PageName << Input from variable Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Enter the value [<Data>] in the Field [<Object>]\", input = InputType.YES) public void Set() { if (elementEnabled()) { Element.clear(); Element.sendKeys(Data); Report.updateTestLog(Action, \"Entered Text '\" + Data + \"' on '\" + ObjectName + \"'\", Status.DONE); } else { throw new ElementException(ExceptionType.Element_Not_Enabled, ObjectName); } }","title":"Set"},{"location":"webActions/webelement/#setifexists","text":"Description : This function will check if an element exists . If the element exists, data will be set for that element else that step will be ignored. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object SetIfExists @value PageName << Hardcoded Input Object SetIfExists Sheet:Column PageName << Input from Datasheet Object SetIfExists %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Enter the value [<Data>] in the [<Object>] if it exists\", input = InputType.YES) public void SetIfExists() { if (Element != null) { Set(); } else { Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] not Exists\", Status.DONE); } }","title":"SetIfExists"},{"location":"webActions/webelement/#setandcheck","text":"Description : This function is used to enter data in object and check if the element's value matches with the entered value. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference Object SetAndCheck @value PageName << Hardcoded Input Object SetAndCheck Sheet:Column PageName << Input from Datasheet Object SetAndCheck %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Enter the value [<Data>] in the Field [<Object>] and check [<Data>] matches with [<Object>] value\", input = InputType.YES) public void SetAndCheck() { if (elementEnabled()) { Element.clear(); Element.sendKeys(Data); if (Element.getAttribute(\"value\").equals(Data)) { Report.updateTestLog(\"Set\", \"Entered Text '\" + Data + \"' on '\" + ObjectName + \"'\", Status.DONE); } else { Report.updateTestLog(\"Set\", \"Unable Enter Text '\" + Data + \"' on '\" + ObjectName + \"'\", Status.FAIL); } } else { throw new ElementException(ExceptionType.Element_Not_Enabled, ObjectName); } }","title":"setAndCheck"},{"location":"webActions/webelement/#setencrypted","text":"Description : This function is used to enter encrypted data to an object Input Format : @Encrypted text Usage: ObjectName Action Input Condition Reference Object setEncrypted @value PageName << Hardcoded Input Object setEncrypted Sheet:Column PageName << Input from Datasheet Note : If the data is passed from a data sheet, the data in the datasheet should be encrypted . To manually encrypt a data, select the data cell, right click and select Encrypt Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Enter the Decrypted value [<Data>] in the Field [<Object>]\", input = InputType.YES) public void setEncrypted() { if (Data != null && Data.matches(\".* Enc\")) { if (elementEnabled()) { try { Element.clear(); Data = Data.substring(0, Data.lastIndexOf(\" Enc\")); byte[] valueDecoded = Encryption.getInstance().decrypt(Data).getBytes(); Element.sendKeys(new String(valueDecoded)); Report.updateTestLog(Action, \"Entered Encrypted Text \" + Data + \" on \" + ObjectName, Status.DONE); } catch (Exception ex) { Report.updateTestLog(\"setEncrypted\", ex.getMessage(), Status.FAIL); Logger.getLogger(Basic.class.getName()).log(Level.SEVERE, null, ex); } } else { throw new ElementException(ExceptionType.Element_Not_Enabled, ObjectName); } } else { Report.updateTestLog(Action, \"Data not encrypted '\" + Data + \"'\", Status.DEBUG); } }","title":"setEncrypted"},{"location":"webActions/webelement/#setinputbylabel","text":"Description : This function is used to enter data in an input type object which is adjacent to the provided label type element. Input Format : @Expected Text Usage: ObjectName Action Input Condition Reference label object setInputByLabel @value PageName << Hardcoded Input label object setInputByLabel Sheet:Column PageName << Input from Datasheet label object setInputByLabel %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Set the data [<Data>] to an input element that is adjacent to the provided label element [<Object>]\", input =InputType.YES) public void setInputByLabel() { cc.Element = findInputElementByLabelTextByXpath(); new Basic(cc).Set(); }","title":"setInputByLabel"},{"location":"webActions/webelement/#setbyjs","text":"Description : This function is used to enter data in an input type object using JavaScript . This is useful when selenium functions do not work. Input Format : @Expected data Usage: ObjectName Action Input Condition Reference Object setByJS @value PageName << Hardcoded Input Object setByJS Sheet:Column PageName << Input from Datasheet Object setByJS %dynamicVar% PageName << Input from variable Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Set [<Data>] on [<Object>]\", input = InputType.YES) public void setByJS() { if (elementPresent()) { try { JavascriptExecutor js = (JavascriptExecutor) Driver; js.executeScript(\"arguments[0].value='\" + Data + \"'\", Element); Report.updateTestLog(Action, \"Entered Text '\" + Data + \"' on '\" + ObjectName + \"'\", Status.DONE); } catch (Exception ex) { Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex); Report.updateTestLog(Action, \"Couldn't set value on \" + ObjectName + \" - Exception \" + ex.getMessage(), Status.FAIL); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, ObjectName); } }","title":"setByJS"},{"location":"webActions/webelement/#setencryptedbyjs","text":"Description : This function is used to enter encrypted data to an object using JavaScript . This is useful when selenium functions do not work. Input Format : @Expected encrypted data Usage: ObjectName Action Input Condition Reference Object setEncryptedByJS @value PageName << Hardcoded Input Object setEncryptedByJS Sheet:Column PageName << Input from Datasheet Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Set encrypted data on [<Object>]\", input=InputType.YES) public void setEncryptedByJS() { if (Data != null && Data.matches(\".* Enc\")) { if (elementEnabled()) { try { Data = Data.substring(0, Data.lastIndexOf(\" Enc\")); byte[] valueDecoded = Encryption.getInstance().decrypt(Data).getBytes(); JavascriptExecutor js = (JavascriptExecutor) Driver; js.executeScript(\"arguments[0].value='\" + new String(valueDecoded) + \"'\", Element); Report.updateTestLog(Action, \"Entered Text '\" + Data + \"' on '\" + ObjectName + \"'\", Status.DONE); } catch (Exception ex) { Report.updateTestLog(Action, ex.getMessage(), Status.FAIL); Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Enabled, ObjectName); } } else { Report.updateTestLog(Action, \"Data not encrypted '\" + Data + \"'\", Status.DEBUG); } }","title":"setEncryptedByJS"},{"location":"webActions/webelement/#click","text":"Description : This function is used to perform click operation on a Web Element. Usage: ObjectName Action Input Condition Reference Object Click PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Click the [<Object>] \") public void Click() { if (elementEnabled()) { Element.click(); Report.updateTestLog(Action, \"Clicking on \" + ObjectName, Status.DONE); } else { throw new ElementException(ExceptionType.Element_Not_Enabled, ObjectName); } }","title":"Click"},{"location":"webActions/webelement/#clickifexists","text":"Description : This function is used to perform click operation on a Web Element if the element exists in the DOM. If it does not exist, the step will be ignored. Usage: ObjectName Action Input Condition Reference Object clickIfExists PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Click the [<Object>] if it exists\") public void ClickIfExists() { if (Element != null) { Click(); } else { Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] not Exists\", Status.DONE); } }","title":"clickIfExists"},{"location":"webActions/webelement/#clickifvisible","text":"Description : This function is used to perform click operation on a Web Element if the element is visible on the page. If it is not visible, the step will be ignored. Usage: ObjectName Action Input Condition Reference Object ClickIfVisible PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Click the [<Object>] if it is displayed\") public void ClickIfVisible() { if (Element != null) { if (Element.isDisplayed()) { Click(); } else { Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] not Visible\", Status.DONE); } } else { Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] not Exists\", Status.DONE); } }","title":"ClickIfVisible"},{"location":"webActions/webelement/#clickinputbylabel","text":"Description : This function will click an input type element that is adjacent to the provided label type element. Usage: ObjectName Action Input Condition Reference label object clickInputByLabel PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Click on an element whose label is provided in the [<Object>]\" ) public void clickInputByLabel() { cc.Element = findInputElementByLabelTextByXpath(); new Basic(cc).Click(); }","title":"clickInputByLabel"},{"location":"webActions/webelement/#clickinputbytext","text":"Description : This function will click an input element that is adjacent to the provided text Input Format : @Label of the element ObjectName Action Input Condition Reference Browser clickInputByText @value << Hardcoded Input Browser clickInputByText Sheet:Column << Input from Datasheet Browser clickInputByText %dynamicVar% << Input from variable Corresponding Code: @Action(object = ObjectType.BROWSER, desc =\"click on the element whose label is provided in the [<Input>]\", input =InputType.YES) public void clickInputByText() { cc.Element = findInputElementByLabelTextByXpath(Data); new Basic(cc).Click(); }","title":"clickInputByText"},{"location":"webActions/webelement/#clickandwait","text":"Description : This function is used to click and wait for the page to be loaded. Usage: ObjectName Action Input Condition Reference Object clickAndWait PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Click the [<Object>] and Wait for Page to be loaded\", condition = InputType.OPTIONAL) public void clickAndWait() { if (Element != null) { Element.click(); waitForPageLoaded(); Report.updateTestLog(Action, \"Click and wait for page load is done\", Status.DONE); } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, Condition); } }","title":"clickAndWait"},{"location":"webActions/webelement/#clickbyjs","text":"Description : This function will use JavaScript to click an object. This is useful when selenium functions do not work. Usage: ObjectName Action Input Condition Reference Object clickByJS PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Click on [<Object>]\") public void clickByJS() { if (elementPresent()) { try { JavascriptExecutor js = (JavascriptExecutor) Driver; js.executeScript(\"arguments[0].click();\", Element); Report.updateTestLog(Action, \"Clicked on \" + ObjectName, Status.DONE); } catch (Exception ex) { Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex); Report.updateTestLog(Action, \"Couldn't click on \" + ObjectName + \" - Exception \" + ex.getMessage(), Status.FAIL); } } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Found, ObjectName); } }","title":"clickByJS"},{"location":"webActions/webelement/#clickandholdelement","text":"Description : This function is used to click and hold an object. Usage: ObjectName Action Input Condition Reference Object clickAndHoldElement PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Click and hold the [<Object>] element \") public void clickAndHoldElement() { if (elementEnabled()) { new Actions(Driver).clickAndHold(Element).build().perform(); Report.updateTestLog(Action, \"Click and hold done\", Status.DONE); } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Enabled, ObjectName); } }","title":"clickAndHoldElement"},{"location":"webActions/webelement/#releaseelement","text":"Description : This function is used to release the element held by clickAndHoldElement Usage: ObjectName Action Input Condition Reference Object releaseElement PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Release the dragged element over the [<Object>] element \") public void releaseElement() { if (elementEnabled()) { new Actions(Driver).release(Element).build().perform(); Report.updateTestLog(Action, \"releaseElement action is done\", Status.DONE); } else { throw new ElementException(ElementException.ExceptionType.Element_Not_Enabled, ObjectName); } }","title":"releaseElement"},{"location":"webActions/webelement/#rightclick","text":"Description : This function is used to perform right click operation on an object or in the browser. Usage: ObjectName Action Input Condition Reference Object rightClick PageName Corresponding Code: @Action(desc = \"To Perform Right Click action on WebPage/Element\") public void rightClick() { String desc = \"Right click action performed on \"; Actions action = new Actions(Driver); if (Element != null) { action.contextClick(Element).build().perform(); desc += \"Element - \" + ObjectName; } else { action.contextClick().build().perform(); desc += \"Webpage\"; } Report.updateTestLog(Action, desc, Status.DONE); }","title":"rightClick"},{"location":"webActions/webelement/#doubleclickelement","text":"Description : This function will perform double-click on an object. Usage: ObjectName Action Input Condition Reference Object doubleClickElement PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Double click [<Object>] element\") public void doubleClickElement() { if (elementEnabled()) { new Actions(Driver).doubleClick(Element).build().perform(); Report.updateTestLog(\"doubleClickElement\", \"'\" + Element + \"' is doubleClicked\", Status.DONE); } else { throw new ElementException(ExceptionType.Element_Not_Enabled, ObjectName); } }","title":"doubleClickElement"},{"location":"webActions/webelement/#submit","text":"Description : This function will perform submit action on an element. Usage: ObjectName Action Input Condition Reference Object submit PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Submit action on the browser\") public void Submit() { if (elementEnabled()) { Element.submit(); Report.updateTestLog(Action, \"[\" + ObjectName + \"] Submitted successfully \", Status.DONE); } else { throw new ElementException(ExceptionType.Element_Not_Enabled, ObjectName); } }","title":"submit"},{"location":"webActions/webelement/#submitifexists","text":"Description : This function will perform submit action on an element only if it exists in the DOM, else the step will be ignored. Usage: ObjectName Action Input Condition Reference Object SubmitIfExists PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Submit the [<Object>] if it exists\") public void SubmitIfExists() { if (Element != null) { Submit(); } else { Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] not Exists\", Status.DONE); } }","title":"SubmitIfExists"},{"location":"webActions/webelement/#submitinputbylabel","text":"Description : This function will perform submit action on an input element adjacent to the provided label element. Usage: ObjectName Action Input Condition Reference label object submitInputByLabel PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc =\"Submit input element adjacent to the provided label element [<Object>]\") public void submitInputByLabel() { cc.Element = findInputElementByLabelTextByXpath(); new Basic(cc).Submit(); }","title":"submitInputByLabel"},{"location":"webActions/webelement/#check","text":"Description : This function will check the specified Checkbox element. Usage: ObjectName Action Input Condition Reference Object check PageName Corresponding Code: @Action(object = ObjectType.SELENIUM, desc = \"Check the [<Object>] element\") public void check() { if (Element != null) { if (Element.isEnabled()) { if (!Element.isSelected()) { Element.click(); } if (Element.isSelected()) { Report.updateTestLog(\"check\", \"Checkbox '\" + Element+ \"' has been selected/checked successfully\",Status.DONE); } else { Report.updateTestLog(\"check\", \"Checkbox '\" + Element+ \"' couldn't be selected/checked\", Status.FAIL); } } else { Report.updateTestLog(\"check\", \"Checkbox '\" + Element+ \"' is not enabled\", Status.FAIL); } } else { Report.updateTestLog(Action, \"Object [\" + ObjectName + \"] not found\", Status.FAIL); } }","title":"check"},{"location":"webActions/webelement/#checkallcheckboxes","text":"Description : This function will check all the checkboxes on a page. Usage: ObjectName Action Input Condition Reference Browser checkAllCheckBoxes Corresponding Code: @Action(object = ObjectType.BROWSER, desc = \"Check all the check boxes in the context\") public void checkAllCheckBoxes() { try { List<WebElement> checkboxes = Driver.findElements(By.cssSelector(\"input[type=checkbox]\")); if (checkboxes.isEmpty()) { Report.updateTestLog(Action, \"No Checkbox present in the page\", Status.WARNING); } else { for (WebElement checkbox : checkboxes) { if (checkbox.isDisplayed() && !checkbox.isSelected()) { checkbox.click(); } } Report.updateTestLog(Action, \"All checkboxes are checked\", Status.PASS); } } catch (Exception ex) { Report.updateTestLog(Action, \"Error while checking checkboxes - \" + ex, Status.FAIL); Logger.getLogger(CheckBox.class.getName()).log(Level.SEVERE, null, ex); } }","title":"checkAllCheckBoxes"},{"location":"webActions/webelement/#uncheck","text":"Description : This function will uncheck the specified Checkbox . Usage: ObjectName Action Input Condition Reference Object uncheck PageName Corresponding Code: @Action(object = ObjectType.WEB, desc = \"Uncheck the [<Object>] element\") public void uncheck() { if (Element != null) { if (Element.isEnabled()) { if (Element.isSelected()) { Element.click(); } if (!Element.isSelected()) { Report.updateTestLog(\"uncheck\", \"Checkbox '\" + Element+ \"' has been un-checked successfully\",Status.DONE); } else { Report.updateTestLog(\"uncheck\", \"Checkbox '\" + Element+ \"' couldn't be un-checked\", Status.FAIL); } } else { Report.updateTestLog(\"uncheck\", \"Checkbox '\" + Element+ \"' is not enabled\", Status.FAIL); } } else { Report.updateTestLog(Action, \"Object[\" + ObjectName + \"] not found\", Status.FAIL); } }","title":"uncheck"}]}